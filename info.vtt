WEBVTT
Kind: captions
Language: en

00:00:02.080 --> 00:00:03.669 align:start position:0%
 
welcome<00:00:02.480><c> to</c><00:00:02.639><c> the</c><00:00:02.720><c> ultimate</c><00:00:03.199><c> typescript</c>

00:00:03.669 --> 00:00:03.679 align:start position:0%
welcome to the ultimate typescript
 

00:00:03.679 --> 00:00:05.670 align:start position:0%
welcome to the ultimate typescript
course<00:00:04.319><c> in</c><00:00:04.400><c> this</c><00:00:04.640><c> course</c><00:00:05.040><c> i'm</c><00:00:05.200><c> going</c><00:00:05.279><c> to</c><00:00:05.440><c> teach</c>

00:00:05.670 --> 00:00:05.680 align:start position:0%
course in this course i'm going to teach
 

00:00:05.680 --> 00:00:06.950 align:start position:0%
course in this course i'm going to teach
you<00:00:05.920><c> everything</c><00:00:06.319><c> you</c><00:00:06.399><c> need</c><00:00:06.560><c> to</c><00:00:06.640><c> know</c><00:00:06.799><c> about</c>

00:00:06.950 --> 00:00:06.960 align:start position:0%
you everything you need to know about
 

00:00:06.960 --> 00:00:08.870 align:start position:0%
you everything you need to know about
typescript<00:00:07.680><c> from</c><00:00:07.839><c> the</c><00:00:08.080><c> basics</c><00:00:08.559><c> to</c><00:00:08.639><c> more</c>

00:00:08.870 --> 00:00:08.880 align:start position:0%
typescript from the basics to more
 

00:00:08.880 --> 00:00:11.030 align:start position:0%
typescript from the basics to more
advanced<00:00:09.280><c> concepts</c><00:00:10.080><c> so</c><00:00:10.320><c> by</c><00:00:10.480><c> the</c><00:00:10.559><c> end</c><00:00:10.719><c> of</c><00:00:10.800><c> this</c>

00:00:11.030 --> 00:00:11.040 align:start position:0%
advanced concepts so by the end of this
 

00:00:11.040 --> 00:00:13.110 align:start position:0%
advanced concepts so by the end of this
course<00:00:11.519><c> you'll</c><00:00:11.759><c> be</c><00:00:11.840><c> able</c><00:00:12.000><c> to</c><00:00:12.160><c> use</c><00:00:12.400><c> typescript</c>

00:00:13.110 --> 00:00:13.120 align:start position:0%
course you'll be able to use typescript
 

00:00:13.120 --> 00:00:15.509 align:start position:0%
course you'll be able to use typescript
to<00:00:13.280><c> build</c><00:00:13.759><c> large-scale</c><00:00:14.400><c> applications</c><00:00:15.360><c> if</c>

00:00:15.509 --> 00:00:15.519 align:start position:0%
to build large-scale applications if
 

00:00:15.519 --> 00:00:17.349 align:start position:0%
to build large-scale applications if
you're<00:00:15.679><c> looking</c><00:00:15.839><c> for</c><00:00:16.000><c> a</c><00:00:16.160><c> comprehensive</c><00:00:17.119><c> easy</c>

00:00:17.349 --> 00:00:17.359 align:start position:0%
you're looking for a comprehensive easy
 

00:00:17.359 --> 00:00:19.590 align:start position:0%
you're looking for a comprehensive easy
to<00:00:17.520><c> follow</c><00:00:18.000><c> well</c><00:00:18.240><c> organized</c><00:00:18.880><c> and</c><00:00:19.119><c> practical</c>

00:00:19.590 --> 00:00:19.600 align:start position:0%
to follow well organized and practical
 

00:00:19.600 --> 00:00:21.990 align:start position:0%
to follow well organized and practical
course<00:00:20.080><c> that</c><00:00:20.320><c> takes</c><00:00:20.560><c> you</c><00:00:20.720><c> from</c><00:00:20.960><c> zero</c><00:00:21.279><c> to</c><00:00:21.439><c> hero</c>

00:00:21.990 --> 00:00:22.000 align:start position:0%
course that takes you from zero to hero
 

00:00:22.000 --> 00:00:23.750 align:start position:0%
course that takes you from zero to hero
this<00:00:22.240><c> is</c><00:00:22.400><c> the</c><00:00:22.560><c> right</c><00:00:22.800><c> typescript</c><00:00:23.359><c> course</c><00:00:23.600><c> for</c>

00:00:23.750 --> 00:00:23.760 align:start position:0%
this is the right typescript course for
 

00:00:23.760 --> 00:00:25.429 align:start position:0%
this is the right typescript course for
you<00:00:24.320><c> everything</c><00:00:24.720><c> you</c><00:00:24.880><c> need</c><00:00:24.960><c> to</c><00:00:25.039><c> know</c><00:00:25.199><c> about</c>

00:00:25.429 --> 00:00:25.439 align:start position:0%
you everything you need to know about
 

00:00:25.439 --> 00:00:27.429 align:start position:0%
you everything you need to know about
typescript<00:00:26.000><c> is</c><00:00:26.160><c> in</c><00:00:26.240><c> one</c><00:00:26.480><c> place</c><00:00:26.960><c> so</c><00:00:27.199><c> you</c><00:00:27.279><c> don't</c>

00:00:27.429 --> 00:00:27.439 align:start position:0%
typescript is in one place so you don't
 

00:00:27.439 --> 00:00:29.109 align:start position:0%
typescript is in one place so you don't
need<00:00:27.599><c> to</c><00:00:27.760><c> jump</c><00:00:28.080><c> back</c><00:00:28.320><c> and</c><00:00:28.400><c> forth</c><00:00:28.720><c> between</c>

00:00:29.109 --> 00:00:29.119 align:start position:0%
need to jump back and forth between
 

00:00:29.119 --> 00:00:31.750 align:start position:0%
need to jump back and forth between
random<00:00:29.519><c> tutorials</c><00:00:30.480><c> i'm</c><00:00:30.720><c> mush</c><00:00:30.960><c> hamidani</c><00:00:31.599><c> and</c>

00:00:31.750 --> 00:00:31.760 align:start position:0%
random tutorials i'm mush hamidani and
 

00:00:31.760 --> 00:00:33.510 align:start position:0%
random tutorials i'm mush hamidani and
i've<00:00:31.920><c> taught</c><00:00:32.239><c> millions</c><00:00:32.640><c> of</c><00:00:32.719><c> people</c><00:00:33.200><c> how</c><00:00:33.360><c> to</c>

00:00:33.510 --> 00:00:33.520 align:start position:0%
i've taught millions of people how to
 

00:00:33.520 --> 00:00:35.190 align:start position:0%
i've taught millions of people how to
advance<00:00:34.000><c> their</c><00:00:34.320><c> software</c><00:00:34.719><c> engineering</c>

00:00:35.190 --> 00:00:35.200 align:start position:0%
advance their software engineering
 

00:00:35.200 --> 00:00:37.110 align:start position:0%
advance their software engineering
skills<00:00:35.680><c> through</c><00:00:35.920><c> my</c><00:00:36.079><c> youtube</c><00:00:36.480><c> channel</c><00:00:36.960><c> and</c>

00:00:37.110 --> 00:00:37.120 align:start position:0%
skills through my youtube channel and
 

00:00:37.120 --> 00:00:39.670 align:start position:0%
skills through my youtube channel and
online<00:00:37.520><c> school</c><00:00:37.920><c> codewoodmosh.com</c><00:00:39.360><c> if</c><00:00:39.520><c> you're</c>

00:00:39.670 --> 00:00:39.680 align:start position:0%
online school codewoodmosh.com if you're
 

00:00:39.680 --> 00:00:41.830 align:start position:0%
online school codewoodmosh.com if you're
new<00:00:39.920><c> here</c><00:00:40.399><c> be</c><00:00:40.559><c> sure</c><00:00:40.800><c> to</c><00:00:40.960><c> subscribe</c><00:00:41.600><c> as</c><00:00:41.680><c> we</c>

00:00:41.830 --> 00:00:41.840 align:start position:0%
new here be sure to subscribe as we
 

00:00:41.840 --> 00:00:44.630 align:start position:0%
new here be sure to subscribe as we
upload<00:00:42.160><c> new</c><00:00:42.399><c> videos</c><00:00:42.879><c> all</c><00:00:43.040><c> the</c><00:00:43.200><c> time</c><00:00:44.079><c> now</c><00:00:44.399><c> let's</c>

00:00:44.630 --> 00:00:44.640 align:start position:0%
upload new videos all the time now let's
 

00:00:44.640 --> 00:00:46.090 align:start position:0%
upload new videos all the time now let's
jump<00:00:44.879><c> in</c><00:00:45.039><c> and</c><00:00:45.200><c> get</c><00:00:45.440><c> started</c>

00:00:46.090 --> 00:00:46.100 align:start position:0%
jump in and get started
 

00:00:46.100 --> 00:00:57.750 align:start position:0%
jump in and get started
[Music]

00:00:57.750 --> 00:00:57.760 align:start position:0%
 
 

00:00:57.760 --> 00:00:59.270 align:start position:0%
 
to<00:00:57.840><c> take</c><00:00:58.079><c> this</c><00:00:58.239><c> course</c><00:00:58.719><c> you</c><00:00:58.879><c> need</c><00:00:58.960><c> to</c><00:00:59.120><c> know</c>

00:00:59.270 --> 00:00:59.280 align:start position:0%
to take this course you need to know
 

00:00:59.280 --> 00:01:01.750 align:start position:0%
to take this course you need to know
typescript<00:01:00.000><c> now</c><00:01:00.320><c> that</c><00:01:00.480><c> was</c><00:01:00.719><c> a</c><00:01:00.800><c> joke</c><00:01:01.440><c> you</c><00:01:01.600><c> don't</c>

00:01:01.750 --> 00:01:01.760 align:start position:0%
typescript now that was a joke you don't
 

00:01:01.760 --> 00:01:03.750 align:start position:0%
typescript now that was a joke you don't
need<00:01:01.920><c> any</c><00:01:02.079><c> familiarity</c><00:01:02.719><c> with</c><00:01:02.879><c> typescript</c><00:01:03.520><c> as</c>

00:01:03.750 --> 00:01:03.760 align:start position:0%
need any familiarity with typescript as
 

00:01:03.760 --> 00:01:05.030 align:start position:0%
need any familiarity with typescript as
i'm<00:01:03.840><c> going</c><00:01:03.920><c> to</c><00:01:04.080><c> cover</c><00:01:04.479><c> everything</c><00:01:04.879><c> from</c>

00:01:05.030 --> 00:01:05.040 align:start position:0%
i'm going to cover everything from
 

00:01:05.040 --> 00:01:07.429 align:start position:0%
i'm going to cover everything from
scratch<00:01:05.680><c> but</c><00:01:05.840><c> because</c><00:01:06.240><c> typescript</c><00:01:06.880><c> is</c><00:01:07.040><c> built</c>

00:01:07.429 --> 00:01:07.439 align:start position:0%
scratch but because typescript is built
 

00:01:07.439 --> 00:01:09.429 align:start position:0%
scratch but because typescript is built
on<00:01:07.520><c> top</c><00:01:07.760><c> of</c><00:01:07.920><c> javascript</c><00:01:08.720><c> you</c><00:01:08.880><c> need</c><00:01:09.040><c> basic</c>

00:01:09.429 --> 00:01:09.439 align:start position:0%
on top of javascript you need basic
 

00:01:09.439 --> 00:01:11.670 align:start position:0%
on top of javascript you need basic
familiarity<00:01:10.080><c> with</c><00:01:10.400><c> javascript</c><00:01:11.040><c> concepts</c>

00:01:11.670 --> 00:01:11.680 align:start position:0%
familiarity with javascript concepts
 

00:01:11.680 --> 00:01:14.710 align:start position:0%
familiarity with javascript concepts
such<00:01:11.920><c> as</c><00:01:12.159><c> variables</c><00:01:12.720><c> and</c><00:01:12.880><c> constants</c><00:01:13.760><c> arrays</c>

00:01:14.710 --> 00:01:14.720 align:start position:0%
such as variables and constants arrays
 

00:01:14.720 --> 00:01:17.270 align:start position:0%
such as variables and constants arrays
objects<00:01:15.520><c> functions</c><00:01:16.240><c> arrow</c><00:01:16.560><c> functions</c>

00:01:17.270 --> 00:01:17.280 align:start position:0%
objects functions arrow functions
 

00:01:17.280 --> 00:01:19.350 align:start position:0%
objects functions arrow functions
destructuring<00:01:18.080><c> and</c><00:01:18.159><c> so</c><00:01:18.400><c> on</c><00:01:18.880><c> if</c><00:01:19.040><c> you</c><00:01:19.119><c> need</c><00:01:19.280><c> to</c>

00:01:19.350 --> 00:01:19.360 align:start position:0%
destructuring and so on if you need to
 

00:01:19.360 --> 00:01:21.350 align:start position:0%
destructuring and so on if you need to
refresh<00:01:19.759><c> the</c><00:01:19.920><c> basics</c><00:01:20.560><c> i</c><00:01:20.720><c> have</c><00:01:20.880><c> a</c><00:01:20.960><c> bunch</c><00:01:21.200><c> of</c>

00:01:21.350 --> 00:01:21.360 align:start position:0%
refresh the basics i have a bunch of
 

00:01:21.360 --> 00:01:23.510 align:start position:0%
refresh the basics i have a bunch of
tutorials<00:01:22.000><c> and</c><00:01:22.320><c> comprehensive</c><00:01:22.960><c> courses</c><00:01:23.360><c> you</c>

00:01:23.510 --> 00:01:23.520 align:start position:0%
tutorials and comprehensive courses you
 

00:01:23.520 --> 00:01:25.350 align:start position:0%
tutorials and comprehensive courses you
can<00:01:23.680><c> take</c><00:01:24.080><c> i've</c><00:01:24.320><c> put</c><00:01:24.479><c> the</c><00:01:24.560><c> links</c><00:01:24.880><c> down</c><00:01:25.040><c> below</c>

00:01:25.350 --> 00:01:25.360 align:start position:0%
can take i've put the links down below
 

00:01:25.360 --> 00:01:29.340 align:start position:0%
can take i've put the links down below
in<00:01:25.520><c> case</c><00:01:25.680><c> you</c><00:01:25.840><c> are</c><00:01:25.920><c> interested</c>

00:01:29.340 --> 00:01:29.350 align:start position:0%
 
 

00:01:29.350 --> 00:01:32.550 align:start position:0%
 
[Music]

00:01:32.550 --> 00:01:32.560 align:start position:0%
[Music]
 

00:01:32.560 --> 00:01:34.230 align:start position:0%
[Music]
so<00:01:32.960><c> assuming</c><00:01:33.439><c> that</c><00:01:33.600><c> you're</c><00:01:33.840><c> the</c><00:01:34.000><c> right</c>

00:01:34.230 --> 00:01:34.240 align:start position:0%
so assuming that you're the right
 

00:01:34.240 --> 00:01:36.069 align:start position:0%
so assuming that you're the right
student<00:01:34.560><c> for</c><00:01:34.720><c> this</c><00:01:34.960><c> course</c><00:01:35.520><c> now</c><00:01:35.680><c> let's</c><00:01:35.920><c> talk</c>

00:01:36.069 --> 00:01:36.079 align:start position:0%
student for this course now let's talk
 

00:01:36.079 --> 00:01:38.630 align:start position:0%
student for this course now let's talk
about<00:01:36.479><c> how</c><00:01:36.640><c> you</c><00:01:36.799><c> should</c><00:01:36.960><c> take</c><00:01:37.119><c> this</c><00:01:37.360><c> course</c>

00:01:38.630 --> 00:01:38.640 align:start position:0%
about how you should take this course
 

00:01:38.640 --> 00:01:40.710 align:start position:0%
about how you should take this course
first<00:01:38.960><c> and</c><00:01:39.040><c> foremost</c><00:01:39.759><c> i</c><00:01:40.000><c> want</c><00:01:40.159><c> you</c><00:01:40.320><c> to</c><00:01:40.479><c> watch</c>

00:01:40.710 --> 00:01:40.720 align:start position:0%
first and foremost i want you to watch
 

00:01:40.720 --> 00:01:42.870 align:start position:0%
first and foremost i want you to watch
this<00:01:41.040><c> entire</c><00:01:41.520><c> course</c><00:01:42.000><c> all</c><00:01:42.240><c> the</c><00:01:42.320><c> way</c><00:01:42.560><c> from</c><00:01:42.720><c> the</c>

00:01:42.870 --> 00:01:42.880 align:start position:0%
this entire course all the way from the
 

00:01:42.880 --> 00:01:44.630 align:start position:0%
this entire course all the way from the
beginning<00:01:43.360><c> to</c><00:01:43.520><c> the</c><00:01:43.680><c> end</c><00:01:44.079><c> because</c><00:01:44.399><c> every</c>

00:01:44.630 --> 00:01:44.640 align:start position:0%
beginning to the end because every
 

00:01:44.640 --> 00:01:46.710 align:start position:0%
beginning to the end because every
lesson<00:01:45.040><c> teaches</c><00:01:45.360><c> you</c><00:01:45.520><c> something</c><00:01:45.920><c> new</c><00:01:46.479><c> if</c><00:01:46.640><c> you</c>

00:01:46.710 --> 00:01:46.720 align:start position:0%
lesson teaches you something new if you
 

00:01:46.720 --> 00:01:48.230 align:start position:0%
lesson teaches you something new if you
have<00:01:46.880><c> taken</c><00:01:47.200><c> any</c><00:01:47.360><c> of</c><00:01:47.439><c> my</c><00:01:47.680><c> other</c><00:01:47.840><c> courses</c>

00:01:48.230 --> 00:01:48.240 align:start position:0%
have taken any of my other courses
 

00:01:48.240 --> 00:01:49.910 align:start position:0%
have taken any of my other courses
before<00:01:48.799><c> you</c><00:01:48.960><c> know</c><00:01:49.119><c> that</c><00:01:49.360><c> i</c><00:01:49.439><c> don't</c><00:01:49.600><c> waste</c><00:01:49.759><c> your</c>

00:01:49.910 --> 00:01:49.920 align:start position:0%
before you know that i don't waste your
 

00:01:49.920 --> 00:01:52.870 align:start position:0%
before you know that i don't waste your
time<00:01:50.159><c> with</c><00:01:50.479><c> repetitive</c><00:01:51.200><c> or</c><00:01:51.520><c> useless</c><00:01:52.000><c> stuff</c><00:01:52.560><c> so</c>

00:01:52.870 --> 00:01:52.880 align:start position:0%
time with repetitive or useless stuff so
 

00:01:52.880 --> 00:01:55.270 align:start position:0%
time with repetitive or useless stuff so
make<00:01:53.040><c> sure</c><00:01:53.280><c> to</c><00:01:53.439><c> watch</c><00:01:53.840><c> every</c><00:01:54.159><c> lesson</c><00:01:54.960><c> now</c>

00:01:55.270 --> 00:01:55.280 align:start position:0%
make sure to watch every lesson now
 

00:01:55.280 --> 00:01:57.109 align:start position:0%
make sure to watch every lesson now
while<00:01:55.520><c> watching</c><00:01:55.840><c> each</c><00:01:56.000><c> lesson</c><00:01:56.560><c> i</c><00:01:56.719><c> want</c><00:01:56.880><c> you</c><00:01:57.040><c> to</c>

00:01:57.109 --> 00:01:57.119 align:start position:0%
while watching each lesson i want you to
 

00:01:57.119 --> 00:01:59.190 align:start position:0%
while watching each lesson i want you to
take<00:01:57.360><c> notes</c><00:01:58.000><c> you</c><00:01:58.159><c> can</c><00:01:58.240><c> just</c><00:01:58.479><c> write</c><00:01:58.719><c> down</c><00:01:58.960><c> some</c>

00:01:59.190 --> 00:01:59.200 align:start position:0%
take notes you can just write down some
 

00:01:59.200 --> 00:02:01.109 align:start position:0%
take notes you can just write down some
keywords<00:01:59.600><c> on</c><00:01:59.759><c> a</c><00:01:59.840><c> piece</c><00:02:00.079><c> of</c><00:02:00.240><c> paper</c><00:02:00.799><c> if</c><00:02:00.960><c> you</c>

00:02:01.109 --> 00:02:01.119 align:start position:0%
keywords on a piece of paper if you
 

00:02:01.119 --> 00:02:03.030 align:start position:0%
keywords on a piece of paper if you
don't<00:02:01.280><c> want</c><00:02:01.439><c> to</c><00:02:01.520><c> write</c><00:02:01.759><c> a</c><00:02:01.840><c> lot</c><00:02:02.000><c> of</c><00:02:02.159><c> notes</c><00:02:02.799><c> i</c>

00:02:03.030 --> 00:02:03.040 align:start position:0%
don't want to write a lot of notes i
 

00:02:03.040 --> 00:02:04.950 align:start position:0%
don't want to write a lot of notes i
strongly<00:02:03.520><c> believe</c><00:02:03.840><c> that</c><00:02:04.079><c> the</c><00:02:04.240><c> act</c><00:02:04.479><c> of</c><00:02:04.640><c> writing</c>

00:02:04.950 --> 00:02:04.960 align:start position:0%
strongly believe that the act of writing
 

00:02:04.960 --> 00:02:07.109 align:start position:0%
strongly believe that the act of writing
things<00:02:05.200><c> down</c><00:02:05.680><c> will</c><00:02:05.920><c> help</c><00:02:06.079><c> you</c><00:02:06.320><c> remember</c><00:02:06.880><c> new</c>

00:02:07.109 --> 00:02:07.119 align:start position:0%
things down will help you remember new
 

00:02:07.119 --> 00:02:08.869 align:start position:0%
things down will help you remember new
things<00:02:07.360><c> that</c><00:02:07.439><c> you</c><00:02:07.600><c> learn</c><00:02:08.319><c> now</c><00:02:08.479><c> when</c><00:02:08.640><c> you</c><00:02:08.720><c> get</c>

00:02:08.869 --> 00:02:08.879 align:start position:0%
things that you learn now when you get
 

00:02:08.879 --> 00:02:10.790 align:start position:0%
things that you learn now when you get
to<00:02:08.959><c> the</c><00:02:09.039><c> end</c><00:02:09.200><c> of</c><00:02:09.360><c> each</c><00:02:09.520><c> section</c><00:02:10.160><c> make</c><00:02:10.399><c> sure</c><00:02:10.640><c> to</c>

00:02:10.790 --> 00:02:10.800 align:start position:0%
to the end of each section make sure to
 

00:02:10.800 --> 00:02:12.949 align:start position:0%
to the end of each section make sure to
do<00:02:11.039><c> all</c><00:02:11.120><c> the</c><00:02:11.280><c> exercises</c><00:02:12.239><c> i've</c><00:02:12.560><c> carefully</c>

00:02:12.949 --> 00:02:12.959 align:start position:0%
do all the exercises i've carefully
 

00:02:12.959 --> 00:02:14.949 align:start position:0%
do all the exercises i've carefully
designed<00:02:13.360><c> these</c><00:02:13.599><c> exercises</c><00:02:14.319><c> to</c><00:02:14.560><c> help</c><00:02:14.720><c> you</c>

00:02:14.949 --> 00:02:14.959 align:start position:0%
designed these exercises to help you
 

00:02:14.959 --> 00:02:16.869 align:start position:0%
designed these exercises to help you
better<00:02:15.280><c> understand</c><00:02:16.000><c> and</c><00:02:16.239><c> remember</c><00:02:16.720><c> the</c>

00:02:16.869 --> 00:02:16.879 align:start position:0%
better understand and remember the
 

00:02:16.879 --> 00:02:19.830 align:start position:0%
better understand and remember the
materials<00:02:17.840><c> remember</c><00:02:18.560><c> the</c><00:02:18.720><c> more</c><00:02:18.879><c> you</c><00:02:19.120><c> practice</c>

00:02:19.830 --> 00:02:19.840 align:start position:0%
materials remember the more you practice
 

00:02:19.840 --> 00:02:21.670 align:start position:0%
materials remember the more you practice
the<00:02:20.000><c> better</c><00:02:20.239><c> you'll</c><00:02:20.480><c> be</c><00:02:20.640><c> at</c><00:02:20.800><c> typescript</c><00:02:21.280><c> or</c>

00:02:21.670 --> 00:02:21.680 align:start position:0%
the better you'll be at typescript or
 

00:02:21.680 --> 00:02:27.030 align:start position:0%
the better you'll be at typescript or
coding<00:02:22.080><c> in</c><00:02:22.239><c> general</c>

00:02:27.030 --> 00:02:27.040 align:start position:0%
 
 

00:02:27.040 --> 00:02:28.550 align:start position:0%
 
welcome<00:02:27.520><c> to</c><00:02:27.599><c> the</c><00:02:27.760><c> first</c><00:02:28.000><c> section</c><00:02:28.319><c> of</c><00:02:28.400><c> the</c>

00:02:28.550 --> 00:02:28.560 align:start position:0%
welcome to the first section of the
 

00:02:28.560 --> 00:02:30.470 align:start position:0%
welcome to the first section of the
ultimate<00:02:29.120><c> typescript</c><00:02:29.599><c> course</c>

00:02:30.470 --> 00:02:30.480 align:start position:0%
ultimate typescript course
 

00:02:30.480 --> 00:02:31.990 align:start position:0%
ultimate typescript course
we're<00:02:30.640><c> going</c><00:02:30.800><c> to</c><00:02:30.879><c> start</c><00:02:31.120><c> this</c><00:02:31.280><c> section</c><00:02:31.680><c> with</c><00:02:31.920><c> a</c>

00:02:31.990 --> 00:02:32.000 align:start position:0%
we're going to start this section with a
 

00:02:32.000 --> 00:02:33.670 align:start position:0%
we're going to start this section with a
quick<00:02:32.239><c> introduction</c><00:02:32.800><c> about</c><00:02:33.040><c> typescript</c>

00:02:33.670 --> 00:02:33.680 align:start position:0%
quick introduction about typescript
 

00:02:33.680 --> 00:02:35.830 align:start position:0%
quick introduction about typescript
we're<00:02:33.840><c> going</c><00:02:33.920><c> to</c><00:02:34.000><c> talk</c><00:02:34.239><c> about</c><00:02:34.800><c> what</c><00:02:34.959><c> it</c><00:02:35.200><c> is</c><00:02:35.680><c> why</c>

00:02:35.830 --> 00:02:35.840 align:start position:0%
we're going to talk about what it is why
 

00:02:35.840 --> 00:02:37.830 align:start position:0%
we're going to talk about what it is why
we<00:02:36.000><c> use</c><00:02:36.160><c> it</c><00:02:36.400><c> and</c><00:02:36.560><c> when</c><00:02:37.200><c> then</c><00:02:37.440><c> we're</c><00:02:37.599><c> going</c><00:02:37.760><c> to</c>

00:02:37.830 --> 00:02:37.840 align:start position:0%
we use it and when then we're going to
 

00:02:37.840 --> 00:02:39.990 align:start position:0%
we use it and when then we're going to
set<00:02:38.080><c> up</c><00:02:38.239><c> our</c><00:02:38.400><c> development</c><00:02:38.959><c> environment</c><00:02:39.599><c> and</c>

00:02:39.990 --> 00:02:40.000 align:start position:0%
set up our development environment and
 

00:02:40.000 --> 00:02:43.030 align:start position:0%
set up our development environment and
create<00:02:40.640><c> our</c><00:02:40.800><c> first</c><00:02:41.360><c> typescript</c><00:02:41.920><c> program</c><00:02:42.640><c> next</c>

00:02:43.030 --> 00:02:43.040 align:start position:0%
create our first typescript program next
 

00:02:43.040 --> 00:02:44.630 align:start position:0%
create our first typescript program next
we'll<00:02:43.280><c> talk</c><00:02:43.519><c> about</c><00:02:43.840><c> configuring</c><00:02:44.480><c> the</c>

00:02:44.630 --> 00:02:44.640 align:start position:0%
we'll talk about configuring the
 

00:02:44.640 --> 00:02:46.710 align:start position:0%
we'll talk about configuring the
typescript<00:02:45.200><c> compiler</c><00:02:46.080><c> and</c><00:02:46.239><c> we'll</c><00:02:46.480><c> finish</c>

00:02:46.710 --> 00:02:46.720 align:start position:0%
typescript compiler and we'll finish
 

00:02:46.720 --> 00:02:49.110 align:start position:0%
typescript compiler and we'll finish
this<00:02:46.879><c> section</c><00:02:47.519><c> by</c><00:02:47.760><c> talking</c><00:02:48.080><c> about</c><00:02:48.400><c> debugging</c>

00:02:49.110 --> 00:02:49.120 align:start position:0%
this section by talking about debugging
 

00:02:49.120 --> 00:02:51.509 align:start position:0%
this section by talking about debugging
typescript<00:02:49.680><c> applications</c><00:02:50.560><c> so</c><00:02:50.879><c> let's</c><00:02:51.120><c> jump</c><00:02:51.360><c> in</c>

00:02:51.509 --> 00:02:51.519 align:start position:0%
typescript applications so let's jump in
 

00:02:51.519 --> 00:02:54.220 align:start position:0%
typescript applications so let's jump in
and<00:02:51.760><c> get</c><00:02:51.920><c> started</c>

00:02:54.220 --> 00:02:54.230 align:start position:0%
and get started
 

00:02:54.230 --> 00:03:02.710 align:start position:0%
and get started
[Music]

00:03:02.710 --> 00:03:02.720 align:start position:0%
 
 

00:03:02.720 --> 00:03:04.390 align:start position:0%
 
let's<00:03:02.959><c> start</c><00:03:03.200><c> by</c><00:03:03.360><c> talking</c><00:03:03.680><c> about</c><00:03:03.920><c> the</c><00:03:04.159><c> top</c>

00:03:04.390 --> 00:03:04.400 align:start position:0%
let's start by talking about the top
 

00:03:04.400 --> 00:03:06.149 align:start position:0%
let's start by talking about the top
three<00:03:04.720><c> questions</c><00:03:05.200><c> people</c><00:03:05.599><c> ask</c><00:03:05.840><c> about</c>

00:03:06.149 --> 00:03:06.159 align:start position:0%
three questions people ask about
 

00:03:06.159 --> 00:03:08.869 align:start position:0%
three questions people ask about
typescript<00:03:07.200><c> what</c><00:03:07.360><c> is</c><00:03:07.519><c> typescript</c><00:03:08.480><c> why</c><00:03:08.640><c> do</c><00:03:08.800><c> we</c>

00:03:08.869 --> 00:03:08.879 align:start position:0%
typescript what is typescript why do we
 

00:03:08.879 --> 00:03:11.110 align:start position:0%
typescript what is typescript why do we
need<00:03:09.120><c> it</c><00:03:09.519><c> and</c><00:03:09.920><c> how</c><00:03:10.159><c> is</c><00:03:10.239><c> it</c><00:03:10.400><c> different</c><00:03:10.800><c> from</c>

00:03:11.110 --> 00:03:11.120 align:start position:0%
need it and how is it different from
 

00:03:11.120 --> 00:03:13.830 align:start position:0%
need it and how is it different from
plain<00:03:11.519><c> or</c><00:03:11.840><c> vanilla</c><00:03:12.400><c> javascript</c><00:03:13.440><c> well</c>

00:03:13.830 --> 00:03:13.840 align:start position:0%
plain or vanilla javascript well
 

00:03:13.840 --> 00:03:15.830 align:start position:0%
plain or vanilla javascript well
typescript<00:03:14.560><c> is</c><00:03:14.720><c> a</c><00:03:14.879><c> programming</c><00:03:15.280><c> language</c>

00:03:15.830 --> 00:03:15.840 align:start position:0%
typescript is a programming language
 

00:03:15.840 --> 00:03:18.229 align:start position:0%
typescript is a programming language
created<00:03:16.319><c> at</c><00:03:16.480><c> microsoft</c><00:03:17.200><c> to</c><00:03:17.440><c> address</c><00:03:18.000><c> some</c><00:03:18.159><c> of</c>

00:03:18.229 --> 00:03:18.239 align:start position:0%
created at microsoft to address some of
 

00:03:18.239 --> 00:03:20.630 align:start position:0%
created at microsoft to address some of
the<00:03:18.480><c> shortcomings</c><00:03:19.200><c> of</c><00:03:19.360><c> javascript</c><00:03:20.319><c> you</c><00:03:20.480><c> can</c>

00:03:20.630 --> 00:03:20.640 align:start position:0%
the shortcomings of javascript you can
 

00:03:20.640 --> 00:03:22.470 align:start position:0%
the shortcomings of javascript you can
think<00:03:20.800><c> of</c><00:03:20.959><c> it</c><00:03:21.120><c> like</c><00:03:21.280><c> the</c><00:03:21.440><c> brother</c><00:03:21.920><c> or</c><00:03:22.159><c> sister</c>

00:03:22.470 --> 00:03:22.480 align:start position:0%
think of it like the brother or sister
 

00:03:22.480 --> 00:03:25.110 align:start position:0%
think of it like the brother or sister
of<00:03:22.640><c> javascript</c><00:03:23.680><c> javascript</c><00:03:24.400><c> is</c><00:03:24.480><c> like</c><00:03:24.720><c> a</c><00:03:24.799><c> kid</c>

00:03:25.110 --> 00:03:25.120 align:start position:0%
of javascript javascript is like a kid
 

00:03:25.120 --> 00:03:27.350 align:start position:0%
of javascript javascript is like a kid
without<00:03:25.440><c> any</c><00:03:25.680><c> discipline</c><00:03:26.480><c> who</c><00:03:26.640><c> does</c><00:03:26.959><c> whatever</c>

00:03:27.350 --> 00:03:27.360 align:start position:0%
without any discipline who does whatever
 

00:03:27.360 --> 00:03:29.589 align:start position:0%
without any discipline who does whatever
he<00:03:27.519><c> or</c><00:03:27.680><c> she</c><00:03:27.840><c> wants</c><00:03:28.640><c> typescript</c><00:03:29.200><c> on</c><00:03:29.280><c> the</c><00:03:29.360><c> other</c>

00:03:29.589 --> 00:03:29.599 align:start position:0%
he or she wants typescript on the other
 

00:03:29.599 --> 00:03:32.470 align:start position:0%
he or she wants typescript on the other
hand<00:03:29.920><c> is</c><00:03:30.080><c> like</c><00:03:30.319><c> a</c><00:03:30.480><c> kid</c><00:03:30.720><c> with</c><00:03:30.879><c> some</c><00:03:31.120><c> discipline</c>

00:03:32.470 --> 00:03:32.480 align:start position:0%
hand is like a kid with some discipline
 

00:03:32.480 --> 00:03:34.949 align:start position:0%
hand is like a kid with some discipline
now<00:03:32.720><c> technically</c><00:03:33.280><c> speaking</c><00:03:34.000><c> typescript</c><00:03:34.640><c> is</c><00:03:34.799><c> a</c>

00:03:34.949 --> 00:03:34.959 align:start position:0%
now technically speaking typescript is a
 

00:03:34.959 --> 00:03:36.789 align:start position:0%
now technically speaking typescript is a
programming<00:03:35.440><c> language</c><00:03:35.920><c> built</c><00:03:36.319><c> on</c><00:03:36.400><c> top</c><00:03:36.640><c> of</c>

00:03:36.789 --> 00:03:36.799 align:start position:0%
programming language built on top of
 

00:03:36.799 --> 00:03:39.670 align:start position:0%
programming language built on top of
javascript<00:03:37.680><c> so</c><00:03:37.920><c> every</c><00:03:38.239><c> javascript</c><00:03:38.959><c> file</c><00:03:39.360><c> is</c><00:03:39.519><c> a</c>

00:03:39.670 --> 00:03:39.680 align:start position:0%
javascript so every javascript file is a
 

00:03:39.680 --> 00:03:42.229 align:start position:0%
javascript so every javascript file is a
valid<00:03:40.239><c> typescript</c><00:03:40.720><c> file</c><00:03:41.440><c> but</c><00:03:41.680><c> typescript</c>

00:03:42.229 --> 00:03:42.239 align:start position:0%
valid typescript file but typescript
 

00:03:42.239 --> 00:03:43.910 align:start position:0%
valid typescript file but typescript
adds<00:03:42.480><c> some</c><00:03:42.720><c> really</c><00:03:43.040><c> cool</c><00:03:43.280><c> features</c><00:03:43.680><c> to</c>

00:03:43.910 --> 00:03:43.920 align:start position:0%
adds some really cool features to
 

00:03:43.920 --> 00:03:45.830 align:start position:0%
adds some really cool features to
javascript<00:03:44.640><c> that</c><00:03:44.879><c> help</c><00:03:45.120><c> us</c><00:03:45.280><c> build</c><00:03:45.519><c> more</c>

00:03:45.830 --> 00:03:45.840 align:start position:0%
javascript that help us build more
 

00:03:45.840 --> 00:03:48.390 align:start position:0%
javascript that help us build more
robust<00:03:46.560><c> and</c><00:03:46.720><c> maintainable</c><00:03:47.360><c> applications</c><00:03:48.239><c> in</c>

00:03:48.390 --> 00:03:48.400 align:start position:0%
robust and maintainable applications in
 

00:03:48.400 --> 00:03:50.710 align:start position:0%
robust and maintainable applications in
less<00:03:48.640><c> time</c><00:03:49.280><c> the</c><00:03:49.519><c> most</c><00:03:49.840><c> important</c><00:03:50.239><c> feature</c>

00:03:50.710 --> 00:03:50.720 align:start position:0%
less time the most important feature
 

00:03:50.720 --> 00:03:53.030 align:start position:0%
less time the most important feature
typescript<00:03:51.280><c> offers</c><00:03:51.680><c> is</c><00:03:51.840><c> static</c><00:03:52.239><c> typing</c><00:03:52.799><c> what</c>

00:03:53.030 --> 00:03:53.040 align:start position:0%
typescript offers is static typing what
 

00:03:53.040 --> 00:03:55.429 align:start position:0%
typescript offers is static typing what
does<00:03:53.200><c> that</c><00:03:53.360><c> mean</c><00:03:53.680><c> well</c><00:03:54.400><c> we</c><00:03:54.560><c> have</c><00:03:54.799><c> two</c><00:03:55.040><c> types</c><00:03:55.280><c> of</c>

00:03:55.429 --> 00:03:55.439 align:start position:0%
does that mean well we have two types of
 

00:03:55.439 --> 00:03:57.589 align:start position:0%
does that mean well we have two types of
programming<00:03:55.920><c> languages</c><00:03:56.720><c> statically</c><00:03:57.200><c> typed</c>

00:03:57.589 --> 00:03:57.599 align:start position:0%
programming languages statically typed
 

00:03:57.599 --> 00:03:59.830 align:start position:0%
programming languages statically typed
and<00:03:57.920><c> dynamically</c><00:03:58.480><c> typed</c><00:03:58.720><c> languages</c>

00:03:59.830 --> 00:03:59.840 align:start position:0%
and dynamically typed languages
 

00:03:59.840 --> 00:04:01.910 align:start position:0%
and dynamically typed languages
in<00:04:00.000><c> statically</c><00:04:00.480><c> typed</c><00:04:00.720><c> languages</c><00:04:01.519><c> like</c><00:04:01.680><c> c</c>

00:04:01.910 --> 00:04:01.920 align:start position:0%
in statically typed languages like c
 

00:04:01.920 --> 00:04:04.550 align:start position:0%
in statically typed languages like c
plus<00:04:02.159><c> plus</c><00:04:02.640><c> c</c><00:04:02.879><c> sharp</c><00:04:03.200><c> and</c><00:04:03.360><c> java</c><00:04:04.000><c> we</c><00:04:04.159><c> know</c><00:04:04.400><c> the</c>

00:04:04.550 --> 00:04:04.560 align:start position:0%
plus plus c sharp and java we know the
 

00:04:04.560 --> 00:04:06.710 align:start position:0%
plus plus c sharp and java we know the
type<00:04:04.799><c> of</c><00:04:04.959><c> variables</c><00:04:05.519><c> at</c><00:04:05.760><c> compile</c><00:04:06.239><c> time</c><00:04:06.560><c> or</c>

00:04:06.710 --> 00:04:06.720 align:start position:0%
type of variables at compile time or
 

00:04:06.720 --> 00:04:09.509 align:start position:0%
type of variables at compile time or
while<00:04:07.040><c> coding</c><00:04:07.920><c> for</c><00:04:08.080><c> example</c><00:04:08.560><c> we</c><00:04:08.720><c> can</c><00:04:08.879><c> declare</c>

00:04:09.509 --> 00:04:09.519 align:start position:0%
while coding for example we can declare
 

00:04:09.519 --> 00:04:11.670 align:start position:0%
while coding for example we can declare
a<00:04:09.680><c> variable</c><00:04:10.159><c> of</c><00:04:10.319><c> type</c><00:04:10.640><c> integer</c><00:04:11.280><c> and</c><00:04:11.439><c> this</c>

00:04:11.670 --> 00:04:11.680 align:start position:0%
a variable of type integer and this
 

00:04:11.680 --> 00:04:14.229 align:start position:0%
a variable of type integer and this
variable<00:04:12.159><c> can</c><00:04:12.480><c> only</c><00:04:12.799><c> hold</c><00:04:13.200><c> integer</c><00:04:13.680><c> values</c>

00:04:14.229 --> 00:04:14.239 align:start position:0%
variable can only hold integer values
 

00:04:14.239 --> 00:04:16.310 align:start position:0%
variable can only hold integer values
nothing<00:04:14.640><c> else</c><00:04:15.200><c> so</c><00:04:15.360><c> we</c><00:04:15.519><c> cannot</c><00:04:15.760><c> set</c><00:04:16.000><c> it</c><00:04:16.079><c> to</c><00:04:16.160><c> a</c>

00:04:16.310 --> 00:04:16.320 align:start position:0%
nothing else so we cannot set it to a
 

00:04:16.320 --> 00:04:18.949 align:start position:0%
nothing else so we cannot set it to a
string<00:04:16.720><c> or</c><00:04:17.040><c> another</c><00:04:17.519><c> type</c><00:04:17.759><c> of</c><00:04:17.919><c> object</c>

00:04:18.949 --> 00:04:18.959 align:start position:0%
string or another type of object
 

00:04:18.959 --> 00:04:20.949 align:start position:0%
string or another type of object
in<00:04:19.199><c> dynamically</c><00:04:19.759><c> typed</c><00:04:20.079><c> languages</c><00:04:20.720><c> like</c>

00:04:20.949 --> 00:04:20.959 align:start position:0%
in dynamically typed languages like
 

00:04:20.959 --> 00:04:23.830 align:start position:0%
in dynamically typed languages like
javascript<00:04:21.840><c> python</c><00:04:22.400><c> and</c><00:04:22.560><c> ruby</c><00:04:23.280><c> the</c><00:04:23.440><c> type</c><00:04:23.680><c> of</c>

00:04:23.830 --> 00:04:23.840 align:start position:0%
javascript python and ruby the type of
 

00:04:23.840 --> 00:04:26.710 align:start position:0%
javascript python and ruby the type of
variables<00:04:24.400><c> is</c><00:04:24.639><c> dynamic</c><00:04:25.680><c> so</c><00:04:25.919><c> it's</c><00:04:26.080><c> determined</c>

00:04:26.710 --> 00:04:26.720 align:start position:0%
variables is dynamic so it's determined
 

00:04:26.720 --> 00:04:29.510 align:start position:0%
variables is dynamic so it's determined
at<00:04:26.880><c> runtime</c><00:04:27.680><c> and</c><00:04:27.840><c> it</c><00:04:28.000><c> can</c><00:04:28.160><c> also</c><00:04:28.400><c> change</c><00:04:29.199><c> so</c><00:04:29.360><c> we</c>

00:04:29.510 --> 00:04:29.520 align:start position:0%
at runtime and it can also change so we
 

00:04:29.520 --> 00:04:31.189 align:start position:0%
at runtime and it can also change so we
can<00:04:29.600><c> declare</c><00:04:30.000><c> a</c><00:04:30.160><c> variable</c>

00:04:31.189 --> 00:04:31.199 align:start position:0%
can declare a variable
 

00:04:31.199 --> 00:04:33.510 align:start position:0%
can declare a variable
set<00:04:31.360><c> it</c><00:04:31.440><c> to</c><00:04:31.600><c> a</c><00:04:31.680><c> number</c><00:04:32.320><c> and</c><00:04:32.479><c> then</c><00:04:32.720><c> later</c><00:04:33.040><c> on</c>

00:04:33.510 --> 00:04:33.520 align:start position:0%
set it to a number and then later on
 

00:04:33.520 --> 00:04:34.950 align:start position:0%
set it to a number and then later on
change<00:04:33.759><c> it</c><00:04:33.840><c> to</c><00:04:34.000><c> a</c><00:04:34.080><c> string</c>

00:04:34.950 --> 00:04:34.960 align:start position:0%
change it to a string
 

00:04:34.960 --> 00:04:37.350 align:start position:0%
change it to a string
so<00:04:35.280><c> this</c><00:04:35.520><c> variable</c><00:04:36.080><c> does</c><00:04:36.320><c> not</c><00:04:36.479><c> have</c><00:04:36.639><c> a</c><00:04:36.880><c> fixed</c>

00:04:37.350 --> 00:04:37.360 align:start position:0%
so this variable does not have a fixed
 

00:04:37.360 --> 00:04:39.909 align:start position:0%
so this variable does not have a fixed
or<00:04:37.520><c> a</c><00:04:37.680><c> static</c><00:04:38.160><c> type</c><00:04:38.639><c> the</c><00:04:38.800><c> type</c><00:04:39.040><c> is</c><00:04:39.199><c> determined</c>

00:04:39.909 --> 00:04:39.919 align:start position:0%
or a static type the type is determined
 

00:04:39.919 --> 00:04:42.390 align:start position:0%
or a static type the type is determined
and<00:04:40.080><c> may</c><00:04:40.320><c> change</c><00:04:40.800><c> at</c><00:04:40.960><c> runtime</c><00:04:41.919><c> now</c><00:04:42.080><c> this</c><00:04:42.320><c> is</c>

00:04:42.390 --> 00:04:42.400 align:start position:0%
and may change at runtime now this is
 

00:04:42.400 --> 00:04:44.950 align:start position:0%
and may change at runtime now this is
great<00:04:42.800><c> and</c><00:04:43.120><c> gives</c><00:04:43.440><c> us</c><00:04:43.600><c> a</c><00:04:43.759><c> lot</c><00:04:43.919><c> of</c><00:04:44.080><c> flexibility</c>

00:04:44.950 --> 00:04:44.960 align:start position:0%
great and gives us a lot of flexibility
 

00:04:44.960 --> 00:04:47.430 align:start position:0%
great and gives us a lot of flexibility
but<00:04:45.199><c> it</c><00:04:45.280><c> can</c><00:04:45.440><c> also</c><00:04:45.680><c> lead</c><00:04:45.840><c> to</c><00:04:46.080><c> problems</c><00:04:46.960><c> what</c><00:04:47.120><c> if</c>

00:04:47.430 --> 00:04:47.440 align:start position:0%
but it can also lead to problems what if
 

00:04:47.440 --> 00:04:49.749 align:start position:0%
but it can also lead to problems what if
we<00:04:47.680><c> pass</c><00:04:47.919><c> this</c><00:04:48.160><c> variable</c><00:04:48.639><c> to</c><00:04:48.800><c> a</c><00:04:48.960><c> function</c><00:04:49.520><c> that</c>

00:04:49.749 --> 00:04:49.759 align:start position:0%
we pass this variable to a function that
 

00:04:49.759 --> 00:04:51.990 align:start position:0%
we pass this variable to a function that
expects<00:04:50.160><c> a</c><00:04:50.320><c> number</c><00:04:51.040><c> then</c><00:04:51.360><c> our</c><00:04:51.520><c> application</c>

00:04:51.990 --> 00:04:52.000 align:start position:0%
expects a number then our application
 

00:04:52.000 --> 00:04:54.629 align:start position:0%
expects a number then our application
might<00:04:52.240><c> misbehave</c><00:04:52.880><c> or</c><00:04:53.040><c> crash</c><00:04:53.840><c> now</c><00:04:54.000><c> the</c><00:04:54.320><c> problem</c>

00:04:54.629 --> 00:04:54.639 align:start position:0%
might misbehave or crash now the problem
 

00:04:54.639 --> 00:04:56.469 align:start position:0%
might misbehave or crash now the problem
is<00:04:54.800><c> that</c><00:04:55.040><c> we</c><00:04:55.199><c> will</c><00:04:55.440><c> not</c><00:04:55.680><c> know</c><00:04:55.919><c> about</c><00:04:56.160><c> these</c>

00:04:56.469 --> 00:04:56.479 align:start position:0%
is that we will not know about these
 

00:04:56.479 --> 00:04:59.030 align:start position:0%
is that we will not know about these
issues<00:04:57.120><c> until</c><00:04:57.520><c> we</c><00:04:57.680><c> run</c><00:04:57.840><c> our</c><00:04:58.000><c> application</c><00:04:58.639><c> or</c>

00:04:59.030 --> 00:04:59.040 align:start position:0%
issues until we run our application or
 

00:04:59.040 --> 00:05:01.189 align:start position:0%
issues until we run our application or
our<00:04:59.280><c> unit</c><00:04:59.520><c> tests</c><00:05:00.000><c> well</c><00:05:00.560><c> assuming</c><00:05:00.960><c> that</c><00:05:01.120><c> we</c>

00:05:01.189 --> 00:05:01.199 align:start position:0%
our unit tests well assuming that we
 

00:05:01.199 --> 00:05:02.629 align:start position:0%
our unit tests well assuming that we
have<00:05:01.360><c> them</c><00:05:01.600><c> in</c><00:05:01.759><c> place</c>

00:05:02.629 --> 00:05:02.639 align:start position:0%
have them in place
 

00:05:02.639 --> 00:05:04.950 align:start position:0%
have them in place
so<00:05:02.880><c> we</c><00:05:03.039><c> have</c><00:05:03.199><c> to</c><00:05:03.360><c> test</c><00:05:03.919><c> every</c><00:05:04.160><c> function</c><00:05:04.639><c> with</c>

00:05:04.950 --> 00:05:04.960 align:start position:0%
so we have to test every function with
 

00:05:04.960 --> 00:05:07.749 align:start position:0%
so we have to test every function with
various<00:05:05.360><c> edge</c><00:05:05.600><c> cases</c><00:05:06.160><c> to</c><00:05:06.400><c> cache</c><00:05:06.800><c> these</c><00:05:07.039><c> bugs</c>

00:05:07.749 --> 00:05:07.759 align:start position:0%
various edge cases to cache these bugs
 

00:05:07.759 --> 00:05:09.830 align:start position:0%
various edge cases to cache these bugs
and<00:05:07.840><c> this</c><00:05:08.080><c> is</c><00:05:08.160><c> the</c><00:05:08.400><c> problem</c><00:05:08.960><c> that</c><00:05:09.199><c> typescript</c>

00:05:09.830 --> 00:05:09.840 align:start position:0%
and this is the problem that typescript
 

00:05:09.840 --> 00:05:11.189 align:start position:0%
and this is the problem that typescript
tries<00:05:10.080><c> to</c><00:05:10.320><c> solve</c>

00:05:11.189 --> 00:05:11.199 align:start position:0%
tries to solve
 

00:05:11.199 --> 00:05:13.510 align:start position:0%
tries to solve
typescript<00:05:11.919><c> is</c><00:05:12.080><c> essentially</c><00:05:12.880><c> javascript</c>

00:05:13.510 --> 00:05:13.520 align:start position:0%
typescript is essentially javascript
 

00:05:13.520 --> 00:05:15.990 align:start position:0%
typescript is essentially javascript
with<00:05:13.759><c> type</c><00:05:14.080><c> checking</c><00:05:14.720><c> with</c><00:05:14.960><c> typescript</c><00:05:15.840><c> we</c>

00:05:15.990 --> 00:05:16.000 align:start position:0%
with type checking with typescript we
 

00:05:16.000 --> 00:05:18.390 align:start position:0%
with type checking with typescript we
explicitly<00:05:16.800><c> set</c><00:05:17.039><c> the</c><00:05:17.199><c> type</c><00:05:17.520><c> of</c><00:05:17.680><c> our</c><00:05:17.759><c> variables</c>

00:05:18.390 --> 00:05:18.400 align:start position:0%
explicitly set the type of our variables
 

00:05:18.400 --> 00:05:21.029 align:start position:0%
explicitly set the type of our variables
upon<00:05:18.720><c> declaration</c><00:05:19.600><c> just</c><00:05:19.840><c> like</c><00:05:20.080><c> how</c><00:05:20.320><c> we</c><00:05:20.560><c> code</c>

00:05:21.029 --> 00:05:21.039 align:start position:0%
upon declaration just like how we code
 

00:05:21.039 --> 00:05:23.110 align:start position:0%
upon declaration just like how we code
in<00:05:21.199><c> statically</c><00:05:21.759><c> typed</c><00:05:22.080><c> languages</c>

00:05:23.110 --> 00:05:23.120 align:start position:0%
in statically typed languages
 

00:05:23.120 --> 00:05:25.270 align:start position:0%
in statically typed languages
then<00:05:23.600><c> we</c><00:05:23.759><c> pass</c><00:05:24.080><c> our</c><00:05:24.240><c> code</c><00:05:24.479><c> to</c><00:05:24.639><c> the</c><00:05:24.720><c> typescript</c>

00:05:25.270 --> 00:05:25.280 align:start position:0%
then we pass our code to the typescript
 

00:05:25.280 --> 00:05:27.590 align:start position:0%
then we pass our code to the typescript
compiler<00:05:26.240><c> and</c><00:05:26.320><c> the</c><00:05:26.479><c> compiler</c><00:05:27.039><c> will</c><00:05:27.199><c> tell</c><00:05:27.440><c> us</c>

00:05:27.590 --> 00:05:27.600 align:start position:0%
compiler and the compiler will tell us
 

00:05:27.600 --> 00:05:29.510 align:start position:0%
compiler and the compiler will tell us
if<00:05:27.680><c> we</c><00:05:27.840><c> are</c><00:05:27.919><c> doing</c><00:05:28.160><c> something</c><00:05:28.639><c> wrong</c><00:05:29.199><c> so</c><00:05:29.360><c> we</c>

00:05:29.510 --> 00:05:29.520 align:start position:0%
if we are doing something wrong so we
 

00:05:29.520 --> 00:05:31.670 align:start position:0%
if we are doing something wrong so we
can<00:05:29.680><c> catch</c><00:05:30.240><c> a</c><00:05:30.320><c> lot</c><00:05:30.479><c> of</c><00:05:30.639><c> our</c><00:05:30.800><c> mistakes</c><00:05:31.520><c> at</c>

00:05:31.670 --> 00:05:31.680 align:start position:0%
can catch a lot of our mistakes at
 

00:05:31.680 --> 00:05:34.310 align:start position:0%
can catch a lot of our mistakes at
compile<00:05:32.080><c> time</c><00:05:32.800><c> so</c><00:05:33.039><c> if</c><00:05:33.199><c> we</c><00:05:33.280><c> declare</c><00:05:33.680><c> a</c><00:05:33.840><c> variable</c>

00:05:34.310 --> 00:05:34.320 align:start position:0%
compile time so if we declare a variable
 

00:05:34.320 --> 00:05:36.950 align:start position:0%
compile time so if we declare a variable
as<00:05:34.400><c> a</c><00:05:34.560><c> number</c><00:05:35.120><c> we</c><00:05:35.360><c> cannot</c><00:05:35.680><c> set</c><00:05:35.840><c> it</c><00:05:35.919><c> to</c><00:05:36.080><c> a</c><00:05:36.160><c> string</c>

00:05:36.950 --> 00:05:36.960 align:start position:0%
as a number we cannot set it to a string
 

00:05:36.960 --> 00:05:38.790 align:start position:0%
as a number we cannot set it to a string
the<00:05:37.120><c> typescript</c><00:05:37.600><c> compiler</c><00:05:38.160><c> is</c><00:05:38.240><c> going</c><00:05:38.400><c> to</c><00:05:38.479><c> stop</c>

00:05:38.790 --> 00:05:38.800 align:start position:0%
the typescript compiler is going to stop
 

00:05:38.800 --> 00:05:40.950 align:start position:0%
the typescript compiler is going to stop
us<00:05:39.120><c> right</c><00:05:39.360><c> there</c><00:05:39.680><c> and</c><00:05:40.080><c> this</c><00:05:40.400><c> happens</c><00:05:40.800><c> at</c>

00:05:40.950 --> 00:05:40.960 align:start position:0%
us right there and this happens at
 

00:05:40.960 --> 00:05:43.110 align:start position:0%
us right there and this happens at
compile<00:05:41.360><c> time</c><00:05:41.919><c> so</c><00:05:42.160><c> we</c><00:05:42.320><c> don't</c><00:05:42.479><c> have</c><00:05:42.639><c> to</c><00:05:42.800><c> run</c><00:05:42.960><c> our</c>

00:05:43.110 --> 00:05:43.120 align:start position:0%
compile time so we don't have to run our
 

00:05:43.120 --> 00:05:45.830 align:start position:0%
compile time so we don't have to run our
application<00:05:43.680><c> or</c><00:05:44.080><c> our</c><00:05:44.240><c> unit</c><00:05:44.479><c> tests</c><00:05:45.199><c> and</c><00:05:45.360><c> test</c>

00:05:45.830 --> 00:05:45.840 align:start position:0%
application or our unit tests and test
 

00:05:45.840 --> 00:05:47.590 align:start position:0%
application or our unit tests and test
every<00:05:46.160><c> piece</c><00:05:46.479><c> of</c><00:05:46.639><c> code</c><00:05:46.880><c> to</c><00:05:47.120><c> cache</c><00:05:47.440><c> these</c>

00:05:47.590 --> 00:05:47.600 align:start position:0%
every piece of code to cache these
 

00:05:47.600 --> 00:05:49.909 align:start position:0%
every piece of code to cache these
errors<00:05:48.240><c> we</c><00:05:48.320><c> can</c><00:05:48.479><c> catch</c><00:05:48.880><c> a</c><00:05:48.960><c> lot</c><00:05:49.120><c> of</c><00:05:49.199><c> them</c><00:05:49.600><c> simply</c>

00:05:49.909 --> 00:05:49.919 align:start position:0%
errors we can catch a lot of them simply
 

00:05:49.919 --> 00:05:52.550 align:start position:0%
errors we can catch a lot of them simply
by<00:05:50.160><c> compiling</c><00:05:50.639><c> our</c><00:05:50.800><c> application</c><00:05:51.440><c> okay</c><00:05:52.320><c> but</c>

00:05:52.550 --> 00:05:52.560 align:start position:0%
by compiling our application okay but
 

00:05:52.560 --> 00:05:54.070 align:start position:0%
by compiling our application okay but
typescript<00:05:53.120><c> is</c><00:05:53.199><c> more</c><00:05:53.360><c> than</c><00:05:53.520><c> just</c><00:05:53.759><c> type</c>

00:05:54.070 --> 00:05:54.080 align:start position:0%
typescript is more than just type
 

00:05:54.080 --> 00:05:56.390 align:start position:0%
typescript is more than just type
checking<00:05:54.880><c> most</c><00:05:55.120><c> code</c><00:05:55.440><c> editors</c><00:05:55.919><c> these</c><00:05:56.080><c> days</c>

00:05:56.390 --> 00:05:56.400 align:start position:0%
checking most code editors these days
 

00:05:56.400 --> 00:05:58.629 align:start position:0%
checking most code editors these days
have<00:05:56.720><c> great</c><00:05:56.960><c> support</c><00:05:57.360><c> for</c><00:05:57.520><c> typescript</c><00:05:58.479><c> so</c>

00:05:58.629 --> 00:05:58.639 align:start position:0%
have great support for typescript so
 

00:05:58.639 --> 00:06:00.390 align:start position:0%
have great support for typescript so
they<00:05:58.800><c> can</c><00:05:59.039><c> detect</c><00:05:59.600><c> the</c><00:05:59.840><c> type</c><00:06:00.080><c> of</c><00:06:00.240><c> our</c>

00:06:00.390 --> 00:06:00.400 align:start position:0%
they can detect the type of our
 

00:06:00.400 --> 00:06:02.469 align:start position:0%
they can detect the type of our
variables<00:06:01.039><c> and</c><00:06:01.280><c> offer</c><00:06:01.840><c> productivity</c>

00:06:02.469 --> 00:06:02.479 align:start position:0%
variables and offer productivity
 

00:06:02.479 --> 00:06:04.629 align:start position:0%
variables and offer productivity
boosting<00:06:02.960><c> features</c><00:06:03.360><c> like</c><00:06:03.680><c> code</c><00:06:04.000><c> completion</c>

00:06:04.629 --> 00:06:04.639 align:start position:0%
boosting features like code completion
 

00:06:04.639 --> 00:06:07.749 align:start position:0%
boosting features like code completion
and<00:06:04.880><c> refactoring</c><00:06:06.000><c> also</c><00:06:06.720><c> typescript</c><00:06:07.280><c> includes</c>

00:06:07.749 --> 00:06:07.759 align:start position:0%
and refactoring also typescript includes
 

00:06:07.759 --> 00:06:09.830 align:start position:0%
and refactoring also typescript includes
additional<00:06:08.240><c> features</c><00:06:08.960><c> that</c><00:06:09.120><c> help</c><00:06:09.360><c> us</c><00:06:09.600><c> write</c>

00:06:09.830 --> 00:06:09.840 align:start position:0%
additional features that help us write
 

00:06:09.840 --> 00:06:12.390 align:start position:0%
additional features that help us write
cleaner<00:06:10.319><c> and</c><00:06:10.639><c> more</c><00:06:10.880><c> concise</c><00:06:11.360><c> code</c><00:06:11.919><c> now</c><00:06:12.160><c> over</c>

00:06:12.390 --> 00:06:12.400 align:start position:0%
cleaner and more concise code now over
 

00:06:12.400 --> 00:06:14.230 align:start position:0%
cleaner and more concise code now over
time<00:06:12.800><c> these</c><00:06:13.039><c> features</c><00:06:13.440><c> get</c><00:06:13.759><c> added</c><00:06:14.080><c> to</c>

00:06:14.230 --> 00:06:14.240 align:start position:0%
time these features get added to
 

00:06:14.240 --> 00:06:16.309 align:start position:0%
time these features get added to
javascript<00:06:15.039><c> but</c><00:06:15.280><c> because</c><00:06:15.520><c> we</c><00:06:15.680><c> have</c><00:06:15.919><c> various</c>

00:06:16.309 --> 00:06:16.319 align:start position:0%
javascript but because we have various
 

00:06:16.319 --> 00:06:18.550 align:start position:0%
javascript but because we have various
browsers<00:06:16.960><c> and</c><00:06:17.280><c> runtime</c><00:06:17.759><c> environments</c><00:06:18.319><c> for</c>

00:06:18.550 --> 00:06:18.560 align:start position:0%
browsers and runtime environments for
 

00:06:18.560 --> 00:06:20.870 align:start position:0%
browsers and runtime environments for
executing<00:06:19.199><c> javascript</c><00:06:19.759><c> code</c><00:06:20.319><c> it</c><00:06:20.479><c> takes</c><00:06:20.720><c> some</c>

00:06:20.870 --> 00:06:20.880 align:start position:0%
executing javascript code it takes some
 

00:06:20.880 --> 00:06:22.710 align:start position:0%
executing javascript code it takes some
time<00:06:21.280><c> until</c><00:06:21.600><c> these</c><00:06:21.759><c> features</c><00:06:22.479><c> are</c>

00:06:22.710 --> 00:06:22.720 align:start position:0%
time until these features are
 

00:06:22.720 --> 00:06:25.350 align:start position:0%
time until these features are
implemented<00:06:23.360><c> in</c><00:06:23.520><c> various</c><00:06:23.919><c> browsers</c><00:06:24.880><c> so</c><00:06:25.120><c> by</c>

00:06:25.350 --> 00:06:25.360 align:start position:0%
implemented in various browsers so by
 

00:06:25.360 --> 00:06:27.350 align:start position:0%
implemented in various browsers so by
coding<00:06:25.680><c> in</c><00:06:25.840><c> typescript</c><00:06:26.560><c> we</c><00:06:26.720><c> can</c><00:06:26.880><c> use</c><00:06:27.120><c> the</c>

00:06:27.350 --> 00:06:27.360 align:start position:0%
coding in typescript we can use the
 

00:06:27.360 --> 00:06:29.830 align:start position:0%
coding in typescript we can use the
features<00:06:27.840><c> of</c><00:06:28.080><c> future</c><00:06:28.560><c> javascript</c>

00:06:29.830 --> 00:06:29.840 align:start position:0%
features of future javascript
 

00:06:29.840 --> 00:06:32.309 align:start position:0%
features of future javascript
so<00:06:30.080><c> in</c><00:06:30.240><c> a</c><00:06:30.319><c> nutshell</c><00:06:31.039><c> typescript</c><00:06:31.600><c> is</c><00:06:31.840><c> built</c><00:06:32.160><c> on</c>

00:06:32.309 --> 00:06:32.319 align:start position:0%
so in a nutshell typescript is built on
 

00:06:32.319 --> 00:06:34.390 align:start position:0%
so in a nutshell typescript is built on
top<00:06:32.479><c> of</c><00:06:32.639><c> javascript</c><00:06:33.600><c> and</c><00:06:33.759><c> we</c><00:06:33.919><c> can</c><00:06:34.080><c> use</c><00:06:34.240><c> it</c>

00:06:34.390 --> 00:06:34.400 align:start position:0%
top of javascript and we can use it
 

00:06:34.400 --> 00:06:36.469 align:start position:0%
top of javascript and we can use it
wherever<00:06:34.800><c> we</c><00:06:34.960><c> use</c><00:06:35.120><c> javascript</c><00:06:35.919><c> on</c><00:06:36.000><c> the</c><00:06:36.160><c> front</c>

00:06:36.469 --> 00:06:36.479 align:start position:0%
wherever we use javascript on the front
 

00:06:36.479 --> 00:06:38.790 align:start position:0%
wherever we use javascript on the front
end<00:06:36.880><c> or</c><00:06:37.039><c> the</c><00:06:37.199><c> back</c><00:06:37.440><c> end</c><00:06:37.919><c> so</c><00:06:38.240><c> anything</c><00:06:38.560><c> we</c><00:06:38.639><c> can</c>

00:06:38.790 --> 00:06:38.800 align:start position:0%
end or the back end so anything we can
 

00:06:38.800 --> 00:06:40.629 align:start position:0%
end or the back end so anything we can
do<00:06:38.960><c> with</c><00:06:39.120><c> javascript</c><00:06:39.759><c> we</c><00:06:39.919><c> can</c><00:06:40.080><c> also</c><00:06:40.319><c> do</c><00:06:40.479><c> with</c>

00:06:40.629 --> 00:06:40.639 align:start position:0%
do with javascript we can also do with
 

00:06:40.639 --> 00:06:42.950 align:start position:0%
do with javascript we can also do with
typescript<00:06:41.680><c> now</c><00:06:41.919><c> all</c><00:06:42.080><c> these</c><00:06:42.240><c> great</c><00:06:42.479><c> benefits</c>

00:06:42.950 --> 00:06:42.960 align:start position:0%
typescript now all these great benefits
 

00:06:42.960 --> 00:06:45.110 align:start position:0%
typescript now all these great benefits
aside<00:06:43.520><c> let's</c><00:06:43.680><c> talk</c><00:06:43.919><c> about</c><00:06:44.160><c> the</c><00:06:44.400><c> drawbacks</c><00:06:44.960><c> of</c>

00:06:45.110 --> 00:06:45.120 align:start position:0%
aside let's talk about the drawbacks of
 

00:06:45.120 --> 00:06:47.510 align:start position:0%
aside let's talk about the drawbacks of
typescript<00:06:46.160><c> first</c><00:06:46.479><c> with</c><00:06:46.639><c> typescript</c><00:06:47.280><c> there</c>

00:06:47.510 --> 00:06:47.520 align:start position:0%
typescript first with typescript there
 

00:06:47.520 --> 00:06:49.830 align:start position:0%
typescript first with typescript there
is<00:06:47.759><c> always</c><00:06:48.160><c> a</c><00:06:48.240><c> compilation</c><00:06:48.880><c> step</c><00:06:49.199><c> involved</c>

00:06:49.830 --> 00:06:49.840 align:start position:0%
is always a compilation step involved
 

00:06:49.840 --> 00:06:51.990 align:start position:0%
is always a compilation step involved
because<00:06:50.160><c> at</c><00:06:50.319><c> this</c><00:06:50.479><c> time</c><00:06:51.039><c> browsers</c><00:06:51.680><c> don't</c>

00:06:51.990 --> 00:06:52.000 align:start position:0%
because at this time browsers don't
 

00:06:52.000 --> 00:06:53.830 align:start position:0%
because at this time browsers don't
understand<00:06:52.560><c> typescript</c><00:06:53.039><c> code</c>

00:06:53.830 --> 00:06:53.840 align:start position:0%
understand typescript code
 

00:06:53.840 --> 00:06:55.270 align:start position:0%
understand typescript code
so<00:06:54.080><c> we</c><00:06:54.160><c> have</c><00:06:54.319><c> to</c><00:06:54.400><c> give</c><00:06:54.639><c> our</c><00:06:54.800><c> code</c><00:06:55.039><c> to</c><00:06:55.120><c> the</c>

00:06:55.270 --> 00:06:55.280 align:start position:0%
so we have to give our code to the
 

00:06:55.280 --> 00:06:57.510 align:start position:0%
so we have to give our code to the
typescript<00:06:55.759><c> compiler</c><00:06:56.400><c> to</c><00:06:56.639><c> compile</c><00:06:57.280><c> and</c>

00:06:57.510 --> 00:06:57.520 align:start position:0%
typescript compiler to compile and
 

00:06:57.520 --> 00:07:00.150 align:start position:0%
typescript compiler to compile and
translate<00:06:58.080><c> into</c><00:06:58.400><c> javascript</c><00:06:59.440><c> this</c><00:06:59.680><c> process</c>

00:07:00.150 --> 00:07:00.160 align:start position:0%
translate into javascript this process
 

00:07:00.160 --> 00:07:02.390 align:start position:0%
translate into javascript this process
is<00:07:00.319><c> called</c><00:07:00.880><c> transpilation</c>

00:07:02.390 --> 00:07:02.400 align:start position:0%
is called transpilation
 

00:07:02.400 --> 00:07:04.629 align:start position:0%
is called transpilation
second<00:07:02.960><c> with</c><00:07:03.199><c> typescript</c><00:07:04.000><c> we</c><00:07:04.160><c> have</c><00:07:04.240><c> to</c><00:07:04.400><c> be</c><00:07:04.479><c> a</c>

00:07:04.629 --> 00:07:04.639 align:start position:0%
second with typescript we have to be a
 

00:07:04.639 --> 00:07:06.870 align:start position:0%
second with typescript we have to be a
bit<00:07:04.800><c> more</c><00:07:04.960><c> disciplined</c><00:07:05.680><c> when</c><00:07:05.919><c> writing</c><00:07:06.240><c> code</c>

00:07:06.870 --> 00:07:06.880 align:start position:0%
bit more disciplined when writing code
 

00:07:06.880 --> 00:07:08.870 align:start position:0%
bit more disciplined when writing code
so<00:07:07.120><c> if</c><00:07:07.280><c> you're</c><00:07:07.440><c> a</c><00:07:07.520><c> lazy</c><00:07:07.919><c> programmer</c><00:07:08.479><c> like</c><00:07:08.720><c> our</c>

00:07:08.870 --> 00:07:08.880 align:start position:0%
so if you're a lazy programmer like our
 

00:07:08.880 --> 00:07:11.110 align:start position:0%
so if you're a lazy programmer like our
famous<00:07:09.280><c> old</c><00:07:09.680><c> john</c><00:07:09.919><c> smith</c><00:07:10.400><c> and</c><00:07:10.639><c> want</c><00:07:10.800><c> to</c><00:07:10.880><c> get</c>

00:07:11.110 --> 00:07:11.120 align:start position:0%
famous old john smith and want to get
 

00:07:11.120 --> 00:07:12.790 align:start position:0%
famous old john smith and want to get
things<00:07:11.360><c> done</c><00:07:11.599><c> quickly</c><00:07:12.240><c> you</c><00:07:12.400><c> may</c><00:07:12.560><c> feel</c>

00:07:12.790 --> 00:07:12.800 align:start position:0%
things done quickly you may feel
 

00:07:12.800 --> 00:07:14.550 align:start position:0%
things done quickly you may feel
typescript<00:07:13.360><c> is</c><00:07:13.520><c> getting</c><00:07:13.840><c> in</c><00:07:13.919><c> the</c><00:07:14.080><c> way</c><00:07:14.479><c> and</c>

00:07:14.550 --> 00:07:14.560 align:start position:0%
typescript is getting in the way and
 

00:07:14.560 --> 00:07:16.469 align:start position:0%
typescript is getting in the way and
that's<00:07:14.880><c> true</c><00:07:15.440><c> but</c><00:07:15.599><c> if</c><00:07:15.680><c> you're</c><00:07:15.840><c> working</c><00:07:16.240><c> on</c><00:07:16.400><c> a</c>

00:07:16.469 --> 00:07:16.479 align:start position:0%
that's true but if you're working on a
 

00:07:16.479 --> 00:07:18.870 align:start position:0%
that's true but if you're working on a
large<00:07:16.800><c> project</c><00:07:17.280><c> with</c><00:07:17.520><c> multiple</c><00:07:18.000><c> developers</c>

00:07:18.870 --> 00:07:18.880 align:start position:0%
large project with multiple developers
 

00:07:18.880 --> 00:07:20.390 align:start position:0%
large project with multiple developers
you<00:07:19.039><c> would</c><00:07:19.199><c> end</c><00:07:19.360><c> up</c><00:07:19.440><c> wasting</c><00:07:19.840><c> more</c><00:07:20.080><c> time</c>

00:07:20.390 --> 00:07:20.400 align:start position:0%
you would end up wasting more time
 

00:07:20.400 --> 00:07:22.309 align:start position:0%
you would end up wasting more time
coding<00:07:20.800><c> in</c><00:07:20.960><c> vanilla</c><00:07:21.360><c> javascript</c><00:07:22.000><c> and</c>

00:07:22.309 --> 00:07:22.319 align:start position:0%
coding in vanilla javascript and
 

00:07:22.319 --> 00:07:24.790 align:start position:0%
coding in vanilla javascript and
catching<00:07:22.800><c> those</c><00:07:23.120><c> nasty</c><00:07:23.599><c> bugs</c><00:07:24.240><c> so</c><00:07:24.400><c> then</c><00:07:24.639><c> you</c>

00:07:24.790 --> 00:07:24.800 align:start position:0%
catching those nasty bugs so then you
 

00:07:24.800 --> 00:07:26.870 align:start position:0%
catching those nasty bugs so then you
really<00:07:24.960><c> want</c><00:07:25.120><c> to</c><00:07:25.199><c> use</c><00:07:25.360><c> typescript</c><00:07:26.240><c> for</c><00:07:26.479><c> simple</c>

00:07:26.870 --> 00:07:26.880 align:start position:0%
really want to use typescript for simple
 

00:07:26.880 --> 00:07:28.870 align:start position:0%
really want to use typescript for simple
applications<00:07:27.599><c> you</c><00:07:27.759><c> can</c><00:07:27.919><c> totally</c><00:07:28.400><c> get</c><00:07:28.560><c> back</c><00:07:28.720><c> to</c>

00:07:28.870 --> 00:07:28.880 align:start position:0%
applications you can totally get back to
 

00:07:28.880 --> 00:07:30.790 align:start position:0%
applications you can totally get back to
old<00:07:29.120><c> vanilla</c><00:07:29.599><c> javascript</c><00:07:30.319><c> if</c><00:07:30.400><c> that's</c><00:07:30.639><c> what</c>

00:07:30.790 --> 00:07:30.800 align:start position:0%
old vanilla javascript if that's what
 

00:07:30.800 --> 00:07:31.830 align:start position:0%
old vanilla javascript if that's what
you<00:07:30.880><c> prefer</c>

00:07:31.830 --> 00:07:31.840 align:start position:0%
you prefer
 

00:07:31.840 --> 00:07:34.150 align:start position:0%
you prefer
alright<00:07:32.560><c> that's</c><00:07:32.800><c> all</c><00:07:32.960><c> about</c><00:07:33.120><c> typescript</c><00:07:33.919><c> next</c>

00:07:34.150 --> 00:07:34.160 align:start position:0%
alright that's all about typescript next
 

00:07:34.160 --> 00:07:35.589 align:start position:0%
alright that's all about typescript next
we're<00:07:34.319><c> going</c><00:07:34.479><c> to</c><00:07:34.560><c> set</c><00:07:34.720><c> up</c><00:07:34.880><c> our</c><00:07:35.039><c> development</c>

00:07:35.589 --> 00:07:35.599 align:start position:0%
we're going to set up our development
 

00:07:35.599 --> 00:07:38.830 align:start position:0%
we're going to set up our development
environment

00:07:38.830 --> 00:07:38.840 align:start position:0%
 
 

00:07:38.840 --> 00:07:43.990 align:start position:0%
 
[Music]

00:07:43.990 --> 00:07:44.000 align:start position:0%
 
 

00:07:44.000 --> 00:07:45.270 align:start position:0%
 
all<00:07:44.080><c> right</c><00:07:44.240><c> the</c><00:07:44.319><c> first</c><00:07:44.479><c> thing</c><00:07:44.639><c> we</c><00:07:44.800><c> need</c><00:07:45.039><c> is</c>

00:07:45.270 --> 00:07:45.280 align:start position:0%
all right the first thing we need is
 

00:07:45.280 --> 00:07:47.110 align:start position:0%
all right the first thing we need is
node<00:07:46.000><c> because</c><00:07:46.240><c> we're</c><00:07:46.400><c> going</c><00:07:46.479><c> to</c><00:07:46.560><c> use</c><00:07:46.800><c> node</c>

00:07:47.110 --> 00:07:47.120 align:start position:0%
node because we're going to use node
 

00:07:47.120 --> 00:07:49.589 align:start position:0%
node because we're going to use node
package<00:07:47.440><c> manager</c><00:07:48.000><c> or</c><00:07:48.160><c> npm</c><00:07:48.720><c> to</c><00:07:48.879><c> install</c><00:07:49.360><c> the</c>

00:07:49.589 --> 00:07:49.599 align:start position:0%
package manager or npm to install the
 

00:07:49.599 --> 00:07:51.990 align:start position:0%
package manager or npm to install the
typescript<00:07:50.160><c> compiler</c><00:07:51.199><c> i</c><00:07:51.360><c> believe</c><00:07:51.680><c> as</c><00:07:51.840><c> a</c>

00:07:51.990 --> 00:07:52.000 align:start position:0%
typescript compiler i believe as a
 

00:07:52.000 --> 00:07:53.430 align:start position:0%
typescript compiler i believe as a
student<00:07:52.240><c> of</c><00:07:52.319><c> this</c><00:07:52.560><c> course</c><00:07:52.879><c> you</c><00:07:53.039><c> should</c><00:07:53.199><c> have</c>

00:07:53.430 --> 00:07:53.440 align:start position:0%
student of this course you should have
 

00:07:53.440 --> 00:07:55.270 align:start position:0%
student of this course you should have
node<00:07:53.680><c> on</c><00:07:53.840><c> your</c><00:07:54.000><c> machine</c><00:07:54.479><c> but</c><00:07:54.720><c> if</c><00:07:54.879><c> not</c><00:07:55.039><c> head</c>

00:07:55.270 --> 00:07:55.280 align:start position:0%
node on your machine but if not head
 

00:07:55.280 --> 00:07:58.150 align:start position:0%
node on your machine but if not head
over<00:07:55.520><c> to</c><00:07:56.080><c> nodejs.org</c><00:07:57.440><c> and</c><00:07:57.680><c> download</c><00:07:58.080><c> the</c>

00:07:58.150 --> 00:07:58.160 align:start position:0%
over to nodejs.org and download the
 

00:07:58.160 --> 00:07:59.990 align:start position:0%
over to nodejs.org and download the
latest<00:07:58.560><c> version</c><00:07:58.879><c> over</c><00:07:59.120><c> here</c>

00:07:59.990 --> 00:08:00.000 align:start position:0%
latest version over here
 

00:08:00.000 --> 00:08:02.469 align:start position:0%
latest version over here
once<00:08:00.240><c> you</c><00:08:00.319><c> do</c><00:08:00.479><c> that</c><00:08:01.039><c> then</c><00:08:01.680><c> open</c><00:08:02.000><c> a</c><00:08:02.080><c> terminal</c>

00:08:02.469 --> 00:08:02.479 align:start position:0%
once you do that then open a terminal
 

00:08:02.479 --> 00:08:05.189 align:start position:0%
once you do that then open a terminal
window<00:08:03.199><c> and</c><00:08:03.440><c> run</c><00:08:03.680><c> npm</c><00:08:04.479><c> that</c><00:08:04.720><c> is</c><00:08:04.800><c> short</c><00:08:05.039><c> for</c>

00:08:05.189 --> 00:08:05.199 align:start position:0%
window and run npm that is short for
 

00:08:05.199 --> 00:08:07.110 align:start position:0%
window and run npm that is short for
note<00:08:05.520><c> package</c><00:08:05.840><c> manager</c><00:08:06.560><c> which</c><00:08:06.800><c> we're</c><00:08:06.960><c> going</c>

00:08:07.110 --> 00:08:07.120 align:start position:0%
note package manager which we're going
 

00:08:07.120 --> 00:08:08.950 align:start position:0%
note package manager which we're going
to<00:08:07.199><c> use</c><00:08:07.440><c> for</c><00:08:07.599><c> installing</c><00:08:08.400><c> third-party</c>

00:08:08.950 --> 00:08:08.960 align:start position:0%
to use for installing third-party
 

00:08:08.960 --> 00:08:11.589 align:start position:0%
to use for installing third-party
packages<00:08:09.680><c> in</c><00:08:09.759><c> this</c><00:08:10.000><c> case</c><00:08:10.319><c> typescript</c><00:08:11.280><c> then</c><00:08:11.440><c> we</c>

00:08:11.589 --> 00:08:11.599 align:start position:0%
packages in this case typescript then we
 

00:08:11.599 --> 00:08:14.070 align:start position:0%
packages in this case typescript then we
type<00:08:11.919><c> i</c><00:08:12.240><c> that</c><00:08:12.400><c> is</c><00:08:12.560><c> short</c><00:08:12.800><c> for</c><00:08:12.960><c> install</c>

00:08:14.070 --> 00:08:14.080 align:start position:0%
type i that is short for install
 

00:08:14.080 --> 00:08:16.710 align:start position:0%
type i that is short for install
dash<00:08:14.479><c> g</c><00:08:14.879><c> for</c><00:08:15.039><c> installing</c><00:08:15.520><c> this</c><00:08:15.680><c> globally</c><00:08:16.560><c> so</c>

00:08:16.710 --> 00:08:16.720 align:start position:0%
dash g for installing this globally so
 

00:08:16.720 --> 00:08:18.869 align:start position:0%
dash g for installing this globally so
we<00:08:16.879><c> can</c><00:08:17.039><c> access</c><00:08:17.360><c> the</c><00:08:17.520><c> typescript</c><00:08:18.080><c> compiler</c><00:08:18.639><c> in</c>

00:08:18.869 --> 00:08:18.879 align:start position:0%
we can access the typescript compiler in
 

00:08:18.879 --> 00:08:20.950 align:start position:0%
we can access the typescript compiler in
every<00:08:19.199><c> folder</c><00:08:20.000><c> and</c><00:08:20.160><c> then</c><00:08:20.319><c> we</c><00:08:20.400><c> type</c><00:08:20.639><c> the</c><00:08:20.720><c> name</c>

00:08:20.950 --> 00:08:20.960 align:start position:0%
every folder and then we type the name
 

00:08:20.960 --> 00:08:23.110 align:start position:0%
every folder and then we type the name
of<00:08:21.039><c> the</c><00:08:21.120><c> package</c><00:08:21.759><c> typescript</c>

00:08:23.110 --> 00:08:23.120 align:start position:0%
of the package typescript
 

00:08:23.120 --> 00:08:25.110 align:start position:0%
of the package typescript
now<00:08:23.280><c> if</c><00:08:23.360><c> you're</c><00:08:23.520><c> on</c><00:08:23.680><c> mac</c><00:08:24.000><c> or</c><00:08:24.160><c> linux</c><00:08:24.639><c> and</c><00:08:24.960><c> you</c>

00:08:25.110 --> 00:08:25.120 align:start position:0%
now if you're on mac or linux and you
 

00:08:25.120 --> 00:08:26.629 align:start position:0%
now if you're on mac or linux and you
get<00:08:25.280><c> a</c><00:08:25.440><c> permission</c><00:08:25.919><c> error</c><00:08:26.160><c> while</c><00:08:26.400><c> running</c>

00:08:26.629 --> 00:08:26.639 align:start position:0%
get a permission error while running
 

00:08:26.639 --> 00:08:29.350 align:start position:0%
get a permission error while running
this<00:08:26.800><c> command</c><00:08:27.680><c> you</c><00:08:27.840><c> have</c><00:08:27.919><c> to</c><00:08:28.160><c> prefix</c><00:08:28.639><c> it</c><00:08:28.800><c> with</c>

00:08:29.350 --> 00:08:29.360 align:start position:0%
this command you have to prefix it with
 

00:08:29.360 --> 00:08:32.070 align:start position:0%
this command you have to prefix it with
sudo<00:08:29.919><c> or</c><00:08:30.400><c> sudo</c><00:08:30.879><c> well</c><00:08:31.199><c> more</c><00:08:31.440><c> accurately</c><00:08:31.919><c> this</c>

00:08:32.070 --> 00:08:32.080 align:start position:0%
sudo or sudo well more accurately this
 

00:08:32.080 --> 00:08:34.149 align:start position:0%
sudo or sudo well more accurately this
is<00:08:32.240><c> sudo</c><00:08:32.880><c> because</c><00:08:33.200><c> it's</c><00:08:33.360><c> short</c><00:08:33.599><c> for</c><00:08:33.839><c> super</c>

00:08:34.149 --> 00:08:34.159 align:start position:0%
is sudo because it's short for super
 

00:08:34.159 --> 00:08:36.630 align:start position:0%
is sudo because it's short for super
user<00:08:34.560><c> do</c><00:08:35.200><c> but</c><00:08:35.360><c> that</c><00:08:35.599><c> aside</c><00:08:36.000><c> let's</c><00:08:36.159><c> go</c><00:08:36.320><c> ahead</c>

00:08:36.630 --> 00:08:36.640 align:start position:0%
user do but that aside let's go ahead
 

00:08:36.640 --> 00:08:41.829 align:start position:0%
user do but that aside let's go ahead
and<00:08:37.279><c> install</c><00:08:37.680><c> the</c><00:08:37.760><c> typescript</c><00:08:38.240><c> compiler</c>

00:08:41.829 --> 00:08:41.839 align:start position:0%
 
 

00:08:41.839 --> 00:08:43.670 align:start position:0%
 
okay<00:08:42.159><c> great</c><00:08:42.719><c> now</c><00:08:42.959><c> to</c><00:08:43.120><c> verify</c><00:08:43.599><c> our</c>

00:08:43.670 --> 00:08:43.680 align:start position:0%
okay great now to verify our
 

00:08:43.680 --> 00:08:46.550 align:start position:0%
okay great now to verify our
installation<00:08:44.560><c> we</c><00:08:44.720><c> type</c><00:08:45.360><c> tsc</c><00:08:46.240><c> that</c><00:08:46.480><c> is</c>

00:08:46.550 --> 00:08:46.560 align:start position:0%
installation we type tsc that is
 

00:08:46.560 --> 00:08:49.350 align:start position:0%
installation we type tsc that is
shortboard<00:08:47.040><c> typescript</c><00:08:47.600><c> compiler</c><00:08:48.480><c> dash</c><00:08:48.880><c> v</c><00:08:49.200><c> to</c>

00:08:49.350 --> 00:08:49.360 align:start position:0%
shortboard typescript compiler dash v to
 

00:08:49.360 --> 00:08:51.910 align:start position:0%
shortboard typescript compiler dash v to
get<00:08:49.519><c> the</c><00:08:49.680><c> version</c>

00:08:51.910 --> 00:08:51.920 align:start position:0%
get the version
 

00:08:51.920 --> 00:08:53.670 align:start position:0%
get the version
so<00:08:52.080><c> here</c><00:08:52.320><c> i'm</c><00:08:52.480><c> running</c><00:08:52.720><c> typescript</c><00:08:53.200><c> version</c>

00:08:53.670 --> 00:08:53.680 align:start position:0%
so here i'm running typescript version
 

00:08:53.680 --> 00:08:55.430 align:start position:0%
so here i'm running typescript version
4.6.3

00:08:55.430 --> 00:08:55.440 align:start position:0%
4.6.3
 

00:08:55.440 --> 00:08:57.269 align:start position:0%
4.6.3
you<00:08:55.600><c> might</c><00:08:55.839><c> install</c><00:08:56.240><c> a</c><00:08:56.320><c> newer</c><00:08:56.720><c> version</c><00:08:57.040><c> but</c>

00:08:57.269 --> 00:08:57.279 align:start position:0%
you might install a newer version but
 

00:08:57.279 --> 00:08:58.870 align:start position:0%
you might install a newer version but
don't<00:08:57.440><c> worry</c><00:08:57.920><c> because</c><00:08:58.320><c> everything</c><00:08:58.720><c> i'm</c><00:08:58.800><c> going</c>

00:08:58.870 --> 00:08:58.880 align:start position:0%
don't worry because everything i'm going
 

00:08:58.880 --> 00:09:01.269 align:start position:0%
don't worry because everything i'm going
to<00:08:59.040><c> teach</c><00:08:59.279><c> you</c><00:08:59.440><c> here</c><00:08:59.760><c> will</c><00:09:00.000><c> apply</c><00:09:00.640><c> to</c><00:09:00.800><c> newer</c>

00:09:01.269 --> 00:09:01.279 align:start position:0%
to teach you here will apply to newer
 

00:09:01.279 --> 00:09:03.829 align:start position:0%
to teach you here will apply to newer
typescript<00:09:01.680><c> compilers</c><00:09:02.720><c> now</c><00:09:02.959><c> in</c><00:09:03.040><c> this</c><00:09:03.279><c> course</c>

00:09:03.829 --> 00:09:03.839 align:start position:0%
typescript compilers now in this course
 

00:09:03.839 --> 00:09:05.750 align:start position:0%
typescript compilers now in this course
just<00:09:04.000><c> like</c><00:09:04.160><c> my</c><00:09:04.399><c> other</c><00:09:04.640><c> courses</c><00:09:05.360><c> i'm</c><00:09:05.519><c> going</c><00:09:05.680><c> to</c>

00:09:05.750 --> 00:09:05.760 align:start position:0%
just like my other courses i'm going to
 

00:09:05.760 --> 00:09:08.470 align:start position:0%
just like my other courses i'm going to
use<00:09:06.000><c> visual</c><00:09:06.399><c> studio</c><00:09:06.800><c> code</c><00:09:07.120><c> or</c><00:09:07.519><c> vs</c><00:09:07.839><c> code</c><00:09:08.160><c> as</c><00:09:08.320><c> my</c>

00:09:08.470 --> 00:09:08.480 align:start position:0%
use visual studio code or vs code as my
 

00:09:08.480 --> 00:09:10.630 align:start position:0%
use visual studio code or vs code as my
code<00:09:08.800><c> editor</c><00:09:09.519><c> you're</c><00:09:09.680><c> welcome</c><00:09:10.080><c> to</c><00:09:10.160><c> use</c><00:09:10.399><c> any</c>

00:09:10.630 --> 00:09:10.640 align:start position:0%
code editor you're welcome to use any
 

00:09:10.640 --> 00:09:12.470 align:start position:0%
code editor you're welcome to use any
editor<00:09:10.959><c> you</c><00:09:11.120><c> prefer</c><00:09:11.839><c> but</c><00:09:12.000><c> if</c><00:09:12.160><c> you</c><00:09:12.240><c> want</c><00:09:12.320><c> to</c>

00:09:12.470 --> 00:09:12.480 align:start position:0%
editor you prefer but if you want to
 

00:09:12.480 --> 00:09:14.070 align:start position:0%
editor you prefer but if you want to
follow<00:09:12.800><c> along</c><00:09:13.200><c> and</c><00:09:13.440><c> use</c><00:09:13.680><c> some</c><00:09:13.839><c> of</c><00:09:13.920><c> the</c>

00:09:14.070 --> 00:09:14.080 align:start position:0%
follow along and use some of the
 

00:09:14.080 --> 00:09:15.670 align:start position:0%
follow along and use some of the
shortcuts<00:09:14.640><c> i'm</c><00:09:14.720><c> going</c><00:09:14.800><c> to</c><00:09:14.959><c> teach</c><00:09:15.200><c> you</c><00:09:15.440><c> i</c>

00:09:15.670 --> 00:09:15.680 align:start position:0%
shortcuts i'm going to teach you i
 

00:09:15.680 --> 00:09:17.750 align:start position:0%
shortcuts i'm going to teach you i
highly<00:09:16.000><c> encourage</c><00:09:16.320><c> you</c><00:09:16.399><c> to</c><00:09:16.480><c> use</c><00:09:16.640><c> vs</c><00:09:16.959><c> code</c><00:09:17.680><c> in</c>

00:09:17.750 --> 00:09:17.760 align:start position:0%
highly encourage you to use vs code in
 

00:09:17.760 --> 00:09:19.350 align:start position:0%
highly encourage you to use vs code in
case<00:09:18.000><c> you</c><00:09:18.160><c> don't</c><00:09:18.320><c> have</c><00:09:18.480><c> it</c><00:09:18.800><c> you</c><00:09:18.959><c> can</c><00:09:19.040><c> get</c><00:09:19.279><c> it</c>

00:09:19.350 --> 00:09:19.360 align:start position:0%
case you don't have it you can get it
 

00:09:19.360 --> 00:09:20.829 align:start position:0%
case you don't have it you can get it
from

00:09:20.829 --> 00:09:20.839 align:start position:0%
from
 

00:09:20.839 --> 00:09:22.470 align:start position:0%
from
code.visualstudio.com<00:09:21.920><c> alright</c><00:09:22.160><c> so</c><00:09:22.320><c> go</c>

00:09:22.470 --> 00:09:22.480 align:start position:0%
code.visualstudio.com alright so go
 

00:09:22.480 --> 00:09:23.829 align:start position:0%
code.visualstudio.com alright so go
ahead<00:09:22.720><c> and</c><00:09:22.880><c> set</c><00:09:23.040><c> up</c><00:09:23.200><c> your</c><00:09:23.360><c> development</c>

00:09:23.829 --> 00:09:23.839 align:start position:0%
ahead and set up your development
 

00:09:23.839 --> 00:09:25.590 align:start position:0%
ahead and set up your development
environment<00:09:24.480><c> because</c><00:09:24.800><c> in</c><00:09:24.880><c> the</c><00:09:24.959><c> next</c><00:09:25.200><c> lesson</c>

00:09:25.590 --> 00:09:25.600 align:start position:0%
environment because in the next lesson
 

00:09:25.600 --> 00:09:26.949 align:start position:0%
environment because in the next lesson
we're<00:09:25.760><c> going</c><00:09:25.839><c> to</c><00:09:25.920><c> write</c><00:09:26.320><c> our</c><00:09:26.480><c> first</c>

00:09:26.949 --> 00:09:26.959 align:start position:0%
we're going to write our first
 

00:09:26.959 --> 00:09:30.580 align:start position:0%
we're going to write our first
typescript<00:09:27.519><c> program</c>

00:09:30.580 --> 00:09:30.590 align:start position:0%
 
 

00:09:30.590 --> 00:09:35.750 align:start position:0%
 
[Music]

00:09:35.750 --> 00:09:35.760 align:start position:0%
 
 

00:09:35.760 --> 00:09:36.949 align:start position:0%
 
all<00:09:35.839><c> right</c><00:09:36.000><c> now</c><00:09:36.240><c> i'm</c><00:09:36.320><c> going</c><00:09:36.399><c> to</c><00:09:36.480><c> go</c><00:09:36.640><c> to</c><00:09:36.720><c> my</c>

00:09:36.949 --> 00:09:36.959 align:start position:0%
all right now i'm going to go to my
 

00:09:36.959 --> 00:09:38.550 align:start position:0%
all right now i'm going to go to my
desktop<00:09:37.440><c> folder</c>

00:09:38.550 --> 00:09:38.560 align:start position:0%
desktop folder
 

00:09:38.560 --> 00:09:40.630 align:start position:0%
desktop folder
and<00:09:38.800><c> create</c><00:09:39.120><c> a</c><00:09:39.200><c> new</c><00:09:39.360><c> folder</c><00:09:39.839><c> for</c><00:09:40.000><c> our</c><00:09:40.240><c> project</c>

00:09:40.630 --> 00:09:40.640 align:start position:0%
and create a new folder for our project
 

00:09:40.640 --> 00:09:43.269 align:start position:0%
and create a new folder for our project
called<00:09:41.120><c> hello</c><00:09:41.600><c> dash</c><00:09:42.160><c> world</c><00:09:42.640><c> you</c><00:09:42.800><c> can</c><00:09:42.959><c> call</c><00:09:43.120><c> it</c>

00:09:43.269 --> 00:09:43.279 align:start position:0%
called hello dash world you can call it
 

00:09:43.279 --> 00:09:44.949 align:start position:0%
called hello dash world you can call it
anything<00:09:43.600><c> you</c><00:09:43.760><c> want</c><00:09:44.000><c> and</c><00:09:44.399><c> you</c><00:09:44.480><c> can</c><00:09:44.640><c> put</c><00:09:44.800><c> it</c>

00:09:44.949 --> 00:09:44.959 align:start position:0%
anything you want and you can put it
 

00:09:44.959 --> 00:09:46.710 align:start position:0%
anything you want and you can put it
anywhere<00:09:45.360><c> on</c><00:09:45.440><c> your</c><00:09:45.600><c> machine</c>

00:09:46.710 --> 00:09:46.720 align:start position:0%
anywhere on your machine
 

00:09:46.720 --> 00:09:49.269 align:start position:0%
anywhere on your machine
now<00:09:47.040><c> let's</c><00:09:47.200><c> go</c><00:09:47.360><c> into</c><00:09:47.600><c> this</c><00:09:47.760><c> folder</c>

00:09:49.269 --> 00:09:49.279 align:start position:0%
now let's go into this folder
 

00:09:49.279 --> 00:09:51.829 align:start position:0%
now let's go into this folder
and<00:09:49.519><c> open</c><00:09:49.839><c> it</c><00:09:49.920><c> with</c><00:09:50.080><c> vs</c><00:09:50.399><c> code</c><00:09:50.720><c> so</c><00:09:50.880><c> we</c><00:09:50.959><c> type</c><00:09:51.279><c> code</c>

00:09:51.829 --> 00:09:51.839 align:start position:0%
and open it with vs code so we type code
 

00:09:51.839 --> 00:09:52.870 align:start position:0%
and open it with vs code so we type code
period

00:09:52.870 --> 00:09:52.880 align:start position:0%
period
 

00:09:52.880 --> 00:09:55.430 align:start position:0%
period
now<00:09:53.040><c> if</c><00:09:53.200><c> this</c><00:09:53.360><c> doesn't</c><00:09:53.600><c> work</c><00:09:53.839><c> on</c><00:09:53.920><c> your</c><00:09:54.160><c> machine</c>

00:09:55.430 --> 00:09:55.440 align:start position:0%
now if this doesn't work on your machine
 

00:09:55.440 --> 00:09:57.910 align:start position:0%
now if this doesn't work on your machine
you<00:09:55.600><c> can</c><00:09:55.760><c> simply</c><00:09:56.160><c> drag</c><00:09:56.480><c> and</c><00:09:56.560><c> drop</c><00:09:56.880><c> this</c><00:09:57.040><c> folder</c>

00:09:57.910 --> 00:09:57.920 align:start position:0%
you can simply drag and drop this folder
 

00:09:57.920 --> 00:09:59.590 align:start position:0%
you can simply drag and drop this folder
onto<00:09:58.240><c> vs</c><00:09:58.560><c> code</c>

00:09:59.590 --> 00:09:59.600 align:start position:0%
onto vs code
 

00:09:59.600 --> 00:10:02.790 align:start position:0%
onto vs code
okay<00:10:00.320><c> so</c><00:10:00.480><c> here's</c><00:10:00.800><c> our</c><00:10:00.959><c> project</c><00:10:01.680><c> now</c><00:10:01.920><c> let's</c><00:10:02.160><c> add</c>

00:10:02.790 --> 00:10:02.800 align:start position:0%
okay so here's our project now let's add
 

00:10:02.800 --> 00:10:05.829 align:start position:0%
okay so here's our project now let's add
a<00:10:02.880><c> new</c><00:10:03.120><c> file</c><00:10:03.360><c> here</c><00:10:03.600><c> called</c><00:10:04.160><c> index.ts</c>

00:10:05.829 --> 00:10:05.839 align:start position:0%
a new file here called index.ts
 

00:10:05.839 --> 00:10:07.590 align:start position:0%
a new file here called index.ts
so<00:10:06.079><c> every</c><00:10:06.320><c> typescript</c><00:10:06.800><c> file</c><00:10:07.040><c> should</c><00:10:07.279><c> have</c><00:10:07.440><c> the</c>

00:10:07.590 --> 00:10:07.600 align:start position:0%
so every typescript file should have the
 

00:10:07.600 --> 00:10:09.670 align:start position:0%
so every typescript file should have the
ts<00:10:08.320><c> extension</c>

00:10:09.670 --> 00:10:09.680 align:start position:0%
ts extension
 

00:10:09.680 --> 00:10:12.230 align:start position:0%
ts extension
now<00:10:10.160><c> earlier</c><00:10:10.640><c> i</c><00:10:10.720><c> told</c><00:10:10.959><c> you</c><00:10:11.120><c> that</c><00:10:11.440><c> typescript</c>

00:10:12.230 --> 00:10:12.240 align:start position:0%
now earlier i told you that typescript
 

00:10:12.240 --> 00:10:15.190 align:start position:0%
now earlier i told you that typescript
is<00:10:12.480><c> built</c><00:10:12.959><c> on</c><00:10:13.120><c> top</c><00:10:13.360><c> of</c><00:10:13.519><c> javascript</c><00:10:14.399><c> so</c><00:10:14.560><c> we</c><00:10:14.720><c> say</c>

00:10:15.190 --> 00:10:15.200 align:start position:0%
is built on top of javascript so we say
 

00:10:15.200 --> 00:10:17.750 align:start position:0%
is built on top of javascript so we say
typescript<00:10:16.079><c> is</c><00:10:16.240><c> a</c><00:10:16.399><c> supersort</c><00:10:16.959><c> of</c><00:10:17.120><c> javascript</c>

00:10:17.750 --> 00:10:17.760 align:start position:0%
typescript is a supersort of javascript
 

00:10:17.760 --> 00:10:19.350 align:start position:0%
typescript is a supersort of javascript
which<00:10:17.920><c> means</c><00:10:18.399><c> it</c><00:10:18.560><c> has</c><00:10:18.880><c> everything</c><00:10:19.200><c> in</c>

00:10:19.350 --> 00:10:19.360 align:start position:0%
which means it has everything in
 

00:10:19.360 --> 00:10:22.230 align:start position:0%
which means it has everything in
javascript<00:10:20.240><c> plus</c><00:10:20.480><c> some</c><00:10:20.720><c> additional</c><00:10:21.200><c> features</c>

00:10:22.230 --> 00:10:22.240 align:start position:0%
javascript plus some additional features
 

00:10:22.240 --> 00:10:24.389 align:start position:0%
javascript plus some additional features
so<00:10:22.399><c> here</c><00:10:22.560><c> we</c><00:10:22.720><c> can</c><00:10:22.800><c> write</c><00:10:23.200><c> any</c><00:10:23.440><c> javascript</c><00:10:24.000><c> code</c>

00:10:24.389 --> 00:10:24.399 align:start position:0%
so here we can write any javascript code
 

00:10:24.399 --> 00:10:26.870 align:start position:0%
so here we can write any javascript code
and<00:10:24.560><c> that</c><00:10:24.800><c> is</c><00:10:25.040><c> valid</c><00:10:25.680><c> typescript</c><00:10:26.160><c> code</c><00:10:26.560><c> so</c><00:10:26.720><c> we</c>

00:10:26.870 --> 00:10:26.880 align:start position:0%
and that is valid typescript code so we
 

00:10:26.880 --> 00:10:29.190 align:start position:0%
and that is valid typescript code so we
can<00:10:27.040><c> write</c><00:10:27.519><c> console.log</c>

00:10:29.190 --> 00:10:29.200 align:start position:0%
can write console.log
 

00:10:29.200 --> 00:10:32.389 align:start position:0%
can write console.log
and<00:10:29.440><c> print</c><00:10:30.160><c> hello</c><00:10:30.720><c> world</c>

00:10:32.389 --> 00:10:32.399 align:start position:0%
and print hello world
 

00:10:32.399 --> 00:10:33.750 align:start position:0%
and print hello world
now<00:10:32.640><c> we</c><00:10:32.720><c> can</c><00:10:32.880><c> go</c><00:10:32.959><c> back</c><00:10:33.120><c> to</c><00:10:33.279><c> our</c><00:10:33.360><c> terminal</c>

00:10:33.750 --> 00:10:33.760 align:start position:0%
now we can go back to our terminal
 

00:10:33.760 --> 00:10:34.870 align:start position:0%
now we can go back to our terminal
window<00:10:34.079><c> here</c>

00:10:34.870 --> 00:10:34.880 align:start position:0%
window here
 

00:10:34.880 --> 00:10:36.870 align:start position:0%
window here
or<00:10:35.120><c> we</c><00:10:35.279><c> can</c><00:10:35.440><c> use</c><00:10:35.760><c> the</c><00:10:36.000><c> embedded</c><00:10:36.480><c> terminal</c>

00:10:36.870 --> 00:10:36.880 align:start position:0%
or we can use the embedded terminal
 

00:10:36.880 --> 00:10:40.710 align:start position:0%
or we can use the embedded terminal
window<00:10:37.440><c> in</c><00:10:37.519><c> vs</c><00:10:37.920><c> code</c><00:10:38.720><c> so</c><00:10:39.360><c> back</c><00:10:39.600><c> in</c><00:10:39.680><c> vs</c><00:10:40.000><c> code</c>

00:10:40.710 --> 00:10:40.720 align:start position:0%
window in vs code so back in vs code
 

00:10:40.720 --> 00:10:43.110 align:start position:0%
window in vs code so back in vs code
under<00:10:40.959><c> the</c><00:10:41.120><c> view</c><00:10:41.279><c> menu</c><00:10:42.160><c> look</c><00:10:42.480><c> we</c><00:10:42.640><c> have</c>

00:10:43.110 --> 00:10:43.120 align:start position:0%
under the view menu look we have
 

00:10:43.120 --> 00:10:46.470 align:start position:0%
under the view menu look we have
terminal<00:10:44.160><c> the</c><00:10:44.399><c> shortcut</c><00:10:44.880><c> on</c><00:10:45.040><c> mac</c><00:10:45.360><c> is</c><00:10:45.519><c> control</c>

00:10:46.470 --> 00:10:46.480 align:start position:0%
terminal the shortcut on mac is control
 

00:10:46.480 --> 00:10:47.750 align:start position:0%
terminal the shortcut on mac is control
and<00:10:46.640><c> backtick</c>

00:10:47.750 --> 00:10:47.760 align:start position:0%
and backtick
 

00:10:47.760 --> 00:10:48.790 align:start position:0%
and backtick
so

00:10:48.790 --> 00:10:48.800 align:start position:0%
so
 

00:10:48.800 --> 00:10:49.990 align:start position:0%
so
we<00:10:48.959><c> can</c><00:10:49.200><c> open</c>

00:10:49.990 --> 00:10:50.000 align:start position:0%
we can open
 

00:10:50.000 --> 00:10:51.829 align:start position:0%
we can open
the<00:10:50.160><c> terminal</c><00:10:50.480><c> window</c><00:10:50.800><c> right</c><00:10:51.040><c> here</c>

00:10:51.829 --> 00:10:51.839 align:start position:0%
the terminal window right here
 

00:10:51.839 --> 00:10:53.590 align:start position:0%
the terminal window right here
and<00:10:52.000><c> using</c><00:10:52.240><c> typescript</c><00:10:52.720><c> compiler</c><00:10:53.279><c> we</c><00:10:53.440><c> can</c>

00:10:53.590 --> 00:10:53.600 align:start position:0%
and using typescript compiler we can
 

00:10:53.600 --> 00:10:57.030 align:start position:0%
and using typescript compiler we can
compile<00:10:54.399><c> index.ts</c>

00:10:57.030 --> 00:10:57.040 align:start position:0%
compile index.ts
 

00:10:57.040 --> 00:10:57.910 align:start position:0%
compile index.ts
okay

00:10:57.910 --> 00:10:57.920 align:start position:0%
okay
 

00:10:57.920 --> 00:11:00.949 align:start position:0%
okay
now<00:10:58.480><c> let's</c><00:10:58.720><c> open</c><00:10:58.959><c> our</c><00:10:59.120><c> project</c><00:10:59.440><c> folder</c>

00:11:00.949 --> 00:11:00.959 align:start position:0%
now let's open our project folder
 

00:11:00.959 --> 00:11:03.509 align:start position:0%
now let's open our project folder
look<00:11:01.360><c> we</c><00:11:01.519><c> have</c><00:11:01.800><c> index.js</c>

00:11:03.509 --> 00:11:03.519 align:start position:0%
look we have index.js
 

00:11:03.519 --> 00:11:06.150 align:start position:0%
look we have index.js
which<00:11:03.760><c> is</c><00:11:03.920><c> the</c><00:11:04.079><c> result</c><00:11:04.560><c> of</c><00:11:04.720><c> compilation</c><00:11:05.839><c> so</c><00:11:06.000><c> we</c>

00:11:06.150 --> 00:11:06.160 align:start position:0%
which is the result of compilation so we
 

00:11:06.160 --> 00:11:08.790 align:start position:0%
which is the result of compilation so we
have<00:11:06.320><c> the</c><00:11:06.480><c> exact</c><00:11:06.880><c> same</c><00:11:07.120><c> code</c><00:11:07.360><c> here</c><00:11:07.839><c> because</c><00:11:08.560><c> in</c>

00:11:08.790 --> 00:11:08.800 align:start position:0%
have the exact same code here because in
 

00:11:08.800 --> 00:11:11.509 align:start position:0%
have the exact same code here because in
index.ts<00:11:09.760><c> we</c><00:11:09.920><c> haven't</c><00:11:10.160><c> used</c><00:11:10.800><c> any</c><00:11:11.040><c> typescript</c>

00:11:11.509 --> 00:11:11.519 align:start position:0%
index.ts we haven't used any typescript
 

00:11:11.519 --> 00:11:13.269 align:start position:0%
index.ts we haven't used any typescript
features<00:11:12.399><c> so</c><00:11:12.560><c> let's</c><00:11:12.720><c> write</c><00:11:12.959><c> a</c><00:11:13.040><c> bit</c><00:11:13.200><c> of</c>

00:11:13.269 --> 00:11:13.279 align:start position:0%
features so let's write a bit of
 

00:11:13.279 --> 00:11:14.550 align:start position:0%
features so let's write a bit of
typescript<00:11:13.760><c> code</c>

00:11:14.550 --> 00:11:14.560 align:start position:0%
typescript code
 

00:11:14.560 --> 00:11:15.269 align:start position:0%
typescript code
so

00:11:15.269 --> 00:11:15.279 align:start position:0%
so
 

00:11:15.279 --> 00:11:17.990 align:start position:0%
so
here<00:11:15.440><c> in</c><00:11:15.600><c> index.ts</c><00:11:17.040><c> i'm</c><00:11:17.200><c> going</c><00:11:17.360><c> to</c><00:11:17.440><c> declare</c><00:11:17.839><c> a</c>

00:11:17.990 --> 00:11:18.000 align:start position:0%
here in index.ts i'm going to declare a
 

00:11:18.000 --> 00:11:20.389 align:start position:0%
here in index.ts i'm going to declare a
variable<00:11:18.640><c> using</c><00:11:18.880><c> the</c><00:11:19.040><c> let</c><00:11:19.279><c> keyword</c><00:11:20.160><c> i'm</c><00:11:20.320><c> going</c>

00:11:20.389 --> 00:11:20.399 align:start position:0%
variable using the let keyword i'm going
 

00:11:20.399 --> 00:11:21.990 align:start position:0%
variable using the let keyword i'm going
to<00:11:20.480><c> call</c><00:11:20.720><c> it</c><00:11:20.959><c> h</c>

00:11:21.990 --> 00:11:22.000 align:start position:0%
to call it h
 

00:11:22.000 --> 00:11:25.750 align:start position:0%
to call it h
and<00:11:22.399><c> annotate</c><00:11:23.040><c> it</c><00:11:23.440><c> with</c><00:11:24.079><c> number</c><00:11:24.800><c> so</c><00:11:25.279><c> by</c><00:11:25.440><c> typing</c>

00:11:25.750 --> 00:11:25.760 align:start position:0%
and annotate it with number so by typing
 

00:11:25.760 --> 00:11:27.990 align:start position:0%
and annotate it with number so by typing
a<00:11:25.920><c> colon</c><00:11:26.640><c> followed</c><00:11:26.880><c> by</c><00:11:27.040><c> the</c><00:11:27.200><c> type</c><00:11:27.440><c> of</c><00:11:27.519><c> variable</c>

00:11:27.990 --> 00:11:28.000 align:start position:0%
a colon followed by the type of variable
 

00:11:28.000 --> 00:11:31.590 align:start position:0%
a colon followed by the type of variable
we<00:11:28.160><c> can</c><00:11:28.560><c> annotate</c><00:11:29.279><c> or</c><00:11:29.519><c> explain</c><00:11:30.160><c> a</c><00:11:30.240><c> variable</c>

00:11:31.590 --> 00:11:31.600 align:start position:0%
we can annotate or explain a variable
 

00:11:31.600 --> 00:11:33.190 align:start position:0%
we can annotate or explain a variable
now<00:11:31.760><c> we</c><00:11:31.920><c> can</c><00:11:32.000><c> initialize</c><00:11:32.560><c> it</c><00:11:32.640><c> to</c><00:11:32.880><c> let's</c><00:11:33.040><c> say</c>

00:11:33.190 --> 00:11:33.200 align:start position:0%
now we can initialize it to let's say
 

00:11:33.200 --> 00:11:35.750 align:start position:0%
now we can initialize it to let's say
20.<00:11:34.160><c> now</c><00:11:34.320><c> here's</c><00:11:34.560><c> the</c><00:11:34.720><c> beautiful</c><00:11:35.120><c> part</c>

00:11:35.750 --> 00:11:35.760 align:start position:0%
20. now here's the beautiful part
 

00:11:35.760 --> 00:11:37.990 align:start position:0%
20. now here's the beautiful part
because<00:11:36.000><c> we</c><00:11:36.160><c> have</c><00:11:36.240><c> declared</c><00:11:36.800><c> age</c><00:11:37.040><c> as</c><00:11:37.200><c> a</c><00:11:37.279><c> number</c>

00:11:37.990 --> 00:11:38.000 align:start position:0%
because we have declared age as a number
 

00:11:38.000 --> 00:11:40.150 align:start position:0%
because we have declared age as a number
we<00:11:38.240><c> cannot</c><00:11:38.640><c> set</c><00:11:38.800><c> it</c><00:11:38.880><c> to</c><00:11:39.040><c> a</c><00:11:39.200><c> string</c>

00:11:40.150 --> 00:11:40.160 align:start position:0%
we cannot set it to a string
 

00:11:40.160 --> 00:11:42.389 align:start position:0%
we cannot set it to a string
or<00:11:40.480><c> another</c><00:11:40.880><c> type</c><00:11:41.120><c> of</c><00:11:41.279><c> object</c><00:11:41.680><c> look</c>

00:11:42.389 --> 00:11:42.399 align:start position:0%
or another type of object look
 

00:11:42.399 --> 00:11:44.470 align:start position:0%
or another type of object look
we<00:11:42.560><c> get</c><00:11:42.720><c> this</c><00:11:42.880><c> error</c><00:11:43.279><c> right</c><00:11:43.519><c> here</c>

00:11:44.470 --> 00:11:44.480 align:start position:0%
we get this error right here
 

00:11:44.480 --> 00:11:46.470 align:start position:0%
we get this error right here
it's<00:11:44.640><c> saying</c><00:11:45.200><c> type</c><00:11:45.519><c> string</c><00:11:46.079><c> is</c><00:11:46.240><c> not</c>

00:11:46.470 --> 00:11:46.480 align:start position:0%
it's saying type string is not
 

00:11:46.480 --> 00:11:48.470 align:start position:0%
it's saying type string is not
assignable<00:11:46.959><c> to</c><00:11:47.120><c> type</c><00:11:47.440><c> number</c><00:11:48.000><c> this</c><00:11:48.240><c> is</c><00:11:48.320><c> the</c>

00:11:48.470 --> 00:11:48.480 align:start position:0%
assignable to type number this is the
 

00:11:48.480 --> 00:11:50.230 align:start position:0%
assignable to type number this is the
beauty<00:11:48.800><c> of</c><00:11:48.880><c> using</c><00:11:49.120><c> typescript</c><00:11:50.000><c> with</c>

00:11:50.230 --> 00:11:50.240 align:start position:0%
beauty of using typescript with
 

00:11:50.240 --> 00:11:52.069 align:start position:0%
beauty of using typescript with
typescript<00:11:50.880><c> we</c><00:11:51.040><c> can</c><00:11:51.200><c> catch</c><00:11:51.519><c> a</c><00:11:51.680><c> lot</c><00:11:51.839><c> of</c><00:11:51.920><c> our</c>

00:11:52.069 --> 00:11:52.079 align:start position:0%
typescript we can catch a lot of our
 

00:11:52.079 --> 00:11:54.230 align:start position:0%
typescript we can catch a lot of our
mistakes<00:11:52.800><c> at</c><00:11:52.959><c> compile</c><00:11:53.440><c> time</c><00:11:53.760><c> we</c><00:11:53.920><c> don't</c><00:11:54.079><c> have</c>

00:11:54.230 --> 00:11:54.240 align:start position:0%
mistakes at compile time we don't have
 

00:11:54.240 --> 00:11:56.629 align:start position:0%
mistakes at compile time we don't have
to<00:11:54.399><c> run</c><00:11:54.560><c> our</c><00:11:54.720><c> application</c><00:11:55.279><c> or</c><00:11:55.600><c> our</c><00:11:55.839><c> unit</c><00:11:56.160><c> tests</c>

00:11:56.629 --> 00:11:56.639 align:start position:0%
to run our application or our unit tests
 

00:11:56.639 --> 00:11:58.949 align:start position:0%
to run our application or our unit tests
to<00:11:56.800><c> find</c><00:11:57.040><c> that</c><00:11:57.279><c> we</c><00:11:57.600><c> accidentally</c><00:11:58.560><c> set</c><00:11:58.800><c> a</c>

00:11:58.949 --> 00:11:58.959 align:start position:0%
to find that we accidentally set a
 

00:11:58.959 --> 00:12:01.750 align:start position:0%
to find that we accidentally set a
number<00:11:59.360><c> to</c><00:11:59.519><c> a</c><00:11:59.680><c> string</c><00:12:00.480><c> so</c><00:12:01.040><c> let's</c><00:12:01.279><c> remove</c><00:12:01.600><c> this</c>

00:12:01.750 --> 00:12:01.760 align:start position:0%
number to a string so let's remove this
 

00:12:01.760 --> 00:12:04.629 align:start position:0%
number to a string so let's remove this
bad<00:12:02.000><c> line</c><00:12:02.560><c> and</c><00:12:02.959><c> recompile</c><00:12:03.519><c> our</c><00:12:03.760><c> file</c>

00:12:04.629 --> 00:12:04.639 align:start position:0%
bad line and recompile our file
 

00:12:04.639 --> 00:12:08.629 align:start position:0%
bad line and recompile our file
so<00:12:05.200><c> back</c><00:12:05.360><c> to</c><00:12:05.519><c> the</c><00:12:05.600><c> terminal</c><00:12:06.399><c> tsc</c><00:12:07.279><c> index.js</c>

00:12:08.629 --> 00:12:08.639 align:start position:0%
so back to the terminal tsc index.js
 

00:12:08.639 --> 00:12:09.590 align:start position:0%
so back to the terminal tsc index.js
good

00:12:09.590 --> 00:12:09.600 align:start position:0%
good
 

00:12:09.600 --> 00:12:12.629 align:start position:0%
good
now<00:12:10.240><c> take</c><00:12:10.480><c> a</c><00:12:10.560><c> look</c><00:12:10.800><c> over</c><00:12:10.959><c> here</c>

00:12:12.629 --> 00:12:12.639 align:start position:0%
now take a look over here
 

00:12:12.639 --> 00:12:14.230 align:start position:0%
now take a look over here
look<00:12:12.880><c> at</c><00:12:12.959><c> the</c><00:12:13.120><c> javascript</c><00:12:13.680><c> code</c><00:12:13.920><c> that</c><00:12:14.079><c> the</c>

00:12:14.230 --> 00:12:14.240 align:start position:0%
look at the javascript code that the
 

00:12:14.240 --> 00:12:16.310 align:start position:0%
look at the javascript code that the
typescript<00:12:14.639><c> compiler</c><00:12:15.120><c> generated</c>

00:12:16.310 --> 00:12:16.320 align:start position:0%
typescript compiler generated
 

00:12:16.320 --> 00:12:17.990 align:start position:0%
typescript compiler generated
so<00:12:16.560><c> instead</c><00:12:16.800><c> of</c><00:12:16.880><c> the</c><00:12:17.040><c> let</c><00:12:17.279><c> keyword</c><00:12:17.680><c> here</c><00:12:17.920><c> we</c>

00:12:17.990 --> 00:12:18.000 align:start position:0%
so instead of the let keyword here we
 

00:12:18.000 --> 00:12:20.470 align:start position:0%
so instead of the let keyword here we
have<00:12:18.240><c> var</c><00:12:18.959><c> because</c><00:12:19.360><c> by</c><00:12:19.600><c> default</c><00:12:20.320><c> the</c>

00:12:20.470 --> 00:12:20.480 align:start position:0%
have var because by default the
 

00:12:20.480 --> 00:12:22.790 align:start position:0%
have var because by default the
typescript<00:12:20.959><c> compiler</c><00:12:21.519><c> uses</c><00:12:22.160><c> an</c><00:12:22.480><c> older</c>

00:12:22.790 --> 00:12:22.800 align:start position:0%
typescript compiler uses an older
 

00:12:22.800 --> 00:12:25.269 align:start position:0%
typescript compiler uses an older
version<00:12:23.120><c> of</c><00:12:23.279><c> javascript</c><00:12:23.839><c> called</c><00:12:24.320><c> es5</c><00:12:25.040><c> which</c>

00:12:25.269 --> 00:12:25.279 align:start position:0%
version of javascript called es5 which
 

00:12:25.279 --> 00:12:28.790 align:start position:0%
version of javascript called es5 which
is<00:12:25.360><c> short</c><00:12:25.680><c> for</c><00:12:26.160><c> ecmascript</c><00:12:26.959><c> 5.</c><00:12:27.680><c> so</c><00:12:27.920><c> ecmoscript</c>

00:12:28.790 --> 00:12:28.800 align:start position:0%
is short for ecmascript 5. so ecmoscript
 

00:12:28.800 --> 00:12:31.590 align:start position:0%
is short for ecmascript 5. so ecmoscript
is<00:12:28.959><c> a</c><00:12:29.120><c> standard</c><00:12:29.760><c> or</c><00:12:30.000><c> a</c><00:12:30.160><c> specification</c><00:12:31.279><c> while</c>

00:12:31.590 --> 00:12:31.600 align:start position:0%
is a standard or a specification while
 

00:12:31.600 --> 00:12:33.990 align:start position:0%
is a standard or a specification while
javascript<00:12:32.560><c> is</c><00:12:32.720><c> an</c><00:12:32.959><c> implementation</c><00:12:33.680><c> of</c><00:12:33.760><c> that</c>

00:12:33.990 --> 00:12:34.000 align:start position:0%
javascript is an implementation of that
 

00:12:34.000 --> 00:12:35.269 align:start position:0%
javascript is an implementation of that
specification

00:12:35.269 --> 00:12:35.279 align:start position:0%
specification
 

00:12:35.279 --> 00:12:38.150 align:start position:0%
specification
so<00:12:35.600><c> es5</c><00:12:36.480><c> is</c><00:12:36.639><c> an</c><00:12:36.880><c> old</c><00:12:37.040><c> specification</c><00:12:37.839><c> it's</c><00:12:38.000><c> been</c>

00:12:38.150 --> 00:12:38.160 align:start position:0%
so es5 is an old specification it's been
 

00:12:38.160 --> 00:12:40.470 align:start position:0%
so es5 is an old specification it's been
around<00:12:38.560><c> for</c><00:12:38.720><c> a</c><00:12:38.880><c> long</c><00:12:39.200><c> time</c><00:12:39.760><c> and</c><00:12:40.079><c> all</c><00:12:40.240><c> these</c>

00:12:40.470 --> 00:12:40.480 align:start position:0%
around for a long time and all these
 

00:12:40.480 --> 00:12:42.230 align:start position:0%
around for a long time and all these
features<00:12:40.959><c> have</c><00:12:41.120><c> been</c><00:12:41.440><c> implemented</c><00:12:42.000><c> in</c><00:12:42.079><c> our</c>

00:12:42.230 --> 00:12:42.240 align:start position:0%
features have been implemented in our
 

00:12:42.240 --> 00:12:44.389 align:start position:0%
features have been implemented in our
browsers<00:12:42.880><c> for</c><00:12:43.040><c> a</c><00:12:43.200><c> very</c><00:12:43.519><c> very</c><00:12:43.760><c> long</c><00:12:44.000><c> time</c><00:12:44.240><c> i</c>

00:12:44.389 --> 00:12:44.399 align:start position:0%
browsers for a very very long time i
 

00:12:44.399 --> 00:12:46.389 align:start position:0%
browsers for a very very long time i
think<00:12:44.720><c> more</c><00:12:44.959><c> than</c><00:12:45.120><c> a</c><00:12:45.200><c> decade</c><00:12:45.839><c> now</c><00:12:46.000><c> in</c><00:12:46.160><c> the</c><00:12:46.240><c> next</c>

00:12:46.389 --> 00:12:46.399 align:start position:0%
think more than a decade now in the next
 

00:12:46.399 --> 00:12:48.069 align:start position:0%
think more than a decade now in the next
lesson<00:12:46.800><c> i'm</c><00:12:46.880><c> going</c><00:12:46.959><c> to</c><00:12:47.040><c> show</c><00:12:47.200><c> you</c><00:12:47.760><c> how</c><00:12:47.920><c> to</c>

00:12:48.069 --> 00:12:48.079 align:start position:0%
lesson i'm going to show you how to
 

00:12:48.079 --> 00:12:50.230 align:start position:0%
lesson i'm going to show you how to
configure<00:12:48.639><c> the</c><00:12:48.800><c> typescript</c><00:12:49.279><c> compiler</c><00:12:50.000><c> to</c>

00:12:50.230 --> 00:12:50.240 align:start position:0%
configure the typescript compiler to
 

00:12:50.240 --> 00:12:53.110 align:start position:0%
configure the typescript compiler to
target<00:12:50.959><c> a</c><00:12:51.040><c> newer</c><00:12:51.519><c> javascript</c><00:12:52.079><c> version</c><00:12:52.800><c> so</c><00:12:52.959><c> the</c>

00:12:53.110 --> 00:12:53.120 align:start position:0%
target a newer javascript version so the
 

00:12:53.120 --> 00:12:54.790 align:start position:0%
target a newer javascript version so the
code<00:12:53.360><c> that</c><00:12:53.519><c> will</c><00:12:53.600><c> be</c><00:12:53.760><c> generated</c><00:12:54.480><c> would</c><00:12:54.639><c> be</c>

00:12:54.790 --> 00:12:54.800 align:start position:0%
code that will be generated would be
 

00:12:54.800 --> 00:12:56.150 align:start position:0%
code that will be generated would be
more<00:12:55.120><c> modern</c>

00:12:56.150 --> 00:12:56.160 align:start position:0%
more modern
 

00:12:56.160 --> 00:12:58.389 align:start position:0%
more modern
so<00:12:56.560><c> here's</c><00:12:56.800><c> the</c><00:12:56.880><c> interesting</c><00:12:57.279><c> part</c><00:12:58.079><c> instead</c>

00:12:58.389 --> 00:12:58.399 align:start position:0%
so here's the interesting part instead
 

00:12:58.399 --> 00:13:00.949 align:start position:0%
so here's the interesting part instead
of<00:12:58.480><c> let</c><00:12:58.720><c> we're</c><00:12:58.959><c> using</c><00:12:59.279><c> var</c><00:12:59.760><c> and</c><00:13:00.240><c> we</c><00:13:00.399><c> don't</c><00:13:00.639><c> have</c>

00:13:00.949 --> 00:13:00.959 align:start position:0%
of let we're using var and we don't have
 

00:13:00.959 --> 00:13:03.110 align:start position:0%
of let we're using var and we don't have
our<00:13:01.200><c> type</c><00:13:01.519><c> annotation</c><00:13:02.079><c> this</c><00:13:02.399><c> is</c><00:13:02.560><c> purely</c><00:13:02.959><c> for</c>

00:13:03.110 --> 00:13:03.120 align:start position:0%
our type annotation this is purely for
 

00:13:03.120 --> 00:13:04.710 align:start position:0%
our type annotation this is purely for
the<00:13:03.200><c> typescript</c><00:13:03.680><c> compiler</c>

00:13:04.710 --> 00:13:04.720 align:start position:0%
the typescript compiler
 

00:13:04.720 --> 00:13:06.870 align:start position:0%
the typescript compiler
the<00:13:05.040><c> actual</c><00:13:05.360><c> javascript</c><00:13:06.000><c> code</c><00:13:06.560><c> doesn't</c>

00:13:06.870 --> 00:13:06.880 align:start position:0%
the actual javascript code doesn't
 

00:13:06.880 --> 00:13:09.670 align:start position:0%
the actual javascript code doesn't
specify<00:13:07.519><c> the</c><00:13:07.680><c> type</c><00:13:07.920><c> of</c><00:13:08.000><c> this</c><00:13:08.240><c> variable</c><00:13:08.800><c> okay</c>

00:13:09.670 --> 00:13:09.680 align:start position:0%
specify the type of this variable okay
 

00:13:09.680 --> 00:13:11.750 align:start position:0%
specify the type of this variable okay
so<00:13:09.920><c> that's</c><00:13:10.240><c> it</c><00:13:10.399><c> for</c><00:13:10.560><c> now</c><00:13:11.040><c> starting</c><00:13:11.440><c> from</c><00:13:11.680><c> the</c>

00:13:11.750 --> 00:13:11.760 align:start position:0%
so that's it for now starting from the
 

00:13:11.760 --> 00:13:13.269 align:start position:0%
so that's it for now starting from the
next<00:13:12.000><c> section</c><00:13:12.480><c> we're</c><00:13:12.639><c> going</c><00:13:12.720><c> to</c><00:13:12.880><c> explore</c>

00:13:13.269 --> 00:13:13.279 align:start position:0%
next section we're going to explore
 

00:13:13.279 --> 00:13:15.269 align:start position:0%
next section we're going to explore
typescript<00:13:13.760><c> features</c><00:13:14.160><c> in</c><00:13:14.320><c> detail</c>

00:13:15.269 --> 00:13:15.279 align:start position:0%
typescript features in detail
 

00:13:15.279 --> 00:13:16.710 align:start position:0%
typescript features in detail
next<00:13:15.600><c> i'm</c><00:13:15.680><c> going</c><00:13:15.839><c> to</c><00:13:15.920><c> show</c><00:13:16.079><c> you</c><00:13:16.399><c> how</c><00:13:16.560><c> to</c>

00:13:16.710 --> 00:13:16.720 align:start position:0%
next i'm going to show you how to
 

00:13:16.720 --> 00:13:21.230 align:start position:0%
next i'm going to show you how to
configure<00:13:17.279><c> the</c><00:13:17.440><c> typescript</c><00:13:17.920><c> compiler</c>

00:13:21.230 --> 00:13:21.240 align:start position:0%
 
 

00:13:21.240 --> 00:13:26.389 align:start position:0%
 
[Music]

00:13:26.389 --> 00:13:26.399 align:start position:0%
 
 

00:13:26.399 --> 00:13:27.990 align:start position:0%
 
all<00:13:26.560><c> right</c><00:13:26.639><c> let's</c><00:13:26.880><c> talk</c><00:13:27.040><c> about</c><00:13:27.360><c> creating</c><00:13:27.839><c> a</c>

00:13:27.990 --> 00:13:28.000 align:start position:0%
all right let's talk about creating a
 

00:13:28.000 --> 00:13:29.990 align:start position:0%
all right let's talk about creating a
configuration<00:13:28.720><c> file</c><00:13:29.120><c> for</c><00:13:29.279><c> the</c><00:13:29.440><c> typescript</c>

00:13:29.990 --> 00:13:30.000 align:start position:0%
configuration file for the typescript
 

00:13:30.000 --> 00:13:31.030 align:start position:0%
configuration file for the typescript
compiler

00:13:31.030 --> 00:13:31.040 align:start position:0%
compiler
 

00:13:31.040 --> 00:13:33.590 align:start position:0%
compiler
so<00:13:31.279><c> here</c><00:13:31.440><c> in</c><00:13:31.519><c> the</c><00:13:31.600><c> terminal</c><00:13:32.079><c> we</c><00:13:32.240><c> run</c><00:13:32.639><c> tsc</c>

00:13:33.590 --> 00:13:33.600 align:start position:0%
so here in the terminal we run tsc
 

00:13:33.600 --> 00:13:36.470 align:start position:0%
so here in the terminal we run tsc
double<00:13:33.920><c> hyphen</c><00:13:34.720><c> in</c><00:13:34.880><c> it</c>

00:13:36.470 --> 00:13:36.480 align:start position:0%
double hyphen in it
 

00:13:36.480 --> 00:13:38.790 align:start position:0%
double hyphen in it
so<00:13:36.720><c> this</c><00:13:36.880><c> created</c><00:13:37.600><c> a</c><00:13:37.760><c> configuration</c><00:13:38.399><c> file</c>

00:13:38.790 --> 00:13:38.800 align:start position:0%
so this created a configuration file
 

00:13:38.800 --> 00:13:40.030 align:start position:0%
so this created a configuration file
called

00:13:40.030 --> 00:13:40.040 align:start position:0%
called
 

00:13:40.040 --> 00:13:42.629 align:start position:0%
called
tsconfig.json<00:13:41.279><c> with</c><00:13:41.440><c> these</c><00:13:41.680><c> settings</c>

00:13:42.629 --> 00:13:42.639 align:start position:0%
tsconfig.json with these settings
 

00:13:42.639 --> 00:13:45.430 align:start position:0%
tsconfig.json with these settings
so<00:13:42.800><c> let's</c><00:13:43.040><c> close</c><00:13:43.279><c> the</c><00:13:43.440><c> terminal</c><00:13:43.839><c> window</c><00:13:44.399><c> and</c>

00:13:45.430 --> 00:13:45.440 align:start position:0%
so let's close the terminal window and
 

00:13:45.440 --> 00:13:48.150 align:start position:0%
so let's close the terminal window and
open<00:13:45.760><c> ts</c><00:13:46.079><c> config</c><00:13:46.480><c> right</c><00:13:46.720><c> here</c><00:13:47.760><c> so</c><00:13:47.920><c> in</c><00:13:48.000><c> this</c>

00:13:48.150 --> 00:13:48.160 align:start position:0%
open ts config right here so in this
 

00:13:48.160 --> 00:13:50.150 align:start position:0%
open ts config right here so in this
file<00:13:48.399><c> we</c><00:13:48.560><c> have</c><00:13:48.639><c> a</c><00:13:48.720><c> number</c><00:13:48.959><c> of</c><00:13:49.120><c> settings</c><00:13:49.600><c> and</c><00:13:50.000><c> as</c>

00:13:50.150 --> 00:13:50.160 align:start position:0%
file we have a number of settings and as
 

00:13:50.160 --> 00:13:52.389 align:start position:0%
file we have a number of settings and as
you<00:13:50.320><c> can</c><00:13:50.480><c> see</c><00:13:51.040><c> most</c><00:13:51.279><c> of</c><00:13:51.440><c> these</c><00:13:51.680><c> are</c><00:13:51.920><c> commented</c>

00:13:52.389 --> 00:13:52.399 align:start position:0%
you can see most of these are commented
 

00:13:52.399 --> 00:13:54.150 align:start position:0%
you can see most of these are commented
out<00:13:52.560><c> by</c><00:13:52.720><c> default</c><00:13:53.199><c> we're</c><00:13:53.440><c> only</c><00:13:53.600><c> going</c><00:13:53.760><c> to</c><00:13:53.839><c> use</c><00:13:54.079><c> a</c>

00:13:54.150 --> 00:13:54.160 align:start position:0%
out by default we're only going to use a
 

00:13:54.160 --> 00:13:56.389 align:start position:0%
out by default we're only going to use a
handful<00:13:54.560><c> of</c><00:13:54.639><c> them</c><00:13:54.880><c> so</c><00:13:55.360><c> don't</c><00:13:55.600><c> be</c><00:13:55.760><c> intimidated</c>

00:13:56.389 --> 00:13:56.399 align:start position:0%
handful of them so don't be intimidated
 

00:13:56.399 --> 00:13:58.389 align:start position:0%
handful of them so don't be intimidated
by<00:13:56.959><c> all</c><00:13:57.040><c> these</c><00:13:57.279><c> settings</c><00:13:57.920><c> you</c><00:13:58.000><c> don't</c><00:13:58.240><c> have</c><00:13:58.320><c> to</c>

00:13:58.389 --> 00:13:58.399 align:start position:0%
by all these settings you don't have to
 

00:13:58.399 --> 00:14:00.470 align:start position:0%
by all these settings you don't have to
learn<00:13:58.639><c> all</c><00:13:58.800><c> of</c><00:13:58.959><c> them</c><00:13:59.199><c> in</c><00:13:59.279><c> fact</c><00:13:59.760><c> nobody</c><00:14:00.240><c> knows</c>

00:14:00.470 --> 00:14:00.480 align:start position:0%
learn all of them in fact nobody knows
 

00:14:00.480 --> 00:14:01.829 align:start position:0%
learn all of them in fact nobody knows
all<00:14:00.639><c> of</c><00:14:00.720><c> them</c><00:14:01.040><c> i</c><00:14:01.120><c> don't</c><00:14:01.279><c> know</c><00:14:01.360><c> all</c><00:14:01.519><c> of</c><00:14:01.600><c> them</c>

00:14:01.829 --> 00:14:01.839 align:start position:0%
all of them i don't know all of them
 

00:14:01.839 --> 00:14:03.990 align:start position:0%
all of them i don't know all of them
either<00:14:02.320><c> now</c><00:14:02.560><c> in</c><00:14:02.639><c> case</c><00:14:02.800><c> you're</c><00:14:03.040><c> curious</c><00:14:03.920><c> in</c>

00:14:03.990 --> 00:14:04.000 align:start position:0%
either now in case you're curious in
 

00:14:04.000 --> 00:14:05.829 align:start position:0%
either now in case you're curious in
front<00:14:04.240><c> of</c><00:14:04.320><c> each</c><00:14:04.560><c> setting</c><00:14:04.880><c> you</c><00:14:04.959><c> can</c><00:14:05.120><c> see</c><00:14:05.680><c> a</c>

00:14:05.829 --> 00:14:05.839 align:start position:0%
front of each setting you can see a
 

00:14:05.839 --> 00:14:08.550 align:start position:0%
front of each setting you can see a
description<00:14:06.720><c> of</c><00:14:06.880><c> what</c><00:14:07.040><c> that</c><00:14:07.279><c> setting</c><00:14:07.600><c> is</c><00:14:07.760><c> for</c>

00:14:08.550 --> 00:14:08.560 align:start position:0%
description of what that setting is for
 

00:14:08.560 --> 00:14:09.910 align:start position:0%
description of what that setting is for
so<00:14:08.800><c> let's</c><00:14:08.959><c> talk</c><00:14:09.120><c> about</c><00:14:09.279><c> a</c><00:14:09.360><c> few</c><00:14:09.600><c> of</c><00:14:09.680><c> them</c><00:14:09.839><c> in</c>

00:14:09.910 --> 00:14:09.920 align:start position:0%
so let's talk about a few of them in
 

00:14:09.920 --> 00:14:12.470 align:start position:0%
so let's talk about a few of them in
this<00:14:10.079><c> lesson</c><00:14:10.959><c> the</c><00:14:11.120><c> first</c><00:14:11.360><c> one</c><00:14:11.519><c> is</c><00:14:11.680><c> target</c>

00:14:12.470 --> 00:14:12.480 align:start position:0%
this lesson the first one is target
 

00:14:12.480 --> 00:14:14.310 align:start position:0%
this lesson the first one is target
which<00:14:12.720><c> specifies</c><00:14:13.600><c> the</c><00:14:13.760><c> version</c><00:14:14.079><c> of</c>

00:14:14.310 --> 00:14:14.320 align:start position:0%
which specifies the version of
 

00:14:14.320 --> 00:14:16.710 align:start position:0%
which specifies the version of
javascript<00:14:15.279><c> that</c><00:14:15.440><c> the</c><00:14:15.600><c> typescript</c><00:14:16.160><c> compiler</c>

00:14:16.710 --> 00:14:16.720 align:start position:0%
javascript that the typescript compiler
 

00:14:16.720 --> 00:14:19.189 align:start position:0%
javascript that the typescript compiler
is<00:14:16.800><c> going</c><00:14:16.880><c> to</c><00:14:17.040><c> generate</c><00:14:18.000><c> so</c><00:14:18.160><c> this</c><00:14:18.399><c> is</c><00:14:18.480><c> set</c><00:14:18.720><c> to</c>

00:14:19.189 --> 00:14:19.199 align:start position:0%
is going to generate so this is set to
 

00:14:19.199 --> 00:14:21.990 align:start position:0%
is going to generate so this is set to
es<00:14:19.600><c> 2016</c><00:14:20.399><c> which</c><00:14:20.639><c> is</c><00:14:20.720><c> an</c><00:14:20.880><c> old</c><00:14:21.120><c> standard</c><00:14:21.600><c> and</c>

00:14:21.990 --> 00:14:22.000 align:start position:0%
es 2016 which is an old standard and
 

00:14:22.000 --> 00:14:23.829 align:start position:0%
es 2016 which is an old standard and
it's<00:14:22.160><c> been</c><00:14:22.399><c> implemented</c><00:14:22.959><c> in</c><00:14:23.199><c> all</c><00:14:23.360><c> browsers</c>

00:14:23.829 --> 00:14:23.839 align:start position:0%
it's been implemented in all browsers
 

00:14:23.839 --> 00:14:25.990 align:start position:0%
it's been implemented in all browsers
out<00:14:24.000><c> there</c><00:14:24.639><c> now</c><00:14:25.040><c> depending</c><00:14:25.519><c> on</c><00:14:25.680><c> where</c><00:14:25.839><c> you</c>

00:14:25.990 --> 00:14:26.000 align:start position:0%
out there now depending on where you
 

00:14:26.000 --> 00:14:27.750 align:start position:0%
out there now depending on where you
want<00:14:26.079><c> to</c><00:14:26.160><c> deploy</c><00:14:26.480><c> your</c><00:14:26.639><c> application</c><00:14:27.440><c> you</c><00:14:27.600><c> can</c>

00:14:27.750 --> 00:14:27.760 align:start position:0%
want to deploy your application you can
 

00:14:27.760 --> 00:14:29.990 align:start position:0%
want to deploy your application you can
use<00:14:28.000><c> a</c><00:14:28.079><c> higher</c><00:14:28.399><c> target</c><00:14:29.040><c> and</c><00:14:29.360><c> that</c><00:14:29.680><c> often</c>

00:14:29.990 --> 00:14:30.000 align:start position:0%
use a higher target and that often
 

00:14:30.000 --> 00:14:33.030 align:start position:0%
use a higher target and that often
results<00:14:30.560><c> in</c><00:14:30.800><c> shorter</c><00:14:31.440><c> and</c><00:14:31.600><c> less</c><00:14:31.760><c> concise</c><00:14:32.320><c> code</c>

00:14:33.030 --> 00:14:33.040 align:start position:0%
results in shorter and less concise code
 

00:14:33.040 --> 00:14:36.069 align:start position:0%
results in shorter and less concise code
so<00:14:33.680><c> if</c><00:14:33.839><c> we</c><00:14:33.920><c> remove</c><00:14:34.240><c> this</c><00:14:34.480><c> value</c><00:14:35.279><c> and</c><00:14:35.440><c> press</c>

00:14:36.069 --> 00:14:36.079 align:start position:0%
so if we remove this value and press
 

00:14:36.079 --> 00:14:38.870 align:start position:0%
so if we remove this value and press
ctrl<00:14:36.800><c> and</c><00:14:36.959><c> space</c><00:14:37.760><c> we</c><00:14:37.920><c> can</c><00:14:38.079><c> see</c><00:14:38.320><c> all</c><00:14:38.560><c> valid</c>

00:14:38.870 --> 00:14:38.880 align:start position:0%
ctrl and space we can see all valid
 

00:14:38.880 --> 00:14:43.030 align:start position:0%
ctrl and space we can see all valid
values<00:14:39.360><c> so</c><00:14:39.519><c> we</c><00:14:39.680><c> have</c><00:14:40.079><c> yes</c><00:14:40.399><c> 2015</c><00:14:41.279><c> 16</c><00:14:42.000><c> 17</c><00:14:42.480><c> 18</c><00:14:42.880><c> and</c>

00:14:43.030 --> 00:14:43.040 align:start position:0%
values so we have yes 2015 16 17 18 and
 

00:14:43.040 --> 00:14:44.710 align:start position:0%
values so we have yes 2015 16 17 18 and
so<00:14:43.199><c> on</c><00:14:43.760><c> now</c><00:14:43.920><c> in</c><00:14:44.000><c> this</c><00:14:44.160><c> lesson</c><00:14:44.480><c> i'm</c><00:14:44.560><c> going</c><00:14:44.639><c> to</c>

00:14:44.710 --> 00:14:44.720 align:start position:0%
so on now in this lesson i'm going to
 

00:14:44.720 --> 00:14:47.829 align:start position:0%
so on now in this lesson i'm going to
leave<00:14:44.959><c> this</c><00:14:45.120><c> at</c><00:14:45.519><c> yes</c><00:14:45.839><c> 2016</c><00:14:46.880><c> because</c><00:14:47.360><c> this</c><00:14:47.600><c> is</c>

00:14:47.829 --> 00:14:47.839 align:start position:0%
leave this at yes 2016 because this is
 

00:14:47.839 --> 00:14:49.590 align:start position:0%
leave this at yes 2016 because this is
the<00:14:48.000><c> safest</c><00:14:48.399><c> option</c><00:14:48.720><c> for</c><00:14:48.959><c> all</c><00:14:49.199><c> browser</c>

00:14:49.590 --> 00:14:49.600 align:start position:0%
the safest option for all browser
 

00:14:49.600 --> 00:14:51.590 align:start position:0%
the safest option for all browser
applications<00:14:50.240><c> out</c><00:14:50.399><c> there</c><00:14:50.800><c> but</c><00:14:51.040><c> again</c>

00:14:51.590 --> 00:14:51.600 align:start position:0%
applications out there but again
 

00:14:51.600 --> 00:14:53.110 align:start position:0%
applications out there but again
depending<00:14:52.079><c> on</c><00:14:52.320><c> where</c><00:14:52.480><c> you</c><00:14:52.639><c> want</c><00:14:52.720><c> to</c><00:14:52.800><c> deploy</c>

00:14:53.110 --> 00:14:53.120 align:start position:0%
depending on where you want to deploy
 

00:14:53.120 --> 00:14:55.189 align:start position:0%
depending on where you want to deploy
your<00:14:53.279><c> application</c><00:14:53.839><c> and</c><00:14:54.320><c> how</c><00:14:54.480><c> much</c><00:14:54.720><c> of</c><00:14:54.880><c> older</c>

00:14:55.189 --> 00:14:55.199 align:start position:0%
your application and how much of older
 

00:14:55.199 --> 00:14:57.269 align:start position:0%
your application and how much of older
browsers<00:14:55.600><c> you</c><00:14:55.760><c> want</c><00:14:55.839><c> to</c><00:14:56.000><c> support</c><00:14:56.639><c> you</c><00:14:56.800><c> can</c><00:14:56.959><c> use</c>

00:14:57.269 --> 00:14:57.279 align:start position:0%
browsers you want to support you can use
 

00:14:57.279 --> 00:14:58.870 align:start position:0%
browsers you want to support you can use
a<00:14:57.360><c> higher</c><00:14:57.600><c> target</c>

00:14:58.870 --> 00:14:58.880 align:start position:0%
a higher target
 

00:14:58.880 --> 00:15:01.430 align:start position:0%
a higher target
now<00:14:59.600><c> the</c><00:14:59.760><c> next</c><00:15:00.000><c> setting</c><00:15:00.240><c> we</c><00:15:00.399><c> have</c><00:15:00.560><c> here</c><00:15:00.880><c> is</c>

00:15:01.430 --> 00:15:01.440 align:start position:0%
now the next setting we have here is
 

00:15:01.440 --> 00:15:03.910 align:start position:0%
now the next setting we have here is
module<00:15:01.839><c> which</c><00:15:02.079><c> is</c><00:15:02.160><c> set</c><00:15:02.320><c> to</c><00:15:02.560><c> common</c><00:15:02.880><c> js</c><00:15:03.680><c> we'll</c>

00:15:03.910 --> 00:15:03.920 align:start position:0%
module which is set to common js we'll
 

00:15:03.920 --> 00:15:05.590 align:start position:0%
module which is set to common js we'll
talk<00:15:04.160><c> about</c><00:15:04.320><c> this</c><00:15:04.560><c> setting</c><00:15:05.120><c> later</c><00:15:05.360><c> in</c><00:15:05.519><c> the</c>

00:15:05.590 --> 00:15:05.600 align:start position:0%
talk about this setting later in the
 

00:15:05.600 --> 00:15:07.910 align:start position:0%
talk about this setting later in the
course<00:15:06.000><c> where</c><00:15:06.160><c> we</c><00:15:06.320><c> talk</c><00:15:06.560><c> about</c><00:15:06.880><c> modules</c><00:15:07.680><c> now</c>

00:15:07.910 --> 00:15:07.920 align:start position:0%
course where we talk about modules now
 

00:15:07.920 --> 00:15:10.150 align:start position:0%
course where we talk about modules now
in<00:15:08.000><c> this</c><00:15:08.160><c> section</c><00:15:08.560><c> in</c><00:15:08.720><c> the</c><00:15:08.880><c> module</c><00:15:09.279><c> section</c><00:15:10.000><c> we</c>

00:15:10.150 --> 00:15:10.160 align:start position:0%
in this section in the module section we
 

00:15:10.160 --> 00:15:11.990 align:start position:0%
in this section in the module section we
have<00:15:10.320><c> a</c><00:15:10.399><c> setting</c><00:15:10.639><c> called</c><00:15:11.120><c> there</c><00:15:11.760><c> which</c>

00:15:11.990 --> 00:15:12.000 align:start position:0%
have a setting called there which
 

00:15:12.000 --> 00:15:14.310 align:start position:0%
have a setting called there which
specifies<00:15:12.560><c> the</c><00:15:12.800><c> directory</c><00:15:13.360><c> that</c><00:15:13.600><c> contains</c>

00:15:14.310 --> 00:15:14.320 align:start position:0%
specifies the directory that contains
 

00:15:14.320 --> 00:15:16.389 align:start position:0%
specifies the directory that contains
our<00:15:14.480><c> source</c><00:15:14.800><c> files</c><00:15:15.600><c> so</c><00:15:15.760><c> let's</c><00:15:16.000><c> remove</c><00:15:16.240><c> the</c>

00:15:16.389 --> 00:15:16.399 align:start position:0%
our source files so let's remove the
 

00:15:16.399 --> 00:15:19.189 align:start position:0%
our source files so let's remove the
comment<00:15:17.040><c> by</c><00:15:17.199><c> pressing</c><00:15:18.000><c> command</c><00:15:18.480><c> and</c><00:15:18.639><c> slash</c><00:15:19.040><c> on</c>

00:15:19.189 --> 00:15:19.199 align:start position:0%
comment by pressing command and slash on
 

00:15:19.199 --> 00:15:22.150 align:start position:0%
comment by pressing command and slash on
mac<00:15:19.519><c> or</c><00:15:19.920><c> ctrl</c><00:15:20.320><c> n</c><00:15:20.480><c> slash</c><00:15:20.800><c> on</c><00:15:20.959><c> windows</c>

00:15:22.150 --> 00:15:22.160 align:start position:0%
mac or ctrl n slash on windows
 

00:15:22.160 --> 00:15:25.030 align:start position:0%
mac or ctrl n slash on windows
so<00:15:22.320><c> this</c><00:15:22.560><c> is</c><00:15:22.639><c> set</c><00:15:23.120><c> to</c><00:15:23.360><c> period</c><00:15:24.240><c> slash</c><00:15:24.800><c> which</c>

00:15:25.030 --> 00:15:25.040 align:start position:0%
so this is set to period slash which
 

00:15:25.040 --> 00:15:27.509 align:start position:0%
so this is set to period slash which
represents<00:15:25.839><c> the</c><00:15:26.000><c> current</c><00:15:26.240><c> folder</c><00:15:27.040><c> now</c><00:15:27.279><c> by</c>

00:15:27.509 --> 00:15:27.519 align:start position:0%
represents the current folder now by
 

00:15:27.519 --> 00:15:29.749 align:start position:0%
represents the current folder now by
convention<00:15:28.320><c> we</c><00:15:28.480><c> often</c><00:15:28.720><c> put</c><00:15:28.959><c> our</c><00:15:29.120><c> source</c><00:15:29.440><c> code</c>

00:15:29.749 --> 00:15:29.759 align:start position:0%
convention we often put our source code
 

00:15:29.759 --> 00:15:31.509 align:start position:0%
convention we often put our source code
into<00:15:30.000><c> a</c><00:15:30.079><c> separate</c><00:15:30.480><c> folder</c>

00:15:31.509 --> 00:15:31.519 align:start position:0%
into a separate folder
 

00:15:31.519 --> 00:15:33.590 align:start position:0%
into a separate folder
so<00:15:31.920><c> back</c><00:15:32.079><c> to</c><00:15:32.160><c> our</c><00:15:32.320><c> project</c><00:15:32.639><c> panel</c><00:15:33.360><c> let's</c>

00:15:33.590 --> 00:15:33.600 align:start position:0%
so back to our project panel let's
 

00:15:33.600 --> 00:15:36.790 align:start position:0%
so back to our project panel let's
create<00:15:33.920><c> a</c><00:15:34.000><c> new</c><00:15:34.160><c> folder</c><00:15:34.560><c> here</c><00:15:35.120><c> called</c><00:15:35.440><c> src</c>

00:15:36.790 --> 00:15:36.800 align:start position:0%
create a new folder here called src
 

00:15:36.800 --> 00:15:40.790 align:start position:0%
create a new folder here called src
and<00:15:36.959><c> then</c><00:15:37.519><c> move</c><00:15:37.920><c> index.ts</c><00:15:39.199><c> right</c><00:15:39.360><c> here</c><00:15:40.079><c> okay</c>

00:15:40.790 --> 00:15:40.800 align:start position:0%
and then move index.ts right here okay
 

00:15:40.800 --> 00:15:42.870 align:start position:0%
and then move index.ts right here okay
now<00:15:41.040><c> i'm</c><00:15:41.120><c> going</c><00:15:41.199><c> to</c><00:15:41.279><c> delete</c><00:15:41.600><c> index.js</c><00:15:42.720><c> we</c>

00:15:42.870 --> 00:15:42.880 align:start position:0%
now i'm going to delete index.js we
 

00:15:42.880 --> 00:15:45.110 align:start position:0%
now i'm going to delete index.js we
don't<00:15:43.040><c> need</c><00:15:43.279><c> it</c><00:15:43.360><c> for</c><00:15:43.519><c> now</c><00:15:44.240><c> okay</c>

00:15:45.110 --> 00:15:45.120 align:start position:0%
don't need it for now okay
 

00:15:45.120 --> 00:15:47.990 align:start position:0%
don't need it for now okay
so<00:15:45.279><c> now</c><00:15:45.519><c> we're</c><00:15:45.680><c> going</c><00:15:45.759><c> to</c><00:15:45.839><c> change</c><00:15:46.320><c> router</c><00:15:46.880><c> to</c>

00:15:47.990 --> 00:15:48.000 align:start position:0%
so now we're going to change router to
 

00:15:48.000 --> 00:15:50.470 align:start position:0%
so now we're going to change router to
period<00:15:48.480><c> slash</c><00:15:49.199><c> source</c>

00:15:50.470 --> 00:15:50.480 align:start position:0%
period slash source
 

00:15:50.480 --> 00:15:52.949 align:start position:0%
period slash source
now<00:15:50.639><c> we</c><00:15:50.800><c> have</c><00:15:51.040><c> a</c><00:15:51.120><c> similar</c><00:15:51.519><c> setting</c><00:15:51.839><c> here</c>

00:15:52.949 --> 00:15:52.959 align:start position:0%
now we have a similar setting here
 

00:15:52.959 --> 00:15:56.790 align:start position:0%
now we have a similar setting here
under<00:15:54.160><c> the</c><00:15:54.399><c> emit</c><00:15:55.120><c> section</c><00:15:56.000><c> that</c><00:15:56.320><c> setting</c><00:15:56.639><c> is</c>

00:15:56.790 --> 00:15:56.800 align:start position:0%
under the emit section that setting is
 

00:15:56.800 --> 00:15:58.389 align:start position:0%
under the emit section that setting is
called<00:15:57.440><c> outer</c>

00:15:58.389 --> 00:15:58.399 align:start position:0%
called outer
 

00:15:58.399 --> 00:16:00.150 align:start position:0%
called outer
and<00:15:58.560><c> this</c><00:15:58.720><c> specifies</c><00:15:59.360><c> the</c><00:15:59.519><c> directory</c><00:16:00.079><c> that</c>

00:16:00.150 --> 00:16:00.160 align:start position:0%
and this specifies the directory that
 

00:16:00.160 --> 00:16:02.870 align:start position:0%
and this specifies the directory that
will<00:16:00.399><c> contain</c><00:16:01.120><c> our</c><00:16:01.360><c> javascript</c><00:16:02.000><c> files</c>

00:16:02.870 --> 00:16:02.880 align:start position:0%
will contain our javascript files
 

00:16:02.880 --> 00:16:06.150 align:start position:0%
will contain our javascript files
so<00:16:03.440><c> let's</c><00:16:03.680><c> enable</c><00:16:04.079><c> this</c><00:16:04.480><c> and</c><00:16:05.120><c> change</c><00:16:05.360><c> it</c><00:16:05.519><c> to</c>

00:16:06.150 --> 00:16:06.160 align:start position:0%
so let's enable this and change it to
 

00:16:06.160 --> 00:16:08.470 align:start position:0%
so let's enable this and change it to
dist<00:16:06.880><c> so</c><00:16:07.040><c> when</c><00:16:07.199><c> we</c><00:16:07.360><c> compile</c><00:16:07.839><c> our</c><00:16:08.000><c> code</c><00:16:08.240><c> using</c>

00:16:08.470 --> 00:16:08.480 align:start position:0%
dist so when we compile our code using
 

00:16:08.480 --> 00:16:10.629 align:start position:0%
dist so when we compile our code using
the<00:16:08.560><c> typescript</c><00:16:09.040><c> compiler</c><00:16:09.839><c> our</c><00:16:10.079><c> javascript</c>

00:16:10.629 --> 00:16:10.639 align:start position:0%
the typescript compiler our javascript
 

00:16:10.639 --> 00:16:13.110 align:start position:0%
the typescript compiler our javascript
files<00:16:10.959><c> are</c><00:16:11.040><c> going</c><00:16:11.199><c> to</c><00:16:11.279><c> be</c><00:16:11.440><c> stored</c><00:16:12.079><c> in</c><00:16:12.320><c> this</c><00:16:12.720><c> or</c>

00:16:13.110 --> 00:16:13.120 align:start position:0%
files are going to be stored in this or
 

00:16:13.120 --> 00:16:15.350 align:start position:0%
files are going to be stored in this or
distributable<00:16:13.839><c> folder</c><00:16:14.480><c> okay</c>

00:16:15.350 --> 00:16:15.360 align:start position:0%
distributable folder okay
 

00:16:15.360 --> 00:16:17.350 align:start position:0%
distributable folder okay
now<00:16:15.600><c> here</c><00:16:15.759><c> we</c><00:16:15.920><c> have</c><00:16:16.240><c> another</c><00:16:16.639><c> useful</c><00:16:17.040><c> setting</c>

00:16:17.350 --> 00:16:17.360 align:start position:0%
now here we have another useful setting
 

00:16:17.360 --> 00:16:20.230 align:start position:0%
now here we have another useful setting
called<00:16:17.920><c> remove</c><00:16:18.320><c> comments</c><00:16:19.360><c> so</c>

00:16:20.230 --> 00:16:20.240 align:start position:0%
called remove comments so
 

00:16:20.240 --> 00:16:22.230 align:start position:0%
called remove comments so
if<00:16:20.320><c> we</c><00:16:20.560><c> enable</c><00:16:20.959><c> this</c><00:16:21.600><c> the</c><00:16:21.759><c> typescript</c>

00:16:22.230 --> 00:16:22.240 align:start position:0%
if we enable this the typescript
 

00:16:22.240 --> 00:16:24.069 align:start position:0%
if we enable this the typescript
compiler<00:16:22.800><c> is</c><00:16:22.880><c> going</c><00:16:22.959><c> to</c><00:16:23.120><c> remove</c><00:16:23.680><c> all</c><00:16:23.839><c> the</c>

00:16:24.069 --> 00:16:24.079 align:start position:0%
compiler is going to remove all the
 

00:16:24.079 --> 00:16:25.590 align:start position:0%
compiler is going to remove all the
comments<00:16:24.399><c> that</c><00:16:24.560><c> we</c><00:16:24.720><c> add</c><00:16:24.880><c> in</c><00:16:25.040><c> our</c><00:16:25.120><c> typescript</c>

00:16:25.590 --> 00:16:25.600 align:start position:0%
comments that we add in our typescript
 

00:16:25.600 --> 00:16:27.749 align:start position:0%
comments that we add in our typescript
code<00:16:26.079><c> so</c><00:16:26.240><c> the</c><00:16:26.399><c> generated</c><00:16:26.880><c> javascript</c><00:16:27.360><c> code</c><00:16:27.600><c> is</c>

00:16:27.749 --> 00:16:27.759 align:start position:0%
code so the generated javascript code is
 

00:16:27.759 --> 00:16:29.670 align:start position:0%
code so the generated javascript code is
going<00:16:27.839><c> to</c><00:16:27.920><c> be</c><00:16:28.079><c> shorter</c><00:16:28.639><c> okay</c>

00:16:29.670 --> 00:16:29.680 align:start position:0%
going to be shorter okay
 

00:16:29.680 --> 00:16:31.269 align:start position:0%
going to be shorter okay
now<00:16:30.000><c> another</c><00:16:30.320><c> useful</c><00:16:30.720><c> setting</c><00:16:30.959><c> in</c><00:16:31.040><c> this</c>

00:16:31.269 --> 00:16:31.279 align:start position:0%
now another useful setting in this
 

00:16:31.279 --> 00:16:34.550 align:start position:0%
now another useful setting in this
section<00:16:31.680><c> is</c><00:16:32.160><c> no</c><00:16:32.399><c> emit</c><00:16:33.120><c> on</c><00:16:33.360><c> error</c><00:16:34.079><c> so</c><00:16:34.320><c> by</c>

00:16:34.550 --> 00:16:34.560 align:start position:0%
section is no emit on error so by
 

00:16:34.560 --> 00:16:36.870 align:start position:0%
section is no emit on error so by
default<00:16:35.040><c> when</c><00:16:35.279><c> we</c><00:16:35.360><c> compile</c><00:16:35.759><c> our</c><00:16:36.000><c> code</c><00:16:36.480><c> even</c><00:16:36.720><c> if</c>

00:16:36.870 --> 00:16:36.880 align:start position:0%
default when we compile our code even if
 

00:16:36.880 --> 00:16:38.470 align:start position:0%
default when we compile our code even if
you<00:16:36.959><c> have</c><00:16:37.199><c> errors</c><00:16:37.519><c> in</c><00:16:37.680><c> our</c><00:16:37.759><c> code</c><00:16:38.320><c> the</c>

00:16:38.470 --> 00:16:38.480 align:start position:0%
you have errors in our code the
 

00:16:38.480 --> 00:16:40.389 align:start position:0%
you have errors in our code the
typescript<00:16:38.959><c> compiler</c><00:16:39.440><c> will</c><00:16:39.680><c> still</c><00:16:40.000><c> generate</c>

00:16:40.389 --> 00:16:40.399 align:start position:0%
typescript compiler will still generate
 

00:16:40.399 --> 00:16:42.389 align:start position:0%
typescript compiler will still generate
javascript<00:16:40.959><c> files</c><00:16:41.440><c> this</c><00:16:41.680><c> is</c><00:16:41.839><c> probably</c><00:16:42.160><c> not</c>

00:16:42.389 --> 00:16:42.399 align:start position:0%
javascript files this is probably not
 

00:16:42.399 --> 00:16:44.389 align:start position:0%
javascript files this is probably not
what<00:16:42.560><c> we</c><00:16:42.720><c> want</c><00:16:43.040><c> so</c><00:16:43.199><c> the</c><00:16:43.360><c> best</c><00:16:43.680><c> option</c><00:16:44.000><c> is</c><00:16:44.160><c> to</c>

00:16:44.389 --> 00:16:44.399 align:start position:0%
what we want so the best option is to
 

00:16:44.399 --> 00:16:46.310 align:start position:0%
what we want so the best option is to
always<00:16:44.720><c> enable</c><00:16:45.120><c> this</c><00:16:45.279><c> setting</c><00:16:45.920><c> so</c><00:16:46.079><c> if</c><00:16:46.160><c> you</c>

00:16:46.310 --> 00:16:46.320 align:start position:0%
always enable this setting so if you
 

00:16:46.320 --> 00:16:48.150 align:start position:0%
always enable this setting so if you
have<00:16:46.480><c> any</c><00:16:46.639><c> mistakes</c><00:16:47.120><c> in</c><00:16:47.279><c> our</c><00:16:47.440><c> code</c><00:16:47.920><c> the</c>

00:16:48.150 --> 00:16:48.160 align:start position:0%
have any mistakes in our code the
 

00:16:48.160 --> 00:16:49.590 align:start position:0%
have any mistakes in our code the
typescript<00:16:48.560><c> compiler</c><00:16:49.040><c> is</c><00:16:49.199><c> not</c><00:16:49.360><c> going</c><00:16:49.519><c> to</c>

00:16:49.590 --> 00:16:49.600 align:start position:0%
typescript compiler is not going to
 

00:16:49.600 --> 00:16:52.470 align:start position:0%
typescript compiler is not going to
generate<00:16:50.079><c> any</c><00:16:50.320><c> javascript</c><00:16:50.880><c> files</c><00:16:51.360><c> okay</c>

00:16:52.470 --> 00:16:52.480 align:start position:0%
generate any javascript files okay
 

00:16:52.480 --> 00:16:54.150 align:start position:0%
generate any javascript files okay
now<00:16:52.720><c> with</c><00:16:52.880><c> this</c><00:16:53.040><c> configuration</c><00:16:53.759><c> file</c><00:16:54.000><c> in</c>

00:16:54.150 --> 00:16:54.160 align:start position:0%
now with this configuration file in
 

00:16:54.160 --> 00:16:55.030 align:start position:0%
now with this configuration file in
place

00:16:55.030 --> 00:16:55.040 align:start position:0%
place
 

00:16:55.040 --> 00:16:57.110 align:start position:0%
place
now<00:16:55.279><c> we</c><00:16:55.360><c> can</c><00:16:55.519><c> go</c><00:16:55.680><c> back</c><00:16:55.839><c> to</c><00:16:55.920><c> the</c><00:16:56.000><c> terminal</c><00:16:56.880><c> and</c>

00:16:57.110 --> 00:16:57.120 align:start position:0%
now we can go back to the terminal and
 

00:16:57.120 --> 00:16:59.910 align:start position:0%
now we can go back to the terminal and
compile<00:16:57.600><c> our</c><00:16:57.759><c> code</c><00:16:58.160><c> simply</c><00:16:58.480><c> by</c><00:16:58.720><c> running</c><00:16:59.040><c> tsc</c>

00:16:59.910 --> 00:16:59.920 align:start position:0%
compile our code simply by running tsc
 

00:16:59.920 --> 00:17:01.590 align:start position:0%
compile our code simply by running tsc
without<00:17:00.320><c> any</c><00:17:00.560><c> arguments</c><00:17:01.120><c> so</c><00:17:01.279><c> we</c><00:17:01.360><c> don't</c><00:17:01.519><c> have</c>

00:17:01.590 --> 00:17:01.600 align:start position:0%
without any arguments so we don't have
 

00:17:01.600 --> 00:17:03.670 align:start position:0%
without any arguments so we don't have
to<00:17:01.759><c> type</c><00:17:02.240><c> index.ts</c>

00:17:03.670 --> 00:17:03.680 align:start position:0%
to type index.ts
 

00:17:03.680 --> 00:17:06.309 align:start position:0%
to type index.ts
we<00:17:03.839><c> just</c><00:17:04.000><c> run</c><00:17:04.240><c> tse</c><00:17:05.120><c> and</c><00:17:05.280><c> this</c><00:17:05.439><c> will</c><00:17:05.679><c> compile</c>

00:17:06.309 --> 00:17:06.319 align:start position:0%
we just run tse and this will compile
 

00:17:06.319 --> 00:17:08.390 align:start position:0%
we just run tse and this will compile
all<00:17:06.559><c> typescript</c><00:17:07.120><c> files</c><00:17:07.439><c> in</c><00:17:07.520><c> this</c><00:17:07.679><c> project</c>

00:17:08.390 --> 00:17:08.400 align:start position:0%
all typescript files in this project
 

00:17:08.400 --> 00:17:10.390 align:start position:0%
all typescript files in this project
take<00:17:08.640><c> a</c><00:17:08.720><c> look</c><00:17:09.439><c> all</c><00:17:09.600><c> right</c>

00:17:10.390 --> 00:17:10.400 align:start position:0%
take a look all right
 

00:17:10.400 --> 00:17:12.949 align:start position:0%
take a look all right
now<00:17:10.880><c> we</c><00:17:11.039><c> have</c><00:17:11.120><c> a</c><00:17:11.199><c> new</c><00:17:11.439><c> folder</c><00:17:12.079><c> called</c><00:17:12.400><c> disk</c>

00:17:12.949 --> 00:17:12.959 align:start position:0%
now we have a new folder called disk
 

00:17:12.959 --> 00:17:15.829 align:start position:0%
now we have a new folder called disk
that<00:17:13.199><c> contains</c><00:17:14.079><c> our</c><00:17:14.240><c> javascript</c><00:17:14.799><c> file</c>

00:17:15.829 --> 00:17:15.839 align:start position:0%
that contains our javascript file
 

00:17:15.839 --> 00:17:18.710 align:start position:0%
that contains our javascript file
so<00:17:16.000><c> this</c><00:17:16.240><c> was</c><00:17:16.400><c> the</c><00:17:16.559><c> basics</c><00:17:17.039><c> of</c><00:17:17.360><c> ts</c><00:17:17.679><c> config</c><00:17:18.559><c> as</c>

00:17:18.710 --> 00:17:18.720 align:start position:0%
so this was the basics of ts config as
 

00:17:18.720 --> 00:17:20.630 align:start position:0%
so this was the basics of ts config as
we<00:17:18.880><c> go</c><00:17:18.959><c> through</c><00:17:19.199><c> the</c><00:17:19.280><c> course</c><00:17:19.839><c> we'll</c><00:17:20.079><c> explore</c>

00:17:20.630 --> 00:17:20.640 align:start position:0%
we go through the course we'll explore
 

00:17:20.640 --> 00:17:24.990 align:start position:0%
we go through the course we'll explore
more<00:17:20.880><c> of</c><00:17:20.959><c> this</c><00:17:21.120><c> useful</c><00:17:21.520><c> settings</c>

00:17:24.990 --> 00:17:25.000 align:start position:0%
 
 

00:17:25.000 --> 00:17:30.230 align:start position:0%
 
[Music]

00:17:30.230 --> 00:17:30.240 align:start position:0%
 
 

00:17:30.240 --> 00:17:32.070 align:start position:0%
 
all<00:17:30.320><c> right</c><00:17:30.480><c> now</c><00:17:30.720><c> let's</c><00:17:30.880><c> see</c><00:17:31.200><c> how</c><00:17:31.360><c> we</c><00:17:31.440><c> can</c><00:17:31.600><c> debug</c>

00:17:32.070 --> 00:17:32.080 align:start position:0%
all right now let's see how we can debug
 

00:17:32.080 --> 00:17:34.789 align:start position:0%
all right now let's see how we can debug
our<00:17:32.320><c> typescript</c><00:17:32.880><c> applications</c><00:17:33.520><c> in</c><00:17:33.679><c> vs</c><00:17:34.000><c> code</c>

00:17:34.789 --> 00:17:34.799 align:start position:0%
our typescript applications in vs code
 

00:17:34.799 --> 00:17:36.950 align:start position:0%
our typescript applications in vs code
this<00:17:35.039><c> is</c><00:17:35.200><c> very</c><00:17:35.440><c> useful</c><00:17:35.919><c> when</c><00:17:36.160><c> things</c><00:17:36.400><c> go</c><00:17:36.640><c> wrong</c>

00:17:36.950 --> 00:17:36.960 align:start position:0%
this is very useful when things go wrong
 

00:17:36.960 --> 00:17:39.590 align:start position:0%
this is very useful when things go wrong
and<00:17:37.280><c> our</c><00:17:37.520><c> code</c><00:17:37.840><c> doesn't</c><00:17:38.160><c> work</c><00:17:38.400><c> as</c><00:17:38.559><c> expected</c><00:17:39.440><c> so</c>

00:17:39.590 --> 00:17:39.600 align:start position:0%
and our code doesn't work as expected so
 

00:17:39.600 --> 00:17:42.230 align:start position:0%
and our code doesn't work as expected so
we<00:17:39.679><c> can</c><00:17:39.840><c> run</c><00:17:40.080><c> our</c><00:17:40.240><c> code</c><00:17:40.799><c> line</c><00:17:41.039><c> by</c><00:17:41.280><c> line</c><00:17:41.840><c> and</c><00:17:42.000><c> see</c>

00:17:42.230 --> 00:17:42.240 align:start position:0%
we can run our code line by line and see
 

00:17:42.240 --> 00:17:44.390 align:start position:0%
we can run our code line by line and see
what<00:17:42.480><c> exactly</c><00:17:42.960><c> happens</c><00:17:43.440><c> under</c><00:17:43.679><c> the</c><00:17:43.840><c> hood</c>

00:17:44.390 --> 00:17:44.400 align:start position:0%
what exactly happens under the hood
 

00:17:44.400 --> 00:17:46.470 align:start position:0%
what exactly happens under the hood
there<00:17:44.559><c> are</c><00:17:44.640><c> a</c><00:17:44.720><c> few</c><00:17:44.960><c> steps</c><00:17:45.200><c> we</c><00:17:45.280><c> need</c><00:17:45.440><c> to</c><00:17:45.600><c> follow</c>

00:17:46.470 --> 00:17:46.480 align:start position:0%
there are a few steps we need to follow
 

00:17:46.480 --> 00:17:49.270 align:start position:0%
there are a few steps we need to follow
first<00:17:46.720><c> we</c><00:17:46.880><c> go</c><00:17:47.039><c> to</c><00:17:47.120><c> tsconfig.json</c>

00:17:49.270 --> 00:17:49.280 align:start position:0%
first we go to tsconfig.json
 

00:17:49.280 --> 00:17:52.870 align:start position:0%
first we go to tsconfig.json
and<00:17:49.760><c> here</c><00:17:49.919><c> in</c><00:17:50.000><c> the</c><00:17:50.160><c> emit</c><00:17:50.480><c> section</c><00:17:51.360><c> we</c><00:17:51.600><c> enable</c>

00:17:52.870 --> 00:17:52.880 align:start position:0%
and here in the emit section we enable
 

00:17:52.880 --> 00:17:55.190 align:start position:0%
and here in the emit section we enable
the<00:17:53.120><c> source</c><00:17:53.440><c> map</c><00:17:53.679><c> feature</c><00:17:54.320><c> so</c><00:17:54.559><c> a</c><00:17:54.640><c> source</c><00:17:54.960><c> map</c>

00:17:55.190 --> 00:17:55.200 align:start position:0%
the source map feature so a source map
 

00:17:55.200 --> 00:17:57.590 align:start position:0%
the source map feature so a source map
is<00:17:55.360><c> a</c><00:17:55.440><c> file</c><00:17:55.760><c> that</c><00:17:56.000><c> specifies</c><00:17:56.799><c> how</c><00:17:57.120><c> each</c><00:17:57.360><c> line</c>

00:17:57.590 --> 00:17:57.600 align:start position:0%
is a file that specifies how each line
 

00:17:57.600 --> 00:18:00.070 align:start position:0%
is a file that specifies how each line
of<00:17:57.760><c> our</c><00:17:57.919><c> typescript</c><00:17:58.400><c> code</c><00:17:59.120><c> maps</c><00:17:59.600><c> to</c><00:17:59.760><c> the</c>

00:18:00.070 --> 00:18:00.080 align:start position:0%
of our typescript code maps to the
 

00:18:00.080 --> 00:18:02.070 align:start position:0%
of our typescript code maps to the
generated<00:18:00.640><c> javascript</c><00:18:01.280><c> code</c><00:18:01.679><c> let</c><00:18:01.840><c> me</c><00:18:01.919><c> show</c>

00:18:02.070 --> 00:18:02.080 align:start position:0%
generated javascript code let me show
 

00:18:02.080 --> 00:18:02.789 align:start position:0%
generated javascript code let me show
you

00:18:02.789 --> 00:18:02.799 align:start position:0%
you
 

00:18:02.799 --> 00:18:05.430 align:start position:0%
you
so<00:18:03.360><c> back</c><00:18:03.520><c> to</c><00:18:03.679><c> the</c><00:18:03.760><c> terminal</c><00:18:04.480><c> let's</c><00:18:04.799><c> recompile</c>

00:18:05.430 --> 00:18:05.440 align:start position:0%
so back to the terminal let's recompile
 

00:18:05.440 --> 00:18:06.789 align:start position:0%
so back to the terminal let's recompile
our<00:18:05.600><c> code</c>

00:18:06.789 --> 00:18:06.799 align:start position:0%
our code
 

00:18:06.799 --> 00:18:08.549 align:start position:0%
our code
good<00:18:07.600><c> now</c>

00:18:08.549 --> 00:18:08.559 align:start position:0%
good now
 

00:18:08.559 --> 00:18:10.549 align:start position:0%
good now
look<00:18:08.720><c> into</c><00:18:08.880><c> this</c><00:18:09.120><c> folder</c><00:18:09.760><c> we</c><00:18:09.919><c> have</c><00:18:10.000><c> a</c><00:18:10.080><c> new</c><00:18:10.240><c> file</c>

00:18:10.549 --> 00:18:10.559 align:start position:0%
look into this folder we have a new file
 

00:18:10.559 --> 00:18:11.789 align:start position:0%
look into this folder we have a new file
called

00:18:11.789 --> 00:18:11.799 align:start position:0%
called
 

00:18:11.799 --> 00:18:14.470 align:start position:0%
called
index.js.map<00:18:12.960><c> this</c><00:18:13.200><c> is</c><00:18:13.280><c> our</c><00:18:13.520><c> source</c><00:18:13.760><c> map</c>

00:18:14.470 --> 00:18:14.480 align:start position:0%
index.js.map this is our source map
 

00:18:14.480 --> 00:18:16.230 align:start position:0%
index.js.map this is our source map
so<00:18:14.640><c> if</c><00:18:14.799><c> you</c><00:18:14.880><c> look</c><00:18:15.039><c> over</c><00:18:15.280><c> here</c>

00:18:16.230 --> 00:18:16.240 align:start position:0%
so if you look over here
 

00:18:16.240 --> 00:18:19.430 align:start position:0%
so if you look over here
you<00:18:16.400><c> see</c><00:18:16.559><c> some</c><00:18:16.799><c> code</c><00:18:17.600><c> that</c><00:18:17.760><c> specifies</c><00:18:18.960><c> how</c><00:18:19.280><c> our</c>

00:18:19.430 --> 00:18:19.440 align:start position:0%
you see some code that specifies how our
 

00:18:19.440 --> 00:18:22.070 align:start position:0%
you see some code that specifies how our
typescript<00:18:19.919><c> code</c><00:18:20.640><c> maps</c><00:18:21.280><c> to</c><00:18:21.440><c> our</c><00:18:21.520><c> javascript</c>

00:18:22.070 --> 00:18:22.080 align:start position:0%
typescript code maps to our javascript
 

00:18:22.080 --> 00:18:23.510 align:start position:0%
typescript code maps to our javascript
code<00:18:22.480><c> now</c><00:18:22.640><c> this</c><00:18:22.880><c> is</c><00:18:22.960><c> not</c><00:18:23.120><c> for</c><00:18:23.280><c> us</c><00:18:23.360><c> to</c>

00:18:23.510 --> 00:18:23.520 align:start position:0%
code now this is not for us to
 

00:18:23.520 --> 00:18:25.430 align:start position:0%
code now this is not for us to
understand<00:18:24.240><c> this</c><00:18:24.480><c> is</c><00:18:24.559><c> for</c><00:18:24.720><c> debuggers</c><00:18:25.280><c> it's</c>

00:18:25.430 --> 00:18:25.440 align:start position:0%
understand this is for debuggers it's
 

00:18:25.440 --> 00:18:27.110 align:start position:0%
understand this is for debuggers it's
for<00:18:25.600><c> machines</c><00:18:26.080><c> okay</c>

00:18:27.110 --> 00:18:27.120 align:start position:0%
for machines okay
 

00:18:27.120 --> 00:18:29.590 align:start position:0%
for machines okay
so<00:18:27.760><c> let's</c><00:18:28.000><c> close</c><00:18:28.240><c> this</c><00:18:28.480><c> file</c>

00:18:29.590 --> 00:18:29.600 align:start position:0%
so let's close this file
 

00:18:29.600 --> 00:18:30.549 align:start position:0%
so let's close this file
now

00:18:30.549 --> 00:18:30.559 align:start position:0%
now
 

00:18:30.559 --> 00:18:32.549 align:start position:0%
now
to<00:18:30.720><c> make</c><00:18:30.880><c> debugging</c><00:18:31.280><c> more</c><00:18:31.520><c> interesting</c><00:18:32.400><c> let's</c>

00:18:32.549 --> 00:18:32.559 align:start position:0%
to make debugging more interesting let's
 

00:18:32.559 --> 00:18:36.150 align:start position:0%
to make debugging more interesting let's
go<00:18:32.720><c> to</c><00:18:32.960><c> index.ts</c><00:18:34.080><c> and</c><00:18:34.799><c> write</c><00:18:35.039><c> some</c><00:18:35.280><c> logic</c><00:18:36.000><c> we</c>

00:18:36.150 --> 00:18:36.160 align:start position:0%
go to index.ts and write some logic we
 

00:18:36.160 --> 00:18:37.590 align:start position:0%
go to index.ts and write some logic we
can<00:18:36.320><c> say</c><00:18:36.559><c> if</c><00:18:36.799><c> age</c>

00:18:37.590 --> 00:18:37.600 align:start position:0%
can say if age
 

00:18:37.600 --> 00:18:39.669 align:start position:0%
can say if age
is<00:18:37.760><c> less</c><00:18:37.919><c> than</c><00:18:38.160><c> 50</c>

00:18:39.669 --> 00:18:39.679 align:start position:0%
is less than 50
 

00:18:39.679 --> 00:18:42.549 align:start position:0%
is less than 50
we're<00:18:39.840><c> going</c><00:18:39.919><c> to</c><00:18:40.080><c> add</c><00:18:40.799><c> 10</c><00:18:41.039><c> to</c><00:18:41.200><c> it</c><00:18:41.600><c> okay</c>

00:18:42.549 --> 00:18:42.559 align:start position:0%
we're going to add 10 to it okay
 

00:18:42.559 --> 00:18:44.070 align:start position:0%
we're going to add 10 to it okay
now<00:18:42.799><c> we're</c><00:18:42.960><c> going</c><00:18:43.039><c> to</c><00:18:43.120><c> click</c><00:18:43.520><c> on</c><00:18:43.679><c> the</c><00:18:43.760><c> first</c>

00:18:44.070 --> 00:18:44.080 align:start position:0%
now we're going to click on the first
 

00:18:44.080 --> 00:18:46.950 align:start position:0%
now we're going to click on the first
line<00:18:44.320><c> to</c><00:18:44.480><c> insert</c><00:18:45.200><c> a</c><00:18:45.440><c> breakpoint</c><00:18:46.400><c> so</c><00:18:46.559><c> when</c><00:18:46.720><c> we</c>

00:18:46.950 --> 00:18:46.960 align:start position:0%
line to insert a breakpoint so when we
 

00:18:46.960 --> 00:18:49.430 align:start position:0%
line to insert a breakpoint so when we
start<00:18:47.200><c> debugging</c><00:18:47.919><c> the</c><00:18:48.080><c> execution</c><00:18:48.720><c> stops</c>

00:18:49.430 --> 00:18:49.440 align:start position:0%
start debugging the execution stops
 

00:18:49.440 --> 00:18:51.669 align:start position:0%
start debugging the execution stops
right<00:18:49.760><c> at</c><00:18:49.840><c> this</c><00:18:50.080><c> line</c><00:18:50.400><c> at</c><00:18:50.480><c> this</c><00:18:50.720><c> breakpoint</c>

00:18:51.669 --> 00:18:51.679 align:start position:0%
right at this line at this breakpoint
 

00:18:51.679 --> 00:18:53.669 align:start position:0%
right at this line at this breakpoint
from<00:18:51.840><c> this</c><00:18:52.080><c> point</c><00:18:52.320><c> forward</c><00:18:52.799><c> we</c><00:18:52.960><c> can</c><00:18:53.280><c> execute</c>

00:18:53.669 --> 00:18:53.679 align:start position:0%
from this point forward we can execute
 

00:18:53.679 --> 00:18:56.390 align:start position:0%
from this point forward we can execute
our<00:18:53.919><c> code</c><00:18:54.480><c> line</c><00:18:54.720><c> by</c><00:18:54.960><c> line</c><00:18:55.440><c> okay</c>

00:18:56.390 --> 00:18:56.400 align:start position:0%
our code line by line okay
 

00:18:56.400 --> 00:18:57.270 align:start position:0%
our code line by line okay
now

00:18:57.270 --> 00:18:57.280 align:start position:0%
now
 

00:18:57.280 --> 00:18:59.750 align:start position:0%
now
we<00:18:57.440><c> go</c><00:18:57.600><c> to</c><00:18:57.679><c> the</c><00:18:57.760><c> debug</c><00:18:58.160><c> panel</c>

00:18:59.750 --> 00:18:59.760 align:start position:0%
we go to the debug panel
 

00:18:59.760 --> 00:19:02.950 align:start position:0%
we go to the debug panel
and<00:18:59.919><c> click</c><00:19:00.240><c> on</c><00:19:00.799><c> create</c><00:19:01.600><c> and</c><00:19:01.760><c> launch</c><00:19:02.240><c> the</c><00:19:02.480><c> json</c>

00:19:02.950 --> 00:19:02.960 align:start position:0%
and click on create and launch the json
 

00:19:02.960 --> 00:19:04.390 align:start position:0%
and click on create and launch the json
file

00:19:04.390 --> 00:19:04.400 align:start position:0%
file
 

00:19:04.400 --> 00:19:06.549 align:start position:0%
file
now<00:19:04.640><c> from</c><00:19:04.799><c> this</c><00:19:05.039><c> drop</c><00:19:05.280><c> down</c><00:19:05.679><c> we</c><00:19:05.919><c> select</c>

00:19:06.549 --> 00:19:06.559 align:start position:0%
now from this drop down we select
 

00:19:06.559 --> 00:19:09.430 align:start position:0%
now from this drop down we select
node.js<00:19:07.919><c> and</c><00:19:08.080><c> this</c><00:19:08.320><c> creates</c><00:19:08.720><c> a</c><00:19:08.799><c> new</c><00:19:09.039><c> file</c>

00:19:09.430 --> 00:19:09.440 align:start position:0%
node.js and this creates a new file
 

00:19:09.440 --> 00:19:11.830 align:start position:0%
node.js and this creates a new file
called<00:19:10.000><c> launch.json</c><00:19:10.880><c> in</c><00:19:11.039><c> our</c><00:19:11.200><c> project</c><00:19:11.679><c> i'll</c>

00:19:11.830 --> 00:19:11.840 align:start position:0%
called launch.json in our project i'll
 

00:19:11.840 --> 00:19:13.430 align:start position:0%
called launch.json in our project i'll
show<00:19:12.000><c> you</c><00:19:12.080><c> that</c><00:19:12.240><c> in</c><00:19:12.320><c> a</c><00:19:12.400><c> second</c>

00:19:13.430 --> 00:19:13.440 align:start position:0%
show you that in a second
 

00:19:13.440 --> 00:19:15.430 align:start position:0%
show you that in a second
so<00:19:14.000><c> this</c><00:19:14.160><c> is</c><00:19:14.320><c> a</c><00:19:14.400><c> json</c><00:19:14.799><c> file</c><00:19:15.039><c> with</c><00:19:15.200><c> some</c>

00:19:15.430 --> 00:19:15.440 align:start position:0%
so this is a json file with some
 

00:19:15.440 --> 00:19:18.070 align:start position:0%
so this is a json file with some
configuration<00:19:16.320><c> that</c><00:19:16.480><c> tells</c><00:19:16.799><c> vs</c><00:19:17.120><c> code</c><00:19:17.679><c> how</c><00:19:17.919><c> to</c>

00:19:18.070 --> 00:19:18.080 align:start position:0%
configuration that tells vs code how to
 

00:19:18.080 --> 00:19:19.830 align:start position:0%
configuration that tells vs code how to
debug<00:19:18.480><c> this</c><00:19:18.720><c> application</c>

00:19:19.830 --> 00:19:19.840 align:start position:0%
debug this application
 

00:19:19.840 --> 00:19:22.230 align:start position:0%
debug this application
so<00:19:20.000><c> we're</c><00:19:20.240><c> going</c><00:19:20.320><c> to</c><00:19:20.400><c> use</c><00:19:20.960><c> node</c><00:19:21.760><c> to</c><00:19:21.919><c> launch</c>

00:19:22.230 --> 00:19:22.240 align:start position:0%
so we're going to use node to launch
 

00:19:22.240 --> 00:19:24.789 align:start position:0%
so we're going to use node to launch
this<00:19:22.480><c> program</c><00:19:23.360><c> and</c><00:19:23.679><c> here</c><00:19:23.840><c> we</c><00:19:24.000><c> have</c><00:19:24.160><c> a</c><00:19:24.240><c> label</c>

00:19:24.789 --> 00:19:24.799 align:start position:0%
this program and here we have a label
 

00:19:24.799 --> 00:19:26.549 align:start position:0%
this program and here we have a label
called<00:19:25.280><c> launch</c><00:19:25.679><c> program</c><00:19:26.000><c> which</c><00:19:26.240><c> you</c><00:19:26.320><c> will</c><00:19:26.400><c> see</c>

00:19:26.549 --> 00:19:26.559 align:start position:0%
called launch program which you will see
 

00:19:26.559 --> 00:19:27.909 align:start position:0%
called launch program which you will see
in<00:19:26.640><c> a</c><00:19:26.720><c> second</c>

00:19:27.909 --> 00:19:27.919 align:start position:0%
in a second
 

00:19:27.919 --> 00:19:30.630 align:start position:0%
in a second
and<00:19:28.400><c> we</c><00:19:28.559><c> can</c><00:19:28.640><c> see</c><00:19:28.799><c> our</c><00:19:29.039><c> program</c><00:19:29.440><c> starts</c><00:19:30.320><c> here</c>

00:19:30.630 --> 00:19:30.640 align:start position:0%
and we can see our program starts here
 

00:19:30.640 --> 00:19:33.669 align:start position:0%
and we can see our program starts here
so<00:19:30.960><c> in</c><00:19:31.039><c> the</c><00:19:31.200><c> source</c><00:19:31.440><c> folder</c><00:19:31.760><c> we</c><00:19:31.919><c> have</c><00:19:32.240><c> index.ts</c>

00:19:33.669 --> 00:19:33.679 align:start position:0%
so in the source folder we have index.ts
 

00:19:33.679 --> 00:19:36.150 align:start position:0%
so in the source folder we have index.ts
and<00:19:34.000><c> our</c><00:19:34.240><c> output</c><00:19:34.640><c> files</c><00:19:34.960><c> are</c><00:19:35.120><c> stored</c>

00:19:36.150 --> 00:19:36.160 align:start position:0%
and our output files are stored
 

00:19:36.160 --> 00:19:38.630 align:start position:0%
and our output files are stored
in<00:19:36.320><c> our</c><00:19:36.400><c> workspace</c><00:19:36.960><c> on</c><00:19:37.120><c> our</c><00:19:37.280><c> project</c><00:19:38.080><c> in</c><00:19:38.240><c> files</c>

00:19:38.630 --> 00:19:38.640 align:start position:0%
in our workspace on our project in files
 

00:19:38.640 --> 00:19:40.789 align:start position:0%
in our workspace on our project in files
with<00:19:38.960><c> the</c><00:19:39.120><c> js</c><00:19:39.600><c> extension</c>

00:19:40.789 --> 00:19:40.799 align:start position:0%
with the js extension
 

00:19:40.799 --> 00:19:43.190 align:start position:0%
with the js extension
now<00:19:41.039><c> here</c><00:19:41.200><c> we</c><00:19:41.280><c> need</c><00:19:41.440><c> to</c><00:19:41.520><c> add</c><00:19:42.080><c> one</c><00:19:42.240><c> more</c><00:19:42.480><c> setting</c>

00:19:43.190 --> 00:19:43.200 align:start position:0%
now here we need to add one more setting
 

00:19:43.200 --> 00:19:46.150 align:start position:0%
now here we need to add one more setting
it's<00:19:43.440><c> called</c><00:19:44.080><c> pre-launch</c><00:19:45.120><c> task</c>

00:19:46.150 --> 00:19:46.160 align:start position:0%
it's called pre-launch task
 

00:19:46.160 --> 00:19:47.590 align:start position:0%
it's called pre-launch task
we're<00:19:46.320><c> going</c><00:19:46.400><c> to</c><00:19:46.480><c> set</c><00:19:46.640><c> this</c><00:19:46.799><c> to</c><00:19:46.960><c> a</c><00:19:47.120><c> string</c><00:19:47.440><c> with</c>

00:19:47.590 --> 00:19:47.600 align:start position:0%
we're going to set this to a string with
 

00:19:47.600 --> 00:19:48.630 align:start position:0%
we're going to set this to a string with
this<00:19:47.760><c> value</c>

00:19:48.630 --> 00:19:48.640 align:start position:0%
this value
 

00:19:48.640 --> 00:19:49.750 align:start position:0%
this value
tsc

00:19:49.750 --> 00:19:49.760 align:start position:0%
tsc
 

00:19:49.760 --> 00:19:53.990 align:start position:0%
tsc
colon<00:19:50.480><c> space</c><00:19:51.200><c> build</c><00:19:52.080><c> space</c><00:19:52.640><c> hyphen</c><00:19:53.360><c> space</c>

00:19:53.990 --> 00:19:54.000 align:start position:0%
colon space build space hyphen space
 

00:19:54.000 --> 00:19:56.390 align:start position:0%
colon space build space hyphen space
tsconfig.json

00:19:56.390 --> 00:19:56.400 align:start position:0%
tsconfig.json
 

00:19:56.400 --> 00:19:58.390 align:start position:0%
tsconfig.json
make<00:19:56.559><c> sure</c><00:19:56.720><c> to</c><00:19:56.880><c> type</c><00:19:57.120><c> this</c><00:19:57.280><c> out</c><00:19:57.600><c> exactly</c><00:19:58.160><c> as</c><00:19:58.320><c> i</c>

00:19:58.390 --> 00:19:58.400 align:start position:0%
make sure to type this out exactly as i
 

00:19:58.400 --> 00:20:00.310 align:start position:0%
make sure to type this out exactly as i
have<00:19:58.480><c> shown</c><00:19:58.720><c> you</c><00:19:58.880><c> here</c><00:19:59.440><c> all</c><00:19:59.600><c> these</c><00:19:59.840><c> spaces</c>

00:20:00.310 --> 00:20:00.320 align:start position:0%
have shown you here all these spaces
 

00:20:00.320 --> 00:20:01.590 align:start position:0%
have shown you here all these spaces
matter<00:20:00.799><c> okay</c>

00:20:01.590 --> 00:20:01.600 align:start position:0%
matter okay
 

00:20:01.600 --> 00:20:03.510 align:start position:0%
matter okay
so<00:20:01.760><c> with</c><00:20:01.919><c> this</c><00:20:02.159><c> setting</c><00:20:02.720><c> we</c><00:20:02.880><c> are</c><00:20:02.960><c> telling</c><00:20:03.200><c> vs</c>

00:20:03.510 --> 00:20:03.520 align:start position:0%
so with this setting we are telling vs
 

00:20:03.520 --> 00:20:05.990 align:start position:0%
so with this setting we are telling vs
code<00:20:03.919><c> to</c><00:20:04.080><c> use</c><00:20:04.240><c> the</c><00:20:04.400><c> typescript</c><00:20:04.880><c> compiler</c><00:20:05.760><c> to</c>

00:20:05.990 --> 00:20:06.000 align:start position:0%
code to use the typescript compiler to
 

00:20:06.000 --> 00:20:07.750 align:start position:0%
code to use the typescript compiler to
build<00:20:06.240><c> our</c><00:20:06.480><c> application</c><00:20:07.280><c> using</c><00:20:07.600><c> this</c>

00:20:07.750 --> 00:20:07.760 align:start position:0%
build our application using this
 

00:20:07.760 --> 00:20:09.830 align:start position:0%
build our application using this
configuration<00:20:08.480><c> file</c><00:20:08.960><c> okay</c>

00:20:09.830 --> 00:20:09.840 align:start position:0%
configuration file okay
 

00:20:09.840 --> 00:20:10.870 align:start position:0%
configuration file okay
now

00:20:10.870 --> 00:20:10.880 align:start position:0%
now
 

00:20:10.880 --> 00:20:13.430 align:start position:0%
now
we<00:20:11.039><c> go</c><00:20:11.200><c> back</c><00:20:11.360><c> to</c><00:20:11.520><c> index.es</c><00:20:12.799><c> and</c><00:20:13.039><c> to</c><00:20:13.200><c> start</c>

00:20:13.430 --> 00:20:13.440 align:start position:0%
we go back to index.es and to start
 

00:20:13.440 --> 00:20:16.149 align:start position:0%
we go back to index.es and to start
debugging<00:20:13.919><c> we</c><00:20:14.000><c> can</c><00:20:14.159><c> go</c><00:20:14.320><c> to</c><00:20:14.480><c> the</c><00:20:14.559><c> debug</c><00:20:14.960><c> panel</c>

00:20:16.149 --> 00:20:16.159 align:start position:0%
debugging we can go to the debug panel
 

00:20:16.159 --> 00:20:19.029 align:start position:0%
debugging we can go to the debug panel
and<00:20:16.799><c> click</c><00:20:17.200><c> on</c><00:20:17.440><c> launch</c><00:20:18.000><c> program</c><00:20:18.559><c> this</c><00:20:18.720><c> is</c><00:20:18.799><c> the</c>

00:20:19.029 --> 00:20:19.039 align:start position:0%
and click on launch program this is the
 

00:20:19.039 --> 00:20:21.110 align:start position:0%
and click on launch program this is the
label<00:20:19.360><c> that</c><00:20:19.520><c> i</c><00:20:19.600><c> just</c><00:20:19.840><c> showed</c><00:20:20.080><c> you</c><00:20:20.720><c> now</c><00:20:20.880><c> look</c><00:20:21.039><c> at</c>

00:20:21.110 --> 00:20:21.120 align:start position:0%
label that i just showed you now look at
 

00:20:21.120 --> 00:20:23.750 align:start position:0%
label that i just showed you now look at
the<00:20:21.280><c> shortcut</c><00:20:22.080><c> it's</c><00:20:22.400><c> f5</c><00:20:22.880><c> i</c><00:20:23.039><c> always</c><00:20:23.360><c> prefer</c><00:20:23.679><c> to</c>

00:20:23.750 --> 00:20:23.760 align:start position:0%
the shortcut it's f5 i always prefer to
 

00:20:23.760 --> 00:20:27.590 align:start position:0%
the shortcut it's f5 i always prefer to
use<00:20:23.919><c> shortcuts</c><00:20:24.880><c> so</c><00:20:25.120><c> let's</c><00:20:25.280><c> start</c><00:20:25.760><c> debugging</c>

00:20:27.590 --> 00:20:27.600 align:start position:0%
use shortcuts so let's start debugging
 

00:20:27.600 --> 00:20:30.230 align:start position:0%
use shortcuts so let's start debugging
good<00:20:28.320><c> now</c><00:20:28.559><c> our</c><00:20:28.720><c> program</c><00:20:29.120><c> started</c><00:20:29.600><c> and</c><00:20:30.080><c> the</c>

00:20:30.230 --> 00:20:30.240 align:start position:0%
good now our program started and the
 

00:20:30.240 --> 00:20:32.630 align:start position:0%
good now our program started and the
execution<00:20:30.880><c> stopped</c><00:20:31.600><c> right</c><00:20:31.840><c> on</c><00:20:31.919><c> this</c><00:20:32.159><c> line</c><00:20:32.559><c> at</c>

00:20:32.630 --> 00:20:32.640 align:start position:0%
execution stopped right on this line at
 

00:20:32.640 --> 00:20:34.870 align:start position:0%
execution stopped right on this line at
this<00:20:32.880><c> breakpoint</c><00:20:34.000><c> now</c><00:20:34.240><c> on</c><00:20:34.320><c> the</c><00:20:34.480><c> top</c><00:20:34.640><c> we</c><00:20:34.720><c> have</c><00:20:34.799><c> a</c>

00:20:34.870 --> 00:20:34.880 align:start position:0%
this breakpoint now on the top we have a
 

00:20:34.880 --> 00:20:37.110 align:start position:0%
this breakpoint now on the top we have a
bunch<00:20:35.120><c> of</c><00:20:35.280><c> tools</c><00:20:35.600><c> for</c><00:20:35.760><c> executing</c><00:20:36.240><c> our</c><00:20:36.400><c> code</c><00:20:36.960><c> we</c>

00:20:37.110 --> 00:20:37.120 align:start position:0%
bunch of tools for executing our code we
 

00:20:37.120 --> 00:20:40.070 align:start position:0%
bunch of tools for executing our code we
have<00:20:37.280><c> step</c><00:20:37.600><c> over</c><00:20:38.000><c> for</c><00:20:38.240><c> executing</c><00:20:39.039><c> one</c><00:20:39.280><c> line</c>

00:20:40.070 --> 00:20:40.080 align:start position:0%
have step over for executing one line
 

00:20:40.080 --> 00:20:42.310 align:start position:0%
have step over for executing one line
we<00:20:40.240><c> have</c><00:20:40.400><c> step</c><00:20:40.799><c> into</c><00:20:41.280><c> we're</c><00:20:41.600><c> stepping</c><00:20:42.000><c> into</c><00:20:42.240><c> a</c>

00:20:42.310 --> 00:20:42.320 align:start position:0%
we have step into we're stepping into a
 

00:20:42.320 --> 00:20:43.909 align:start position:0%
we have step into we're stepping into a
function<00:20:42.880><c> currently</c><00:20:43.280><c> we</c><00:20:43.360><c> don't</c><00:20:43.520><c> have</c><00:20:43.679><c> any</c>

00:20:43.909 --> 00:20:43.919 align:start position:0%
function currently we don't have any
 

00:20:43.919 --> 00:20:45.990 align:start position:0%
function currently we don't have any
functions<00:20:44.320><c> so</c><00:20:44.720><c> it's</c><00:20:44.880><c> not</c><00:20:45.039><c> useful</c>

00:20:45.990 --> 00:20:46.000 align:start position:0%
functions so it's not useful
 

00:20:46.000 --> 00:20:48.789 align:start position:0%
functions so it's not useful
we<00:20:46.159><c> also</c><00:20:46.400><c> have</c><00:20:46.799><c> step</c><00:20:47.200><c> out</c><00:20:47.520><c> this</c><00:20:47.760><c> is</c><00:20:47.919><c> useful</c><00:20:48.320><c> for</c>

00:20:48.789 --> 00:20:48.799 align:start position:0%
we also have step out this is useful for
 

00:20:48.799 --> 00:20:51.029 align:start position:0%
we also have step out this is useful for
stepping<00:20:49.280><c> out</c><00:20:49.440><c> to</c><00:20:49.600><c> the</c><00:20:49.919><c> function</c><00:20:50.720><c> we</c><00:20:50.880><c> have</c>

00:20:51.029 --> 00:20:51.039 align:start position:0%
stepping out to the function we have
 

00:20:51.039 --> 00:20:53.669 align:start position:0%
stepping out to the function we have
restart<00:20:51.919><c> and</c><00:20:52.640><c> stop</c>

00:20:53.669 --> 00:20:53.679 align:start position:0%
restart and stop
 

00:20:53.679 --> 00:20:55.590 align:start position:0%
restart and stop
so<00:20:53.919><c> in</c><00:20:54.000><c> the</c><00:20:54.159><c> tooltip</c><00:20:54.480><c> that</c><00:20:54.640><c> you</c><00:20:54.799><c> see</c>

00:20:55.590 --> 00:20:55.600 align:start position:0%
so in the tooltip that you see
 

00:20:55.600 --> 00:20:57.590 align:start position:0%
so in the tooltip that you see
in<00:20:55.679><c> front</c><00:20:56.000><c> of</c><00:20:56.080><c> each</c><00:20:56.400><c> tool</c><00:20:56.960><c> you</c><00:20:57.120><c> can</c><00:20:57.280><c> see</c><00:20:57.440><c> the</c>

00:20:57.590 --> 00:20:57.600 align:start position:0%
in front of each tool you can see the
 

00:20:57.600 --> 00:20:59.830 align:start position:0%
in front of each tool you can see the
shortcut<00:20:58.400><c> so</c><00:20:58.559><c> the</c><00:20:58.720><c> shortcut</c><00:20:59.200><c> for</c><00:20:59.440><c> stepping</c>

00:20:59.830 --> 00:20:59.840 align:start position:0%
shortcut so the shortcut for stepping
 

00:20:59.840 --> 00:21:03.029 align:start position:0%
shortcut so the shortcut for stepping
over<00:21:00.000><c> a</c><00:21:00.159><c> line</c><00:21:00.400><c> is</c><00:21:00.640><c> f10</c><00:21:01.280><c> let's</c><00:21:01.520><c> press</c><00:21:01.679><c> that</c>

00:21:03.029 --> 00:21:03.039 align:start position:0%
over a line is f10 let's press that
 

00:21:03.039 --> 00:21:04.950 align:start position:0%
over a line is f10 let's press that
so<00:21:03.200><c> this</c><00:21:03.440><c> line</c><00:21:03.600><c> was</c><00:21:03.840><c> executed</c>

00:21:04.950 --> 00:21:04.960 align:start position:0%
so this line was executed
 

00:21:04.960 --> 00:21:06.710 align:start position:0%
so this line was executed
now<00:21:05.360><c> on</c><00:21:05.440><c> the</c><00:21:05.600><c> left</c><00:21:05.840><c> side</c>

00:21:06.710 --> 00:21:06.720 align:start position:0%
now on the left side
 

00:21:06.720 --> 00:21:08.149 align:start position:0%
now on the left side
under<00:21:07.039><c> variables</c>

00:21:08.149 --> 00:21:08.159 align:start position:0%
under variables
 

00:21:08.159 --> 00:21:09.750 align:start position:0%
under variables
you<00:21:08.320><c> can</c><00:21:08.480><c> see</c><00:21:08.720><c> all</c><00:21:08.880><c> the</c><00:21:09.039><c> variables</c><00:21:09.440><c> that</c><00:21:09.600><c> are</c>

00:21:09.750 --> 00:21:09.760 align:start position:0%
you can see all the variables that are
 

00:21:09.760 --> 00:21:12.710 align:start position:0%
you can see all the variables that are
detected<00:21:10.720><c> in</c><00:21:10.799><c> this</c><00:21:10.960><c> debugging</c><00:21:11.440><c> session</c><00:21:12.320><c> so</c>

00:21:12.710 --> 00:21:12.720 align:start position:0%
detected in this debugging session so
 

00:21:12.720 --> 00:21:15.430 align:start position:0%
detected in this debugging session so
under<00:21:13.120><c> local</c><00:21:13.520><c> we</c><00:21:13.679><c> have</c><00:21:14.240><c> age</c><00:21:14.720><c> that</c><00:21:14.960><c> is</c><00:21:15.039><c> set</c><00:21:15.200><c> to</c>

00:21:15.430 --> 00:21:15.440 align:start position:0%
under local we have age that is set to
 

00:21:15.440 --> 00:21:18.390 align:start position:0%
under local we have age that is set to
20.<00:21:16.240><c> as</c><00:21:16.480><c> we</c><00:21:16.720><c> execute</c><00:21:17.120><c> each</c><00:21:17.360><c> line</c><00:21:18.000><c> you'll</c><00:21:18.240><c> see</c>

00:21:18.390 --> 00:21:18.400 align:start position:0%
20. as we execute each line you'll see
 

00:21:18.400 --> 00:21:19.830 align:start position:0%
20. as we execute each line you'll see
the<00:21:18.559><c> value</c><00:21:18.880><c> of</c><00:21:18.960><c> this</c><00:21:19.200><c> variable</c><00:21:19.600><c> getting</c>

00:21:19.830 --> 00:21:19.840 align:start position:0%
the value of this variable getting
 

00:21:19.840 --> 00:21:20.870 align:start position:0%
the value of this variable getting
updated

00:21:20.870 --> 00:21:20.880 align:start position:0%
updated
 

00:21:20.880 --> 00:21:22.149 align:start position:0%
updated
now<00:21:21.120><c> if</c><00:21:21.200><c> there's</c><00:21:21.440><c> something</c><00:21:21.760><c> that</c><00:21:21.919><c> you</c><00:21:22.000><c> don't</c>

00:21:22.149 --> 00:21:22.159 align:start position:0%
now if there's something that you don't
 

00:21:22.159 --> 00:21:24.310 align:start position:0%
now if there's something that you don't
see<00:21:22.400><c> in</c><00:21:22.480><c> the</c><00:21:22.640><c> variables</c><00:21:23.120><c> window</c><00:21:23.760><c> you</c><00:21:23.919><c> can</c><00:21:24.080><c> go</c>

00:21:24.310 --> 00:21:24.320 align:start position:0%
see in the variables window you can go
 

00:21:24.320 --> 00:21:26.549 align:start position:0%
see in the variables window you can go
to<00:21:24.480><c> the</c><00:21:24.640><c> watch</c><00:21:24.960><c> window</c>

00:21:26.549 --> 00:21:26.559 align:start position:0%
to the watch window
 

00:21:26.559 --> 00:21:28.870 align:start position:0%
to the watch window
and<00:21:27.120><c> insert</c><00:21:27.520><c> a</c><00:21:27.600><c> watch</c><00:21:28.320><c> so</c><00:21:28.559><c> we're</c><00:21:28.720><c> going</c><00:21:28.799><c> to</c>

00:21:28.870 --> 00:21:28.880 align:start position:0%
and insert a watch so we're going to
 

00:21:28.880 --> 00:21:32.789 align:start position:0%
and insert a watch so we're going to
watch<00:21:29.520><c> the</c><00:21:29.840><c> age</c><00:21:30.400><c> variable</c><00:21:31.360><c> current</c><00:21:31.679><c> is</c><00:21:31.840><c> 20.</c><00:21:32.640><c> so</c>

00:21:32.789 --> 00:21:32.799 align:start position:0%
watch the age variable current is 20. so
 

00:21:32.799 --> 00:21:34.870 align:start position:0%
watch the age variable current is 20. so
let's<00:21:33.039><c> step</c><00:21:33.280><c> over</c><00:21:33.520><c> this</c><00:21:33.679><c> line</c>

00:21:34.870 --> 00:21:34.880 align:start position:0%
let's step over this line
 

00:21:34.880 --> 00:21:36.789 align:start position:0%
let's step over this line
now<00:21:35.039><c> we're</c><00:21:35.280><c> on</c><00:21:35.440><c> this</c><00:21:35.600><c> line</c><00:21:36.240><c> so</c><00:21:36.400><c> let's</c><00:21:36.559><c> step</c>

00:21:36.789 --> 00:21:36.799 align:start position:0%
now we're on this line so let's step
 

00:21:36.799 --> 00:21:38.470 align:start position:0%
now we're on this line so let's step
over<00:21:37.039><c> this</c><00:21:37.200><c> as</c><00:21:37.360><c> well</c>

00:21:38.470 --> 00:21:38.480 align:start position:0%
over this as well
 

00:21:38.480 --> 00:21:40.390 align:start position:0%
over this as well
now<00:21:38.799><c> hcode</c><00:21:39.200><c> updated</c><00:21:39.679><c> but</c><00:21:39.919><c> because</c><00:21:40.159><c> our</c>

00:21:40.390 --> 00:21:40.400 align:start position:0%
now hcode updated but because our
 

00:21:40.400 --> 00:21:42.230 align:start position:0%
now hcode updated but because our
program<00:21:40.799><c> terminated</c><00:21:41.600><c> we</c><00:21:41.760><c> don't</c><00:21:41.919><c> see</c><00:21:42.080><c> its</c>

00:21:42.230 --> 00:21:42.240 align:start position:0%
program terminated we don't see its
 

00:21:42.240 --> 00:21:44.870 align:start position:0%
program terminated we don't see its
value<00:21:42.559><c> anymore</c><00:21:43.440><c> but</c><00:21:43.600><c> if</c><00:21:43.760><c> you</c><00:21:43.919><c> add</c><00:21:44.320><c> one</c><00:21:44.559><c> extra</c>

00:21:44.870 --> 00:21:44.880 align:start position:0%
value anymore but if you add one extra
 

00:21:44.880 --> 00:21:45.909 align:start position:0%
value anymore but if you add one extra
line<00:21:45.120><c> here</c>

00:21:45.909 --> 00:21:45.919 align:start position:0%
line here
 

00:21:45.919 --> 00:21:48.390 align:start position:0%
line here
let's<00:21:46.080><c> say</c><00:21:46.320><c> console.log</c><00:21:47.440><c> h</c>

00:21:48.390 --> 00:21:48.400 align:start position:0%
let's say console.log h
 

00:21:48.400 --> 00:21:49.669 align:start position:0%
let's say console.log h
let's<00:21:48.559><c> start</c><00:21:48.799><c> the</c><00:21:48.880><c> debugging</c><00:21:49.280><c> session</c><00:21:49.600><c> one</c>

00:21:49.669 --> 00:21:49.679 align:start position:0%
let's start the debugging session one
 

00:21:49.679 --> 00:21:52.630 align:start position:0%
let's start the debugging session one
more<00:21:49.840><c> time</c><00:21:50.080><c> by</c><00:21:50.240><c> pressing</c><00:21:50.640><c> f5</c>

00:21:52.630 --> 00:21:52.640 align:start position:0%
more time by pressing f5
 

00:21:52.640 --> 00:21:57.029 align:start position:0%
more time by pressing f5
now<00:21:53.039><c> step</c><00:21:53.360><c> over</c><00:21:54.080><c> f10</c><00:21:54.559><c> f10</c><00:21:54.960><c> f10</c><00:21:55.679><c> and</c><00:21:55.919><c> now</c><00:21:56.559><c> h</c><00:21:56.880><c> is</c>

00:21:57.029 --> 00:21:57.039 align:start position:0%
now step over f10 f10 f10 and now h is
 

00:21:57.039 --> 00:21:59.350 align:start position:0%
now step over f10 f10 f10 and now h is
30.<00:21:57.520><c> so</c><00:21:57.760><c> this</c><00:21:57.919><c> is</c><00:21:58.080><c> debugging</c><00:21:58.640><c> in</c><00:21:58.799><c> via</c><00:21:59.039><c> score</c>

00:21:59.350 --> 00:21:59.360 align:start position:0%
30. so this is debugging in via score
 

00:21:59.360 --> 00:22:01.590 align:start position:0%
30. so this is debugging in via score
it's<00:21:59.600><c> very</c><00:21:59.840><c> useful</c><00:22:00.480><c> when</c><00:22:00.640><c> things</c><00:22:00.880><c> go</c><00:22:01.120><c> wrong</c><00:22:01.440><c> we</c>

00:22:01.590 --> 00:22:01.600 align:start position:0%
it's very useful when things go wrong we
 

00:22:01.600 --> 00:22:03.990 align:start position:0%
it's very useful when things go wrong we
can<00:22:01.840><c> start</c><00:22:02.080><c> our</c><00:22:02.240><c> program</c><00:22:02.640><c> and</c><00:22:03.120><c> execute</c><00:22:03.600><c> it</c>

00:22:03.990 --> 00:22:04.000 align:start position:0%
can start our program and execute it
 

00:22:04.000 --> 00:22:05.350 align:start position:0%
can start our program and execute it
line<00:22:04.240><c> by</c><00:22:04.480><c> line</c>

00:22:05.350 --> 00:22:05.360 align:start position:0%
line by line
 

00:22:05.360 --> 00:22:06.470 align:start position:0%
line by line
all<00:22:05.520><c> right</c><00:22:05.679><c> now</c><00:22:05.840><c> that</c><00:22:06.000><c> we're</c><00:22:06.159><c> done</c><00:22:06.320><c> with</c>

00:22:06.470 --> 00:22:06.480 align:start position:0%
all right now that we're done with
 

00:22:06.480 --> 00:22:08.230 align:start position:0%
all right now that we're done with
debugging<00:22:07.120><c> we</c><00:22:07.200><c> can</c><00:22:07.360><c> stop</c><00:22:07.600><c> the</c><00:22:07.760><c> debugging</c>

00:22:08.230 --> 00:22:08.240 align:start position:0%
debugging we can stop the debugging
 

00:22:08.240 --> 00:22:10.710 align:start position:0%
debugging we can stop the debugging
session<00:22:08.799><c> right</c><00:22:09.039><c> here</c>

00:22:10.710 --> 00:22:10.720 align:start position:0%
session right here
 

00:22:10.720 --> 00:22:11.990 align:start position:0%
session right here
so<00:22:10.880><c> that</c><00:22:11.120><c> brings</c><00:22:11.360><c> us</c><00:22:11.440><c> to</c><00:22:11.520><c> the</c><00:22:11.600><c> end</c><00:22:11.760><c> of</c><00:22:11.840><c> this</c>

00:22:11.990 --> 00:22:12.000 align:start position:0%
so that brings us to the end of this
 

00:22:12.000 --> 00:22:14.070 align:start position:0%
so that brings us to the end of this
section<00:22:12.799><c> starting</c><00:22:13.120><c> from</c><00:22:13.280><c> the</c><00:22:13.360><c> next</c><00:22:13.600><c> section</c>

00:22:14.070 --> 00:22:14.080 align:start position:0%
section starting from the next section
 

00:22:14.080 --> 00:22:15.510 align:start position:0%
section starting from the next section
we're<00:22:14.240><c> going</c><00:22:14.320><c> to</c><00:22:14.480><c> explore</c><00:22:14.799><c> typescript</c><00:22:15.440><c> in</c>

00:22:15.510 --> 00:22:15.520 align:start position:0%
we're going to explore typescript in
 

00:22:15.520 --> 00:22:17.830 align:start position:0%
we're going to explore typescript in
detail

00:22:17.830 --> 00:22:17.840 align:start position:0%
detail
 

00:22:17.840 --> 00:22:19.830 align:start position:0%
detail
hey<00:22:18.080><c> guys</c><00:22:18.400><c> mosh</c><00:22:18.720><c> here</c><00:22:19.120><c> i</c><00:22:19.200><c> just</c><00:22:19.360><c> wanted</c><00:22:19.600><c> to</c><00:22:19.679><c> let</c>

00:22:19.830 --> 00:22:19.840 align:start position:0%
hey guys mosh here i just wanted to let
 

00:22:19.840 --> 00:22:21.350 align:start position:0%
hey guys mosh here i just wanted to let
you<00:22:20.000><c> know</c><00:22:20.240><c> that</c><00:22:20.400><c> this</c><00:22:20.640><c> tutorial</c><00:22:21.120><c> you</c><00:22:21.280><c> have</c>

00:22:21.350 --> 00:22:21.360 align:start position:0%
you know that this tutorial you have
 

00:22:21.360 --> 00:22:23.669 align:start position:0%
you know that this tutorial you have
been<00:22:21.520><c> watching</c><00:22:22.080><c> is</c><00:22:22.400><c> actually</c><00:22:22.720><c> the</c><00:22:22.960><c> first</c><00:22:23.280><c> hour</c>

00:22:23.669 --> 00:22:23.679 align:start position:0%
been watching is actually the first hour
 

00:22:23.679 --> 00:22:25.990 align:start position:0%
been watching is actually the first hour
of<00:22:23.919><c> my</c><00:22:24.159><c> complete</c><00:22:24.720><c> typescript</c><00:22:25.280><c> course</c><00:22:25.840><c> the</c>

00:22:25.990 --> 00:22:26.000 align:start position:0%
of my complete typescript course the
 

00:22:26.000 --> 00:22:28.230 align:start position:0%
of my complete typescript course the
complete<00:22:26.400><c> course</c><00:22:26.720><c> is</c><00:22:26.880><c> about</c><00:22:27.280><c> 5</c><00:22:27.600><c> hours</c><00:22:27.919><c> long</c>

00:22:28.230 --> 00:22:28.240 align:start position:0%
complete course is about 5 hours long
 

00:22:28.240 --> 00:22:30.549 align:start position:0%
complete course is about 5 hours long
and<00:22:28.400><c> goes</c><00:22:28.799><c> way</c><00:22:29.120><c> beyond</c><00:22:29.360><c> this</c><00:22:29.520><c> tutorial</c><00:22:30.400><c> it</c>

00:22:30.549 --> 00:22:30.559 align:start position:0%
and goes way beyond this tutorial it
 

00:22:30.559 --> 00:22:33.190 align:start position:0%
and goes way beyond this tutorial it
also<00:22:30.799><c> comes</c><00:22:31.120><c> with</c><00:22:31.520><c> exercises</c><00:22:32.240><c> and</c><00:22:32.400><c> solutions</c>

00:22:33.190 --> 00:22:33.200 align:start position:0%
also comes with exercises and solutions
 

00:22:33.200 --> 00:22:35.510 align:start position:0%
also comes with exercises and solutions
summary<00:22:33.600><c> notes</c><00:22:33.919><c> and</c><00:22:34.080><c> cheat</c><00:22:34.320><c> sheets</c><00:22:34.880><c> a</c><00:22:35.039><c> 30-day</c>

00:22:35.510 --> 00:22:35.520 align:start position:0%
summary notes and cheat sheets a 30-day
 

00:22:35.520 --> 00:22:37.430 align:start position:0%
summary notes and cheat sheets a 30-day
money-back<00:22:35.919><c> guarantee</c><00:22:36.559><c> and</c><00:22:36.720><c> a</c><00:22:36.880><c> certificate</c>

00:22:37.430 --> 00:22:37.440 align:start position:0%
money-back guarantee and a certificate
 

00:22:37.440 --> 00:22:39.510 align:start position:0%
money-back guarantee and a certificate
of<00:22:37.520><c> completion</c><00:22:38.159><c> you</c><00:22:38.240><c> can</c><00:22:38.400><c> add</c><00:22:38.640><c> to</c><00:22:38.720><c> your</c><00:22:38.799><c> resume</c>

00:22:39.510 --> 00:22:39.520 align:start position:0%
of completion you can add to your resume
 

00:22:39.520 --> 00:22:41.110 align:start position:0%
of completion you can add to your resume
so<00:22:39.760><c> if</c><00:22:39.919><c> you're</c><00:22:40.159><c> serious</c><00:22:40.480><c> about</c><00:22:40.720><c> learning</c>

00:22:41.110 --> 00:22:41.120 align:start position:0%
so if you're serious about learning
 

00:22:41.120 --> 00:22:43.270 align:start position:0%
so if you're serious about learning
typescript<00:22:41.760><c> and</c><00:22:42.000><c> are</c><00:22:42.159><c> looking</c><00:22:42.400><c> for</c><00:22:42.559><c> a</c><00:22:42.799><c> job</c><00:22:43.120><c> as</c>

00:22:43.270 --> 00:22:43.280 align:start position:0%
typescript and are looking for a job as
 

00:22:43.280 --> 00:22:45.510 align:start position:0%
typescript and are looking for a job as
a<00:22:43.440><c> front-end</c><00:22:44.000><c> or</c><00:22:44.159><c> a</c><00:22:44.240><c> back-end</c><00:22:44.640><c> developer</c><00:22:45.280><c> i</c>

00:22:45.510 --> 00:22:45.520 align:start position:0%
a front-end or a back-end developer i
 

00:22:45.520 --> 00:22:46.870 align:start position:0%
a front-end or a back-end developer i
highly<00:22:45.840><c> encourage</c><00:22:46.159><c> you</c><00:22:46.320><c> to</c><00:22:46.400><c> enroll</c><00:22:46.720><c> in</c><00:22:46.799><c> the</c>

00:22:46.870 --> 00:22:46.880 align:start position:0%
highly encourage you to enroll in the
 

00:22:46.880 --> 00:22:48.710 align:start position:0%
highly encourage you to enroll in the
course<00:22:47.440><c> in</c><00:22:47.520><c> case</c><00:22:47.760><c> you're</c><00:22:48.000><c> interested</c><00:22:48.559><c> i'll</c>

00:22:48.710 --> 00:22:48.720 align:start position:0%
course in case you're interested i'll
 

00:22:48.720 --> 00:22:50.710 align:start position:0%
course in case you're interested i'll
put<00:22:48.880><c> the</c><00:22:49.039><c> link</c><00:22:49.280><c> in</c><00:22:49.360><c> the</c><00:22:49.520><c> description</c><00:22:50.080><c> box</c><00:22:50.559><c> and</c>

00:22:50.710 --> 00:22:50.720 align:start position:0%
put the link in the description box and
 

00:22:50.720 --> 00:22:52.870 align:start position:0%
put the link in the description box and
if<00:22:50.880><c> not</c><00:22:51.120><c> that's</c><00:22:51.360><c> totally</c><00:22:51.840><c> fine</c><00:22:52.320><c> let's</c><00:22:52.559><c> move</c><00:22:52.720><c> on</c>

00:22:52.870 --> 00:22:52.880 align:start position:0%
if not that's totally fine let's move on
 

00:22:52.880 --> 00:22:57.669 align:start position:0%
if not that's totally fine let's move on
to<00:22:52.960><c> the</c><00:22:53.120><c> next</c><00:22:53.360><c> lesson</c>

00:22:57.669 --> 00:22:57.679 align:start position:0%
 
 

00:22:57.679 --> 00:22:59.350 align:start position:0%
 
welcome<00:22:58.080><c> back</c><00:22:58.240><c> to</c><00:22:58.400><c> another</c><00:22:58.880><c> section</c><00:22:59.200><c> of</c><00:22:59.280><c> the</c>

00:22:59.350 --> 00:22:59.360 align:start position:0%
welcome back to another section of the
 

00:22:59.360 --> 00:23:01.350 align:start position:0%
welcome back to another section of the
ultimate<00:22:59.840><c> typescript</c><00:23:00.320><c> course</c><00:23:01.120><c> in</c><00:23:01.200><c> this</c>

00:23:01.350 --> 00:23:01.360 align:start position:0%
ultimate typescript course in this
 

00:23:01.360 --> 00:23:02.870 align:start position:0%
ultimate typescript course in this
section<00:23:01.840><c> we're</c><00:23:02.080><c> going</c><00:23:02.159><c> to</c><00:23:02.240><c> explore</c><00:23:02.720><c> the</c>

00:23:02.870 --> 00:23:02.880 align:start position:0%
section we're going to explore the
 

00:23:02.880 --> 00:23:04.950 align:start position:0%
section we're going to explore the
fundamentals<00:23:03.600><c> of</c><00:23:03.679><c> typescript</c><00:23:04.559><c> so</c><00:23:04.720><c> you</c><00:23:04.880><c> will</c>

00:23:04.950 --> 00:23:04.960 align:start position:0%
fundamentals of typescript so you will
 

00:23:04.960 --> 00:23:06.870 align:start position:0%
fundamentals of typescript so you will
learn<00:23:05.200><c> about</c><00:23:05.440><c> the</c><00:23:05.600><c> built-in</c><00:23:06.000><c> types</c><00:23:06.480><c> like</c><00:23:06.640><c> the</c>

00:23:06.870 --> 00:23:06.880 align:start position:0%
learn about the built-in types like the
 

00:23:06.880 --> 00:23:10.710 align:start position:0%
learn about the built-in types like the
any<00:23:07.120><c> type</c><00:23:07.679><c> arrays</c><00:23:08.480><c> tuples</c><00:23:09.280><c> enums</c><00:23:10.080><c> functions</c>

00:23:10.710 --> 00:23:10.720 align:start position:0%
any type arrays tuples enums functions
 

00:23:10.720 --> 00:23:12.870 align:start position:0%
any type arrays tuples enums functions
and<00:23:10.880><c> objects</c><00:23:11.760><c> the</c><00:23:11.919><c> concepts</c><00:23:12.400><c> you'll</c><00:23:12.559><c> learn</c><00:23:12.720><c> in</c>

00:23:12.870 --> 00:23:12.880 align:start position:0%
and objects the concepts you'll learn in
 

00:23:12.880 --> 00:23:14.789 align:start position:0%
and objects the concepts you'll learn in
this<00:23:12.960><c> section</c><00:23:13.520><c> will</c><00:23:13.679><c> be</c><00:23:13.840><c> the</c><00:23:14.000><c> foundation</c><00:23:14.559><c> for</c>

00:23:14.789 --> 00:23:14.799 align:start position:0%
this section will be the foundation for
 

00:23:14.799 --> 00:23:16.710 align:start position:0%
this section will be the foundation for
future<00:23:15.200><c> sections</c><00:23:15.760><c> so</c><00:23:16.000><c> don't</c><00:23:16.240><c> skip</c><00:23:16.559><c> any</c>

00:23:16.710 --> 00:23:16.720 align:start position:0%
future sections so don't skip any
 

00:23:16.720 --> 00:23:18.950 align:start position:0%
future sections so don't skip any
lessons<00:23:17.440><c> now</c><00:23:17.760><c> let's</c><00:23:18.000><c> jump</c><00:23:18.240><c> in</c><00:23:18.400><c> and</c><00:23:18.720><c> get</c>

00:23:18.950 --> 00:23:18.960 align:start position:0%
lessons now let's jump in and get
 

00:23:18.960 --> 00:23:21.570 align:start position:0%
lessons now let's jump in and get
started

00:23:21.570 --> 00:23:21.580 align:start position:0%
started
 

00:23:21.580 --> 00:23:29.190 align:start position:0%
started
[Music]

00:23:29.190 --> 00:23:29.200 align:start position:0%
 
 

00:23:29.200 --> 00:23:31.350 align:start position:0%
 
so<00:23:29.440><c> javascript</c><00:23:30.080><c> has</c><00:23:30.240><c> built-in</c><00:23:30.559><c> types</c><00:23:30.960><c> like</c>

00:23:31.350 --> 00:23:31.360 align:start position:0%
so javascript has built-in types like
 

00:23:31.360 --> 00:23:35.110 align:start position:0%
so javascript has built-in types like
number<00:23:32.000><c> string</c><00:23:32.720><c> boolean</c><00:23:33.520><c> null</c><00:23:34.159><c> undefined</c><00:23:34.960><c> an</c>

00:23:35.110 --> 00:23:35.120 align:start position:0%
number string boolean null undefined an
 

00:23:35.120 --> 00:23:38.070 align:start position:0%
number string boolean null undefined an
object<00:23:36.000><c> now</c><00:23:36.240><c> typescript</c><00:23:36.960><c> extends</c><00:23:37.360><c> this</c><00:23:37.600><c> list</c>

00:23:38.070 --> 00:23:38.080 align:start position:0%
object now typescript extends this list
 

00:23:38.080 --> 00:23:40.870 align:start position:0%
object now typescript extends this list
and<00:23:38.320><c> introduces</c><00:23:38.960><c> new</c><00:23:39.200><c> types</c><00:23:39.760><c> like</c><00:23:40.080><c> any</c>

00:23:40.870 --> 00:23:40.880 align:start position:0%
and introduces new types like any
 

00:23:40.880 --> 00:23:44.630 align:start position:0%
and introduces new types like any
unknown<00:23:41.679><c> never</c><00:23:42.400><c> enum</c><00:23:43.039><c> and</c><00:23:43.200><c> tuple</c><00:23:44.080><c> as</c><00:23:44.320><c> we</c><00:23:44.480><c> go</c>

00:23:44.630 --> 00:23:44.640 align:start position:0%
unknown never enum and tuple as we go
 

00:23:44.640 --> 00:23:45.990 align:start position:0%
unknown never enum and tuple as we go
through<00:23:44.799><c> this</c><00:23:44.960><c> section</c><00:23:45.600><c> you</c><00:23:45.760><c> will</c><00:23:45.840><c> learn</c>

00:23:45.990 --> 00:23:46.000 align:start position:0%
through this section you will learn
 

00:23:46.000 --> 00:23:47.990 align:start position:0%
through this section you will learn
about<00:23:46.320><c> all</c><00:23:46.480><c> these</c><00:23:46.640><c> steps</c><00:23:46.960><c> in</c><00:23:47.039><c> detail</c><00:23:47.840><c> but</c>

00:23:47.990 --> 00:23:48.000 align:start position:0%
about all these steps in detail but
 

00:23:48.000 --> 00:23:49.750 align:start position:0%
about all these steps in detail but
before<00:23:48.240><c> we</c><00:23:48.320><c> get</c><00:23:48.559><c> started</c><00:23:49.120><c> let's</c><00:23:49.279><c> see</c><00:23:49.440><c> how</c><00:23:49.679><c> we</c>

00:23:49.750 --> 00:23:49.760 align:start position:0%
before we get started let's see how we
 

00:23:49.760 --> 00:23:51.669 align:start position:0%
before we get started let's see how we
can<00:23:50.000><c> play</c><00:23:50.240><c> with</c><00:23:50.480><c> primitive</c><00:23:51.039><c> types</c><00:23:51.440><c> in</c>

00:23:51.669 --> 00:23:51.679 align:start position:0%
can play with primitive types in
 

00:23:51.679 --> 00:23:54.789 align:start position:0%
can play with primitive types in
typescript<00:23:52.720><c> so</c><00:23:52.960><c> back</c><00:23:53.200><c> in</c><00:23:53.360><c> index.ts</c><00:23:54.559><c> i'm</c><00:23:54.720><c> going</c>

00:23:54.789 --> 00:23:54.799 align:start position:0%
typescript so back in index.ts i'm going
 

00:23:54.799 --> 00:23:56.870 align:start position:0%
typescript so back in index.ts i'm going
to<00:23:54.880><c> delete</c><00:23:55.279><c> all</c><00:23:55.360><c> this</c><00:23:55.600><c> code</c><00:23:56.000><c> and</c><00:23:56.159><c> declare</c><00:23:56.720><c> a</c>

00:23:56.870 --> 00:23:56.880 align:start position:0%
to delete all this code and declare a
 

00:23:56.880 --> 00:24:00.149 align:start position:0%
to delete all this code and declare a
variable<00:23:57.600><c> called</c><00:23:57.919><c> sales</c><00:23:58.640><c> of</c><00:23:58.880><c> type</c><00:23:59.120><c> number</c>

00:24:00.149 --> 00:24:00.159 align:start position:0%
variable called sales of type number
 

00:24:00.159 --> 00:24:02.230 align:start position:0%
variable called sales of type number
and<00:24:00.320><c> set</c><00:24:00.480><c> it</c><00:24:00.559><c> to</c><00:24:00.720><c> a</c><00:24:00.799><c> value</c><00:24:01.200><c> like</c><00:24:01.520><c> one</c><00:24:01.679><c> two</c><00:24:01.840><c> three</c>

00:24:02.230 --> 00:24:02.240 align:start position:0%
and set it to a value like one two three
 

00:24:02.240 --> 00:24:04.630 align:start position:0%
and set it to a value like one two three
four<00:24:02.480><c> five</c><00:24:02.720><c> six</c><00:24:03.360><c> seven</c><00:24:03.679><c> eight</c><00:24:03.840><c> nine</c>

00:24:04.630 --> 00:24:04.640 align:start position:0%
four five six seven eight nine
 

00:24:04.640 --> 00:24:06.789 align:start position:0%
four five six seven eight nine
so<00:24:04.799><c> once</c><00:24:05.039><c> again</c><00:24:05.279><c> we're</c><00:24:05.600><c> annotating</c><00:24:06.480><c> or</c>

00:24:06.789 --> 00:24:06.799 align:start position:0%
so once again we're annotating or
 

00:24:06.799 --> 00:24:08.549 align:start position:0%
so once again we're annotating or
explaining<00:24:07.440><c> the</c><00:24:07.679><c> type</c><00:24:07.919><c> of</c><00:24:08.080><c> the</c><00:24:08.240><c> sales</c>

00:24:08.549 --> 00:24:08.559 align:start position:0%
explaining the type of the sales
 

00:24:08.559 --> 00:24:11.190 align:start position:0%
explaining the type of the sales
variable<00:24:09.039><c> using</c><00:24:09.279><c> this</c><00:24:09.440><c> syntax</c><00:24:10.159><c> okay</c><00:24:10.880><c> now</c><00:24:11.120><c> in</c>

00:24:11.190 --> 00:24:11.200 align:start position:0%
variable using this syntax okay now in
 

00:24:11.200 --> 00:24:13.750 align:start position:0%
variable using this syntax okay now in
typescript<00:24:12.080><c> if</c><00:24:12.240><c> you</c><00:24:12.320><c> have</c><00:24:12.480><c> a</c><00:24:12.559><c> large</c><00:24:12.880><c> number</c>

00:24:13.750 --> 00:24:13.760 align:start position:0%
typescript if you have a large number
 

00:24:13.760 --> 00:24:15.990 align:start position:0%
typescript if you have a large number
we<00:24:13.919><c> can</c><00:24:14.159><c> separate</c><00:24:14.480><c> its</c><00:24:14.640><c> digits</c><00:24:15.520><c> using</c><00:24:15.760><c> an</c>

00:24:15.990 --> 00:24:16.000 align:start position:0%
we can separate its digits using an
 

00:24:16.000 --> 00:24:17.909 align:start position:0%
we can separate its digits using an
underscore<00:24:17.039><c> that</c><00:24:17.200><c> makes</c><00:24:17.440><c> our</c><00:24:17.520><c> code</c><00:24:17.760><c> more</c>

00:24:17.909 --> 00:24:17.919 align:start position:0%
underscore that makes our code more
 

00:24:17.919 --> 00:24:19.350 align:start position:0%
underscore that makes our code more
readable<00:24:18.400><c> okay</c>

00:24:19.350 --> 00:24:19.360 align:start position:0%
readable okay
 

00:24:19.360 --> 00:24:21.510 align:start position:0%
readable okay
now<00:24:19.600><c> let's</c><00:24:19.840><c> also</c><00:24:20.080><c> declare</c><00:24:20.480><c> a</c><00:24:20.559><c> variable</c><00:24:21.200><c> called</c>

00:24:21.510 --> 00:24:21.520 align:start position:0%
now let's also declare a variable called
 

00:24:21.520 --> 00:24:24.070 align:start position:0%
now let's also declare a variable called
course<00:24:22.080><c> of</c><00:24:22.320><c> type</c><00:24:22.559><c> string</c><00:24:23.200><c> and</c><00:24:23.600><c> set</c><00:24:23.840><c> it</c><00:24:23.919><c> to</c>

00:24:24.070 --> 00:24:24.080 align:start position:0%
course of type string and set it to
 

00:24:24.080 --> 00:24:25.590 align:start position:0%
course of type string and set it to
typescript

00:24:25.590 --> 00:24:25.600 align:start position:0%
typescript
 

00:24:25.600 --> 00:24:30.390 align:start position:0%
typescript
and<00:24:25.840><c> one</c><00:24:26.159><c> boolean</c><00:24:26.640><c> called</c><00:24:27.279><c> is</c><00:24:27.919><c> published</c>

00:24:30.390 --> 00:24:30.400 align:start position:0%
and one boolean called is published
 

00:24:30.400 --> 00:24:31.590 align:start position:0%
and one boolean called is published
now<00:24:30.559><c> let</c><00:24:30.720><c> me</c><00:24:30.799><c> show</c><00:24:30.960><c> you</c><00:24:31.039><c> something</c><00:24:31.279><c> really</c>

00:24:31.590 --> 00:24:31.600 align:start position:0%
now let me show you something really
 

00:24:31.600 --> 00:24:34.070 align:start position:0%
now let me show you something really
cool<00:24:32.320><c> in</c><00:24:32.480><c> typescript</c><00:24:33.200><c> we</c><00:24:33.360><c> don't</c><00:24:33.600><c> always</c><00:24:33.840><c> have</c>

00:24:34.070 --> 00:24:34.080 align:start position:0%
cool in typescript we don't always have
 

00:24:34.080 --> 00:24:36.230 align:start position:0%
cool in typescript we don't always have
to<00:24:34.320><c> annotate</c><00:24:34.799><c> our</c><00:24:34.960><c> variables</c><00:24:35.840><c> because</c><00:24:36.080><c> the</c>

00:24:36.230 --> 00:24:36.240 align:start position:0%
to annotate our variables because the
 

00:24:36.240 --> 00:24:39.350 align:start position:0%
to annotate our variables because the
typescript<00:24:36.799><c> compiler</c><00:24:37.520><c> can</c><00:24:37.840><c> infer</c><00:24:38.640><c> or</c><00:24:38.960><c> detect</c>

00:24:39.350 --> 00:24:39.360 align:start position:0%
typescript compiler can infer or detect
 

00:24:39.360 --> 00:24:41.830 align:start position:0%
typescript compiler can infer or detect
the<00:24:39.520><c> type</c><00:24:39.760><c> of</c><00:24:39.919><c> our</c><00:24:40.080><c> variables</c><00:24:40.960><c> based</c><00:24:41.520><c> on</c><00:24:41.679><c> their</c>

00:24:41.830 --> 00:24:41.840 align:start position:0%
the type of our variables based on their
 

00:24:41.840 --> 00:24:44.230 align:start position:0%
the type of our variables based on their
value<00:24:42.640><c> for</c><00:24:42.799><c> example</c><00:24:43.679><c> because</c><00:24:43.919><c> we</c><00:24:44.080><c> have</c>

00:24:44.230 --> 00:24:44.240 align:start position:0%
value for example because we have
 

00:24:44.240 --> 00:24:46.950 align:start position:0%
value for example because we have
initialized<00:24:45.120><c> this</c><00:24:45.360><c> variable</c><00:24:45.840><c> to</c><00:24:46.000><c> a</c><00:24:46.159><c> number</c>

00:24:46.950 --> 00:24:46.960 align:start position:0%
initialized this variable to a number
 

00:24:46.960 --> 00:24:48.870 align:start position:0%
initialized this variable to a number
the<00:24:47.120><c> typescript</c><00:24:47.600><c> compiler</c><00:24:48.159><c> knows</c><00:24:48.400><c> that</c><00:24:48.640><c> this</c>

00:24:48.870 --> 00:24:48.880 align:start position:0%
the typescript compiler knows that this
 

00:24:48.880 --> 00:24:51.110 align:start position:0%
the typescript compiler knows that this
variable<00:24:49.360><c> is</c><00:24:49.520><c> a</c><00:24:49.600><c> number</c><00:24:50.000><c> so</c><00:24:50.320><c> we</c><00:24:50.480><c> don't</c><00:24:50.720><c> have</c><00:24:50.880><c> to</c>

00:24:51.110 --> 00:24:51.120 align:start position:0%
variable is a number so we don't have to
 

00:24:51.120 --> 00:24:52.630 align:start position:0%
variable is a number so we don't have to
annotate<00:24:51.600><c> it</c><00:24:51.760><c> so</c><00:24:51.919><c> if</c><00:24:52.000><c> we</c><00:24:52.159><c> remove</c><00:24:52.480><c> the</c>

00:24:52.630 --> 00:24:52.640 align:start position:0%
annotate it so if we remove the
 

00:24:52.640 --> 00:24:53.750 align:start position:0%
annotate it so if we remove the
annotation

00:24:53.750 --> 00:24:53.760 align:start position:0%
annotation
 

00:24:53.760 --> 00:24:55.990 align:start position:0%
annotation
and<00:24:53.919><c> hover</c><00:24:54.240><c> our</c><00:24:54.480><c> mouse</c><00:24:54.880><c> over</c><00:24:55.279><c> this</c><00:24:55.520><c> variable</c>

00:24:55.990 --> 00:24:56.000 align:start position:0%
and hover our mouse over this variable
 

00:24:56.000 --> 00:24:58.870 align:start position:0%
and hover our mouse over this variable
look<00:24:56.640><c> we</c><00:24:56.799><c> can</c><00:24:56.960><c> see</c><00:24:57.200><c> that</c><00:24:57.360><c> sales</c><00:24:57.760><c> is</c><00:24:57.840><c> a</c><00:24:58.000><c> number</c>

00:24:58.870 --> 00:24:58.880 align:start position:0%
look we can see that sales is a number
 

00:24:58.880 --> 00:25:00.710 align:start position:0%
look we can see that sales is a number
similarly<00:24:59.520><c> because</c><00:24:59.679><c> we</c><00:24:59.840><c> have</c><00:25:00.000><c> initialized</c>

00:25:00.710 --> 00:25:00.720 align:start position:0%
similarly because we have initialized
 

00:25:00.720 --> 00:25:03.110 align:start position:0%
similarly because we have initialized
course<00:25:01.200><c> to</c><00:25:01.360><c> a</c><00:25:01.520><c> string</c><00:25:02.320><c> we</c><00:25:02.480><c> can</c><00:25:02.720><c> remove</c><00:25:02.960><c> the</c>

00:25:03.110 --> 00:25:03.120 align:start position:0%
course to a string we can remove the
 

00:25:03.120 --> 00:25:05.590 align:start position:0%
course to a string we can remove the
annotation<00:25:04.240><c> and</c><00:25:04.400><c> once</c><00:25:04.640><c> again</c>

00:25:05.590 --> 00:25:05.600 align:start position:0%
annotation and once again
 

00:25:05.600 --> 00:25:08.230 align:start position:0%
annotation and once again
we<00:25:05.760><c> can</c><00:25:05.919><c> see</c><00:25:06.080><c> that</c><00:25:06.320><c> course</c><00:25:06.880><c> is</c><00:25:07.039><c> a</c><00:25:07.200><c> string</c><00:25:08.000><c> and</c>

00:25:08.230 --> 00:25:08.240 align:start position:0%
we can see that course is a string and
 

00:25:08.240 --> 00:25:09.909 align:start position:0%
we can see that course is a string and
one<00:25:08.480><c> more</c><00:25:08.720><c> time</c>

00:25:09.909 --> 00:25:09.919 align:start position:0%
one more time
 

00:25:09.919 --> 00:25:11.590 align:start position:0%
one more time
now<00:25:10.080><c> what</c><00:25:10.320><c> if</c><00:25:10.400><c> we</c><00:25:10.480><c> declare</c><00:25:10.799><c> a</c><00:25:10.880><c> variable</c><00:25:11.360><c> like</c>

00:25:11.590 --> 00:25:11.600 align:start position:0%
now what if we declare a variable like
 

00:25:11.600 --> 00:25:14.710 align:start position:0%
now what if we declare a variable like
level<00:25:12.320><c> and</c><00:25:12.480><c> don't</c><00:25:12.720><c> initialize</c><00:25:13.360><c> it</c>

00:25:14.710 --> 00:25:14.720 align:start position:0%
level and don't initialize it
 

00:25:14.720 --> 00:25:16.950 align:start position:0%
level and don't initialize it
typescript<00:25:15.279><c> assumes</c><00:25:15.919><c> that</c><00:25:16.080><c> this</c><00:25:16.320><c> variable</c><00:25:16.799><c> is</c>

00:25:16.950 --> 00:25:16.960 align:start position:0%
typescript assumes that this variable is
 

00:25:16.960 --> 00:25:18.789 align:start position:0%
typescript assumes that this variable is
of<00:25:17.039><c> type</c><00:25:17.360><c> any</c><00:25:17.760><c> we'll</c><00:25:18.000><c> talk</c><00:25:18.159><c> about</c><00:25:18.400><c> that</c><00:25:18.559><c> in</c><00:25:18.640><c> the</c>

00:25:18.789 --> 00:25:18.799 align:start position:0%
of type any we'll talk about that in the
 

00:25:18.799 --> 00:25:21.990 align:start position:0%
of type any we'll talk about that in the
next<00:25:19.039><c> lesson</c>

00:25:21.990 --> 00:25:22.000 align:start position:0%
 
 

00:25:22.000 --> 00:25:27.350 align:start position:0%
 
[Music]

00:25:27.350 --> 00:25:27.360 align:start position:0%
 
 

00:25:27.360 --> 00:25:29.110 align:start position:0%
 
in<00:25:27.520><c> timescript</c><00:25:28.000><c> we</c><00:25:28.159><c> have</c><00:25:28.240><c> a</c><00:25:28.320><c> new</c><00:25:28.559><c> type</c><00:25:28.799><c> called</c>

00:25:29.110 --> 00:25:29.120 align:start position:0%
in timescript we have a new type called
 

00:25:29.120 --> 00:25:31.110 align:start position:0%
in timescript we have a new type called
any<00:25:29.600><c> which</c><00:25:29.840><c> can</c><00:25:30.000><c> represent</c><00:25:30.640><c> any</c><00:25:30.799><c> kind</c><00:25:30.960><c> of</c>

00:25:31.110 --> 00:25:31.120 align:start position:0%
any which can represent any kind of
 

00:25:31.120 --> 00:25:32.070 align:start position:0%
any which can represent any kind of
values

00:25:32.070 --> 00:25:32.080 align:start position:0%
values
 

00:25:32.080 --> 00:25:33.990 align:start position:0%
values
so<00:25:32.240><c> if</c><00:25:32.400><c> we</c><00:25:32.480><c> declare</c><00:25:32.880><c> a</c><00:25:33.039><c> variable</c><00:25:33.600><c> and</c><00:25:33.679><c> don't</c>

00:25:33.990 --> 00:25:34.000 align:start position:0%
so if we declare a variable and don't
 

00:25:34.000 --> 00:25:36.390 align:start position:0%
so if we declare a variable and don't
initialize<00:25:34.559><c> it</c><00:25:35.039><c> the</c><00:25:35.279><c> typescript</c><00:25:35.760><c> compiler</c>

00:25:36.390 --> 00:25:36.400 align:start position:0%
initialize it the typescript compiler
 

00:25:36.400 --> 00:25:39.590 align:start position:0%
initialize it the typescript compiler
assumes<00:25:37.120><c> this</c><00:25:37.440><c> variable</c><00:25:37.919><c> is</c><00:25:38.080><c> of</c><00:25:38.240><c> type</c><00:25:38.559><c> any</c><00:25:39.360><c> so</c>

00:25:39.590 --> 00:25:39.600 align:start position:0%
assumes this variable is of type any so
 

00:25:39.600 --> 00:25:42.149 align:start position:0%
assumes this variable is of type any so
we<00:25:39.679><c> can</c><00:25:39.840><c> set</c><00:25:40.080><c> it</c><00:25:40.159><c> to</c><00:25:40.400><c> a</c><00:25:40.559><c> number</c><00:25:41.520><c> and</c><00:25:41.679><c> then</c><00:25:41.840><c> later</c>

00:25:42.149 --> 00:25:42.159 align:start position:0%
we can set it to a number and then later
 

00:25:42.159 --> 00:25:43.990 align:start position:0%
we can set it to a number and then later
on<00:25:42.320><c> we</c><00:25:42.480><c> can</c><00:25:42.640><c> set</c><00:25:42.799><c> it</c><00:25:42.880><c> to</c><00:25:43.039><c> a</c><00:25:43.120><c> string</c>

00:25:43.990 --> 00:25:44.000 align:start position:0%
on we can set it to a string
 

00:25:44.000 --> 00:25:46.070 align:start position:0%
on we can set it to a string
but<00:25:44.159><c> this</c><00:25:44.400><c> is</c><00:25:44.480><c> against</c><00:25:45.200><c> the</c><00:25:45.440><c> whole</c><00:25:45.760><c> idea</c><00:25:46.000><c> of</c>

00:25:46.070 --> 00:25:46.080 align:start position:0%
but this is against the whole idea of
 

00:25:46.080 --> 00:25:47.669 align:start position:0%
but this is against the whole idea of
using<00:25:46.320><c> typescript</c><00:25:47.039><c> because</c><00:25:47.360><c> we</c><00:25:47.520><c> use</c>

00:25:47.669 --> 00:25:47.679 align:start position:0%
using typescript because we use
 

00:25:47.679 --> 00:25:50.149 align:start position:0%
using typescript because we use
typescript<00:25:48.400><c> for</c><00:25:48.720><c> type</c><00:25:49.039><c> safety</c><00:25:49.600><c> so</c><00:25:49.760><c> we</c><00:25:49.919><c> get</c>

00:25:50.149 --> 00:25:50.159 align:start position:0%
typescript for type safety so we get
 

00:25:50.159 --> 00:25:52.789 align:start position:0%
typescript for type safety so we get
type<00:25:50.480><c> checking</c><00:25:51.200><c> so</c><00:25:51.360><c> if</c><00:25:51.520><c> we</c><00:25:51.600><c> use</c><00:25:51.840><c> the</c><00:25:52.080><c> any</c><00:25:52.320><c> type</c>

00:25:52.789 --> 00:25:52.799 align:start position:0%
type checking so if we use the any type
 

00:25:52.799 --> 00:25:54.870 align:start position:0%
type checking so if we use the any type
we<00:25:52.960><c> essentially</c><00:25:53.440><c> lose</c><00:25:53.679><c> that</c><00:25:53.919><c> feature</c><00:25:54.480><c> and</c><00:25:54.640><c> the</c>

00:25:54.870 --> 00:25:54.880 align:start position:0%
we essentially lose that feature and the
 

00:25:54.880 --> 00:25:57.430 align:start position:0%
we essentially lose that feature and the
major<00:25:55.360><c> benefit</c><00:25:55.840><c> of</c><00:25:55.919><c> using</c><00:25:56.240><c> typescript</c><00:25:57.039><c> so</c><00:25:57.279><c> as</c>

00:25:57.430 --> 00:25:57.440 align:start position:0%
major benefit of using typescript so as
 

00:25:57.440 --> 00:25:59.190 align:start position:0%
major benefit of using typescript so as
a<00:25:57.520><c> best</c><00:25:57.760><c> practice</c><00:25:58.240><c> you</c><00:25:58.400><c> should</c><00:25:58.640><c> avoid</c><00:25:58.960><c> using</c>

00:25:59.190 --> 00:25:59.200 align:start position:0%
a best practice you should avoid using
 

00:25:59.200 --> 00:26:01.590 align:start position:0%
a best practice you should avoid using
the<00:25:59.440><c> any</c><00:25:59.679><c> type</c><00:25:59.919><c> as</c><00:26:00.000><c> much</c><00:26:00.240><c> as</c><00:26:00.400><c> possible</c><00:26:01.360><c> let's</c>

00:26:01.590 --> 00:26:01.600 align:start position:0%
the any type as much as possible let's
 

00:26:01.600 --> 00:26:03.430 align:start position:0%
the any type as much as possible let's
look<00:26:01.760><c> at</c><00:26:01.840><c> another</c><00:26:02.240><c> example</c><00:26:02.960><c> let's</c><00:26:03.200><c> say</c><00:26:03.360><c> we</c>

00:26:03.430 --> 00:26:03.440 align:start position:0%
look at another example let's say we
 

00:26:03.440 --> 00:26:05.830 align:start position:0%
look at another example let's say we
have<00:26:03.600><c> a</c><00:26:03.679><c> function</c><00:26:04.480><c> called</c><00:26:04.720><c> render</c>

00:26:05.830 --> 00:26:05.840 align:start position:0%
have a function called render
 

00:26:05.840 --> 00:26:08.630 align:start position:0%
have a function called render
that<00:26:06.000><c> takes</c><00:26:06.240><c> a</c><00:26:06.400><c> document</c><00:26:07.520><c> and</c><00:26:07.919><c> simply</c><00:26:08.240><c> renders</c>

00:26:08.630 --> 00:26:08.640 align:start position:0%
that takes a document and simply renders
 

00:26:08.640 --> 00:26:10.710 align:start position:0%
that takes a document and simply renders
it<00:26:08.799><c> on</c><00:26:08.880><c> the</c><00:26:09.039><c> console</c>

00:26:10.710 --> 00:26:10.720 align:start position:0%
it on the console
 

00:26:10.720 --> 00:26:13.350 align:start position:0%
it on the console
now<00:26:10.960><c> look</c><00:26:11.600><c> we</c><00:26:11.760><c> have</c><00:26:11.840><c> a</c><00:26:11.919><c> compilation</c><00:26:12.559><c> error</c>

00:26:13.350 --> 00:26:13.360 align:start position:0%
now look we have a compilation error
 

00:26:13.360 --> 00:26:15.110 align:start position:0%
now look we have a compilation error
and<00:26:13.520><c> the</c><00:26:13.600><c> error</c><00:26:13.840><c> is</c><00:26:13.919><c> saying</c><00:26:14.559><c> parameter</c>

00:26:15.110 --> 00:26:15.120 align:start position:0%
and the error is saying parameter
 

00:26:15.120 --> 00:26:18.070 align:start position:0%
and the error is saying parameter
document<00:26:15.919><c> implicitly</c><00:26:16.640><c> has</c><00:26:16.799><c> on</c><00:26:16.960><c> any</c><00:26:17.200><c> type</c>

00:26:18.070 --> 00:26:18.080 align:start position:0%
document implicitly has on any type
 

00:26:18.080 --> 00:26:20.710 align:start position:0%
document implicitly has on any type
implicitly<00:26:18.799><c> means</c><00:26:19.360><c> we</c><00:26:19.520><c> haven't</c><00:26:19.919><c> explicitly</c>

00:26:20.710 --> 00:26:20.720 align:start position:0%
implicitly means we haven't explicitly
 

00:26:20.720 --> 00:26:22.789 align:start position:0%
implicitly means we haven't explicitly
or<00:26:21.279><c> clearly</c><00:26:21.760><c> set</c><00:26:22.080><c> the</c><00:26:22.240><c> type</c><00:26:22.480><c> of</c><00:26:22.559><c> this</c>

00:26:22.789 --> 00:26:22.799 align:start position:0%
or clearly set the type of this
 

00:26:22.799 --> 00:26:25.590 align:start position:0%
or clearly set the type of this
parameter<00:26:23.600><c> so</c><00:26:23.760><c> the</c><00:26:24.000><c> compiler</c><00:26:24.640><c> is</c><00:26:24.960><c> inferring</c>

00:26:25.590 --> 00:26:25.600 align:start position:0%
parameter so the compiler is inferring
 

00:26:25.600 --> 00:26:27.830 align:start position:0%
parameter so the compiler is inferring
or<00:26:26.080><c> guessing</c><00:26:26.480><c> the</c><00:26:26.559><c> type</c><00:26:26.799><c> of</c><00:26:26.880><c> this</c><00:26:27.039><c> parameter</c>

00:26:27.830 --> 00:26:27.840 align:start position:0%
or guessing the type of this parameter
 

00:26:27.840 --> 00:26:29.669 align:start position:0%
or guessing the type of this parameter
and<00:26:27.919><c> that's</c><00:26:28.159><c> why</c><00:26:28.320><c> we</c><00:26:28.400><c> have</c><00:26:28.559><c> this</c><00:26:28.720><c> error</c><00:26:29.440><c> now</c>

00:26:29.669 --> 00:26:29.679 align:start position:0%
and that's why we have this error now
 

00:26:29.679 --> 00:26:31.669 align:start position:0%
and that's why we have this error now
let's<00:26:29.840><c> say</c><00:26:30.080><c> this</c><00:26:30.320><c> is</c><00:26:30.400><c> part</c><00:26:30.640><c> of</c><00:26:30.960><c> a</c><00:26:31.120><c> javascript</c>

00:26:31.669 --> 00:26:31.679 align:start position:0%
let's say this is part of a javascript
 

00:26:31.679 --> 00:26:33.110 align:start position:0%
let's say this is part of a javascript
project<00:26:32.000><c> we're</c><00:26:32.240><c> trying</c><00:26:32.480><c> to</c><00:26:32.559><c> convert</c><00:26:32.960><c> to</c>

00:26:33.110 --> 00:26:33.120 align:start position:0%
project we're trying to convert to
 

00:26:33.120 --> 00:26:35.269 align:start position:0%
project we're trying to convert to
typescript<00:26:33.760><c> and</c><00:26:34.080><c> at</c><00:26:34.240><c> this</c><00:26:34.400><c> point</c><00:26:34.960><c> it's</c>

00:26:35.269 --> 00:26:35.279 align:start position:0%
typescript and at this point it's
 

00:26:35.279 --> 00:26:38.070 align:start position:0%
typescript and at this point it's
impossible<00:26:35.919><c> for</c><00:26:36.080><c> us</c><00:26:36.320><c> to</c><00:26:36.840><c> explicitly</c><00:26:37.600><c> annotate</c>

00:26:38.070 --> 00:26:38.080 align:start position:0%
impossible for us to explicitly annotate
 

00:26:38.080 --> 00:26:40.149 align:start position:0%
impossible for us to explicitly annotate
this<00:26:38.240><c> with</c><00:26:38.400><c> a</c><00:26:38.480><c> particular</c><00:26:39.039><c> type</c><00:26:39.679><c> so</c><00:26:39.840><c> we</c><00:26:40.000><c> have</c>

00:26:40.149 --> 00:26:40.159 align:start position:0%
this with a particular type so we have
 

00:26:40.159 --> 00:26:41.909 align:start position:0%
this with a particular type so we have
to<00:26:40.320><c> use</c><00:26:40.480><c> the</c><00:26:40.559><c> any</c><00:26:40.799><c> type</c><00:26:41.039><c> here</c><00:26:41.520><c> now</c><00:26:41.679><c> here</c><00:26:41.840><c> we</c>

00:26:41.909 --> 00:26:41.919 align:start position:0%
to use the any type here now here we
 

00:26:41.919 --> 00:26:44.149 align:start position:0%
to use the any type here now here we
have<00:26:42.080><c> two</c><00:26:42.240><c> options</c><00:26:42.880><c> to</c><00:26:43.039><c> turn</c><00:26:43.279><c> off</c><00:26:43.360><c> this</c><00:26:43.600><c> error</c>

00:26:44.149 --> 00:26:44.159 align:start position:0%
have two options to turn off this error
 

00:26:44.159 --> 00:26:47.909 align:start position:0%
have two options to turn off this error
one<00:26:44.400><c> option</c><00:26:44.880><c> is</c><00:26:45.039><c> to</c><00:26:45.600><c> annotate</c><00:26:46.159><c> this</c><00:26:46.880><c> with</c><00:26:47.200><c> any</c>

00:26:47.909 --> 00:26:47.919 align:start position:0%
one option is to annotate this with any
 

00:26:47.919 --> 00:26:49.830 align:start position:0%
one option is to annotate this with any
so<00:26:48.159><c> we're</c><00:26:48.320><c> telling</c><00:26:48.559><c> the</c><00:26:48.640><c> compiler</c><00:26:49.279><c> hey</c><00:26:49.520><c> i</c><00:26:49.679><c> know</c>

00:26:49.830 --> 00:26:49.840 align:start position:0%
so we're telling the compiler hey i know
 

00:26:49.840 --> 00:26:51.830 align:start position:0%
so we're telling the compiler hey i know
what<00:26:50.000><c> i'm</c><00:26:50.080><c> doing</c><00:26:50.640><c> the</c><00:26:50.799><c> document</c><00:26:51.279><c> is</c><00:26:51.440><c> of</c><00:26:51.600><c> any</c>

00:26:51.830 --> 00:26:51.840 align:start position:0%
what i'm doing the document is of any
 

00:26:51.840 --> 00:26:54.549 align:start position:0%
what i'm doing the document is of any
type<00:26:52.480><c> but</c><00:26:52.799><c> what</c><00:26:53.039><c> if</c><00:26:53.200><c> we</c><00:26:53.360><c> have</c><00:26:53.840><c> tons</c><00:26:54.080><c> of</c><00:26:54.240><c> errors</c>

00:26:54.549 --> 00:26:54.559 align:start position:0%
type but what if we have tons of errors
 

00:26:54.559 --> 00:26:56.149 align:start position:0%
type but what if we have tons of errors
of<00:26:54.640><c> this</c><00:26:54.880><c> kind</c><00:26:55.440><c> we</c><00:26:55.520><c> don't</c><00:26:55.679><c> want</c><00:26:55.760><c> to</c><00:26:55.840><c> go</c><00:26:56.000><c> to</c>

00:26:56.149 --> 00:26:56.159 align:start position:0%
of this kind we don't want to go to
 

00:26:56.159 --> 00:26:58.950 align:start position:0%
of this kind we don't want to go to
every<00:26:56.320><c> function</c><00:26:57.200><c> and</c><00:26:57.679><c> explicitly</c><00:26:58.480><c> annotate</c>

00:26:58.950 --> 00:26:58.960 align:start position:0%
every function and explicitly annotate
 

00:26:58.960 --> 00:27:01.029 align:start position:0%
every function and explicitly annotate
various<00:26:59.360><c> parameters</c><00:26:59.840><c> with</c><00:27:00.159><c> any</c>

00:27:01.029 --> 00:27:01.039 align:start position:0%
various parameters with any
 

00:27:01.039 --> 00:27:02.870 align:start position:0%
various parameters with any
well<00:27:01.440><c> there</c><00:27:01.600><c> is</c><00:27:01.760><c> a</c><00:27:01.840><c> nuclear</c><00:27:02.240><c> option</c><00:27:02.480><c> for</c><00:27:02.720><c> that</c>

00:27:02.870 --> 00:27:02.880 align:start position:0%
well there is a nuclear option for that
 

00:27:02.880 --> 00:27:04.630 align:start position:0%
well there is a nuclear option for that
but<00:27:03.200><c> i</c><00:27:03.279><c> don't</c><00:27:03.440><c> personally</c><00:27:03.919><c> recommend</c><00:27:04.320><c> that</c>

00:27:04.630 --> 00:27:04.640 align:start position:0%
but i don't personally recommend that
 

00:27:04.640 --> 00:27:06.630 align:start position:0%
but i don't personally recommend that
but<00:27:04.799><c> let</c><00:27:04.960><c> me</c><00:27:05.039><c> show</c><00:27:05.200><c> you</c><00:27:05.360><c> how</c><00:27:05.520><c> that</c><00:27:05.679><c> works</c>

00:27:06.630 --> 00:27:06.640 align:start position:0%
but let me show you how that works
 

00:27:06.640 --> 00:27:08.870 align:start position:0%
but let me show you how that works
so<00:27:06.880><c> let's</c><00:27:07.120><c> remove</c><00:27:07.440><c> the</c><00:27:07.600><c> annotation</c>

00:27:08.870 --> 00:27:08.880 align:start position:0%
so let's remove the annotation
 

00:27:08.880 --> 00:27:11.190 align:start position:0%
so let's remove the annotation
now<00:27:09.120><c> if</c><00:27:09.200><c> you're</c><00:27:09.360><c> on</c><00:27:09.440><c> mac</c><00:27:09.760><c> press</c><00:27:10.000><c> command</c><00:27:10.480><c> and</c><00:27:10.640><c> p</c>

00:27:11.190 --> 00:27:11.200 align:start position:0%
now if you're on mac press command and p
 

00:27:11.200 --> 00:27:14.070 align:start position:0%
now if you're on mac press command and p
if<00:27:11.279><c> you're</c><00:27:11.520><c> on</c><00:27:11.600><c> windows</c><00:27:12.080><c> press</c><00:27:12.720><c> ctrl</c><00:27:13.200><c> and</c><00:27:13.360><c> p</c><00:27:13.919><c> to</c>

00:27:14.070 --> 00:27:14.080 align:start position:0%
if you're on windows press ctrl and p to
 

00:27:14.080 --> 00:27:16.230 align:start position:0%
if you're on windows press ctrl and p to
bring<00:27:14.320><c> up</c><00:27:14.400><c> the</c><00:27:14.559><c> search</c><00:27:14.880><c> box</c><00:27:15.679><c> and</c><00:27:15.919><c> go</c><00:27:16.080><c> to</c>

00:27:16.230 --> 00:27:16.240 align:start position:0%
bring up the search box and go to
 

00:27:16.240 --> 00:27:18.789 align:start position:0%
bring up the search box and go to
tsconfig.json

00:27:18.789 --> 00:27:18.799 align:start position:0%
tsconfig.json
 

00:27:18.799 --> 00:27:21.110 align:start position:0%
tsconfig.json
now<00:27:19.039><c> look</c><00:27:19.279><c> in</c><00:27:19.360><c> the</c><00:27:19.520><c> type</c><00:27:19.760><c> checking</c><00:27:20.159><c> section</c>

00:27:21.110 --> 00:27:21.120 align:start position:0%
now look in the type checking section
 

00:27:21.120 --> 00:27:23.190 align:start position:0%
now look in the type checking section
strict<00:27:21.600><c> is</c><00:27:21.760><c> turned</c><00:27:22.080><c> on</c><00:27:22.720><c> and</c><00:27:22.880><c> this</c><00:27:23.039><c> is</c>

00:27:23.190 --> 00:27:23.200 align:start position:0%
strict is turned on and this is
 

00:27:23.200 --> 00:27:25.190 align:start position:0%
strict is turned on and this is
equivalent<00:27:23.840><c> to</c><00:27:24.000><c> turning</c><00:27:24.399><c> on</c><00:27:24.720><c> some</c><00:27:24.880><c> of</c><00:27:24.960><c> the</c>

00:27:25.190 --> 00:27:25.200 align:start position:0%
equivalent to turning on some of the
 

00:27:25.200 --> 00:27:27.110 align:start position:0%
equivalent to turning on some of the
basic<00:27:25.760><c> type</c><00:27:26.000><c> checking</c><00:27:26.399><c> features</c><00:27:26.880><c> you</c><00:27:27.039><c> will</c>

00:27:27.110 --> 00:27:27.120 align:start position:0%
basic type checking features you will
 

00:27:27.120 --> 00:27:28.789 align:start position:0%
basic type checking features you will
learn<00:27:27.279><c> about</c><00:27:27.520><c> these</c><00:27:27.760><c> settings</c><00:27:28.320><c> as</c><00:27:28.480><c> we</c><00:27:28.640><c> go</c>

00:27:28.789 --> 00:27:28.799 align:start position:0%
learn about these settings as we go
 

00:27:28.799 --> 00:27:30.149 align:start position:0%
learn about these settings as we go
through<00:27:28.960><c> the</c><00:27:29.120><c> course</c>

00:27:30.149 --> 00:27:30.159 align:start position:0%
through the course
 

00:27:30.159 --> 00:27:33.110 align:start position:0%
through the course
now<00:27:30.720><c> the</c><00:27:30.880><c> first</c><00:27:31.120><c> setting</c><00:27:31.360><c> you</c><00:27:31.520><c> see</c><00:27:31.760><c> here</c><00:27:32.159><c> is</c><00:27:32.799><c> no</c>

00:27:33.110 --> 00:27:33.120 align:start position:0%
now the first setting you see here is no
 

00:27:33.120 --> 00:27:36.310 align:start position:0%
now the first setting you see here is no
implicit<00:27:33.760><c> any</c><00:27:34.320><c> so</c><00:27:34.559><c> let's</c><00:27:34.720><c> remove</c><00:27:35.039><c> the</c><00:27:35.120><c> comment</c>

00:27:36.310 --> 00:27:36.320 align:start position:0%
implicit any so let's remove the comment
 

00:27:36.320 --> 00:27:38.149 align:start position:0%
implicit any so let's remove the comment
so<00:27:36.559><c> if</c><00:27:36.720><c> this</c><00:27:36.880><c> feature</c><00:27:37.200><c> is</c><00:27:37.279><c> turned</c><00:27:37.600><c> on</c><00:27:38.000><c> the</c>

00:27:38.149 --> 00:27:38.159 align:start position:0%
so if this feature is turned on the
 

00:27:38.159 --> 00:27:40.630 align:start position:0%
so if this feature is turned on the
compiler<00:27:38.799><c> will</c><00:27:38.960><c> complain</c><00:27:39.360><c> about</c><00:27:40.000><c> implicit</c>

00:27:40.630 --> 00:27:40.640 align:start position:0%
compiler will complain about implicit
 

00:27:40.640 --> 00:27:41.750 align:start position:0%
compiler will complain about implicit
any<00:27:40.880><c> types</c>

00:27:41.750 --> 00:27:41.760 align:start position:0%
any types
 

00:27:41.760 --> 00:27:43.669 align:start position:0%
any types
now<00:27:42.000><c> let's</c><00:27:42.240><c> turn</c><00:27:42.399><c> this</c><00:27:42.640><c> off</c><00:27:42.880><c> and</c><00:27:43.039><c> see</c><00:27:43.520><c> what</c>

00:27:43.669 --> 00:27:43.679 align:start position:0%
now let's turn this off and see what
 

00:27:43.679 --> 00:27:46.789 align:start position:0%
now let's turn this off and see what
happens<00:27:44.399><c> so</c><00:27:44.640><c> back</c><00:27:44.799><c> in</c><00:27:44.960><c> index.ts</c>

00:27:46.789 --> 00:27:46.799 align:start position:0%
happens so back in index.ts
 

00:27:46.799 --> 00:27:49.190 align:start position:0%
happens so back in index.ts
the<00:27:46.960><c> error</c><00:27:47.200><c> is</c><00:27:47.279><c> gone</c><00:27:48.000><c> so</c><00:27:48.640><c> use</c><00:27:48.880><c> this</c><00:27:49.039><c> with</c>

00:27:49.190 --> 00:27:49.200 align:start position:0%
the error is gone so use this with
 

00:27:49.200 --> 00:27:50.549 align:start position:0%
the error is gone so use this with
caution<00:27:49.679><c> only</c><00:27:49.919><c> if</c><00:27:50.000><c> you</c><00:27:50.080><c> know</c><00:27:50.240><c> what</c><00:27:50.399><c> you're</c>

00:27:50.549 --> 00:27:50.559 align:start position:0%
caution only if you know what you're
 

00:27:50.559 --> 00:27:52.310 align:start position:0%
caution only if you know what you're
doing<00:27:50.960><c> otherwise</c><00:27:51.360><c> there's</c><00:27:51.600><c> really</c><00:27:51.919><c> no</c><00:27:52.080><c> point</c>

00:27:52.310 --> 00:27:52.320 align:start position:0%
doing otherwise there's really no point
 

00:27:52.320 --> 00:27:54.070 align:start position:0%
doing otherwise there's really no point
using<00:27:52.559><c> typescript</c><00:27:53.279><c> because</c><00:27:53.520><c> you</c><00:27:53.679><c> will</c><00:27:53.840><c> lose</c>

00:27:54.070 --> 00:27:54.080 align:start position:0%
using typescript because you will lose
 

00:27:54.080 --> 00:27:56.549 align:start position:0%
using typescript because you will lose
the<00:27:54.240><c> major</c><00:27:54.640><c> benefits</c><00:27:55.039><c> of</c><00:27:55.120><c> typescript</c><00:27:55.760><c> okay</c>

00:27:56.549 --> 00:27:56.559 align:start position:0%
the major benefits of typescript okay
 

00:27:56.559 --> 00:27:58.789 align:start position:0%
the major benefits of typescript okay
so<00:27:56.799><c> back</c><00:27:56.960><c> to</c><00:27:57.120><c> ts</c><00:27:57.440><c> config</c><00:27:58.159><c> i'm</c><00:27:58.320><c> going</c><00:27:58.399><c> to</c><00:27:58.559><c> revert</c>

00:27:58.789 --> 00:27:58.799 align:start position:0%
so back to ts config i'm going to revert
 

00:27:58.799 --> 00:28:00.389 align:start position:0%
so back to ts config i'm going to revert
this<00:27:59.039><c> code</c>

00:28:00.389 --> 00:28:00.399 align:start position:0%
this code
 

00:28:00.399 --> 00:28:02.710 align:start position:0%
this code
good<00:28:01.120><c> so</c><00:28:01.279><c> that's</c><00:28:01.520><c> all</c><00:28:01.679><c> about</c><00:28:01.840><c> the</c><00:28:02.000><c> any</c><00:28:02.240><c> type</c>

00:28:02.710 --> 00:28:02.720 align:start position:0%
good so that's all about the any type
 

00:28:02.720 --> 00:28:07.130 align:start position:0%
good so that's all about the any type
next<00:28:02.960><c> we're</c><00:28:03.120><c> going</c><00:28:03.200><c> to</c><00:28:03.279><c> talk</c><00:28:03.520><c> about</c><00:28:03.840><c> arrays</c>

00:28:07.130 --> 00:28:07.140 align:start position:0%
 
 

00:28:07.140 --> 00:28:12.389 align:start position:0%
 
[Music]

00:28:12.389 --> 00:28:12.399 align:start position:0%
 
 

00:28:12.399 --> 00:28:14.230 align:start position:0%
 
all<00:28:12.559><c> right</c><00:28:12.640><c> let's</c><00:28:12.799><c> talk</c><00:28:13.039><c> about</c><00:28:13.279><c> arrays</c>

00:28:14.230 --> 00:28:14.240 align:start position:0%
all right let's talk about arrays
 

00:28:14.240 --> 00:28:16.310 align:start position:0%
all right let's talk about arrays
in<00:28:14.399><c> javascript</c><00:28:15.200><c> we</c><00:28:15.360><c> can</c><00:28:15.520><c> declare</c><00:28:15.840><c> an</c><00:28:16.000><c> array</c>

00:28:16.310 --> 00:28:16.320 align:start position:0%
in javascript we can declare an array
 

00:28:16.320 --> 00:28:19.830 align:start position:0%
in javascript we can declare an array
like<00:28:16.480><c> this</c>

00:28:19.830 --> 00:28:19.840 align:start position:0%
 
 

00:28:19.840 --> 00:28:21.909 align:start position:0%
 
now<00:28:20.240><c> the</c><00:28:20.399><c> thing</c><00:28:20.640><c> about</c><00:28:20.880><c> javascript</c><00:28:21.360><c> arrays</c><00:28:21.840><c> is</c>

00:28:21.909 --> 00:28:21.919 align:start position:0%
now the thing about javascript arrays is
 

00:28:21.919 --> 00:28:24.149 align:start position:0%
now the thing about javascript arrays is
that<00:28:22.240><c> each</c><00:28:22.640><c> element</c><00:28:23.360><c> can</c><00:28:23.520><c> be</c><00:28:23.679><c> of</c><00:28:23.760><c> different</c>

00:28:24.149 --> 00:28:24.159 align:start position:0%
that each element can be of different
 

00:28:24.159 --> 00:28:27.269 align:start position:0%
that each element can be of different
type<00:28:24.799><c> so</c><00:28:25.039><c> here</c><00:28:25.200><c> we</c><00:28:25.360><c> can</c><00:28:25.600><c> have</c><00:28:26.159><c> two</c><00:28:26.320><c> numbers</c>

00:28:27.269 --> 00:28:27.279 align:start position:0%
type so here we can have two numbers
 

00:28:27.279 --> 00:28:29.190 align:start position:0%
type so here we can have two numbers
followed<00:28:28.000><c> by</c><00:28:28.240><c> a</c><00:28:28.320><c> string</c>

00:28:29.190 --> 00:28:29.200 align:start position:0%
followed by a string
 

00:28:29.200 --> 00:28:31.110 align:start position:0%
followed by a string
and<00:28:29.279><c> this</c><00:28:29.520><c> is</c><00:28:29.679><c> totally</c><00:28:30.159><c> valid</c><00:28:30.480><c> javascript</c>

00:28:31.110 --> 00:28:31.120 align:start position:0%
and this is totally valid javascript
 

00:28:31.120 --> 00:28:33.110 align:start position:0%
and this is totally valid javascript
code<00:28:31.679><c> because</c><00:28:32.080><c> javascript</c><00:28:32.640><c> arrays</c><00:28:32.960><c> are</c>

00:28:33.110 --> 00:28:33.120 align:start position:0%
code because javascript arrays are
 

00:28:33.120 --> 00:28:35.510 align:start position:0%
code because javascript arrays are
dynamic<00:28:33.679><c> so</c><00:28:34.080><c> each</c><00:28:34.399><c> element</c><00:28:35.120><c> can</c><00:28:35.279><c> be</c><00:28:35.440><c> of</c>

00:28:35.510 --> 00:28:35.520 align:start position:0%
dynamic so each element can be of
 

00:28:35.520 --> 00:28:36.710 align:start position:0%
dynamic so each element can be of
different<00:28:35.840><c> type</c>

00:28:36.710 --> 00:28:36.720 align:start position:0%
different type
 

00:28:36.720 --> 00:28:38.630 align:start position:0%
different type
but<00:28:37.039><c> what</c><00:28:37.200><c> if</c><00:28:37.360><c> we</c><00:28:37.600><c> pass</c><00:28:37.840><c> this</c><00:28:38.080><c> array</c><00:28:38.399><c> to</c><00:28:38.559><c> a</c>

00:28:38.630 --> 00:28:38.640 align:start position:0%
but what if we pass this array to a
 

00:28:38.640 --> 00:28:41.190 align:start position:0%
but what if we pass this array to a
function<00:28:39.120><c> that</c><00:28:39.360><c> expects</c><00:28:39.919><c> a</c><00:28:40.000><c> list</c><00:28:40.240><c> of</c><00:28:40.399><c> numbers</c>

00:28:41.190 --> 00:28:41.200 align:start position:0%
function that expects a list of numbers
 

00:28:41.200 --> 00:28:43.590 align:start position:0%
function that expects a list of numbers
then<00:28:41.760><c> the</c><00:28:42.000><c> third</c><00:28:42.320><c> element</c><00:28:43.039><c> is</c><00:28:43.200><c> going</c><00:28:43.279><c> to</c><00:28:43.440><c> cause</c>

00:28:43.590 --> 00:28:43.600 align:start position:0%
then the third element is going to cause
 

00:28:43.600 --> 00:28:45.669 align:start position:0%
then the third element is going to cause
some<00:28:43.840><c> issue</c><00:28:44.240><c> right</c><00:28:44.799><c> this</c><00:28:45.039><c> is</c><00:28:45.120><c> where</c><00:28:45.360><c> we</c><00:28:45.440><c> use</c>

00:28:45.669 --> 00:28:45.679 align:start position:0%
some issue right this is where we use
 

00:28:45.679 --> 00:28:48.870 align:start position:0%
some issue right this is where we use
typescript<00:28:46.720><c> so</c><00:28:46.880><c> we</c><00:28:47.039><c> can</c><00:28:47.200><c> explicitly</c><00:28:47.840><c> apply</c><00:28:48.720><c> a</c>

00:28:48.870 --> 00:28:48.880 align:start position:0%
typescript so we can explicitly apply a
 

00:28:48.880 --> 00:28:50.470 align:start position:0%
typescript so we can explicitly apply a
type<00:28:49.120><c> annotation</c><00:28:49.679><c> here</c>

00:28:50.470 --> 00:28:50.480 align:start position:0%
type annotation here
 

00:28:50.480 --> 00:28:53.909 align:start position:0%
type annotation here
and<00:28:50.640><c> say</c><00:28:50.960><c> numbers</c><00:28:51.679><c> is</c><00:28:51.919><c> a</c><00:28:52.080><c> number</c><00:28:52.799><c> array</c>

00:28:53.909 --> 00:28:53.919 align:start position:0%
and say numbers is a number array
 

00:28:53.919 --> 00:28:55.990 align:start position:0%
and say numbers is a number array
now<00:28:54.559><c> we</c><00:28:54.720><c> see</c><00:28:54.880><c> the</c><00:28:55.039><c> error</c><00:28:55.360><c> immediately</c><00:28:55.840><c> at</c>

00:28:55.990 --> 00:28:56.000 align:start position:0%
now we see the error immediately at
 

00:28:56.000 --> 00:28:59.029 align:start position:0%
now we see the error immediately at
compile<00:28:56.480><c> time</c><00:28:56.880><c> so</c><00:28:57.120><c> let's</c><00:28:57.360><c> fix</c><00:28:57.679><c> it</c>

00:28:59.029 --> 00:28:59.039 align:start position:0%
compile time so let's fix it
 

00:28:59.039 --> 00:28:59.990 align:start position:0%
compile time so let's fix it
good

00:28:59.990 --> 00:29:00.000 align:start position:0%
good
 

00:29:00.000 --> 00:29:01.510 align:start position:0%
good
now<00:29:00.240><c> in</c><00:29:00.320><c> this</c><00:29:00.480><c> particular</c><00:29:00.960><c> case</c><00:29:01.200><c> we</c><00:29:01.360><c> don't</c>

00:29:01.510 --> 00:29:01.520 align:start position:0%
now in this particular case we don't
 

00:29:01.520 --> 00:29:03.909 align:start position:0%
now in this particular case we don't
even<00:29:01.760><c> have</c><00:29:01.919><c> to</c><00:29:02.159><c> apply</c><00:29:02.399><c> the</c><00:29:02.559><c> type</c><00:29:02.799><c> annotation</c>

00:29:03.909 --> 00:29:03.919 align:start position:0%
even have to apply the type annotation
 

00:29:03.919 --> 00:29:05.909 align:start position:0%
even have to apply the type annotation
because<00:29:04.320><c> every</c><00:29:04.720><c> element</c><00:29:05.200><c> in</c><00:29:05.279><c> this</c><00:29:05.440><c> list</c><00:29:05.679><c> is</c><00:29:05.840><c> a</c>

00:29:05.909 --> 00:29:05.919 align:start position:0%
because every element in this list is a
 

00:29:05.919 --> 00:29:08.310 align:start position:0%
because every element in this list is a
number<00:29:06.720><c> so</c><00:29:06.880><c> if</c><00:29:07.039><c> you</c><00:29:07.200><c> remove</c><00:29:07.919><c> the</c><00:29:08.080><c> type</c>

00:29:08.310 --> 00:29:08.320 align:start position:0%
number so if you remove the type
 

00:29:08.320 --> 00:29:09.590 align:start position:0%
number so if you remove the type
annotation

00:29:09.590 --> 00:29:09.600 align:start position:0%
annotation
 

00:29:09.600 --> 00:29:11.029 align:start position:0%
annotation
the<00:29:09.760><c> compiler</c>

00:29:11.029 --> 00:29:11.039 align:start position:0%
the compiler
 

00:29:11.039 --> 00:29:13.350 align:start position:0%
the compiler
can<00:29:11.279><c> still</c><00:29:11.840><c> infer</c><00:29:12.320><c> or</c><00:29:12.480><c> guess</c><00:29:12.799><c> the</c><00:29:12.960><c> type</c><00:29:13.200><c> of</c>

00:29:13.350 --> 00:29:13.360 align:start position:0%
can still infer or guess the type of
 

00:29:13.360 --> 00:29:14.950 align:start position:0%
can still infer or guess the type of
this<00:29:13.520><c> variable</c><00:29:14.080><c> great</c>

00:29:14.950 --> 00:29:14.960 align:start position:0%
this variable great
 

00:29:14.960 --> 00:29:18.149 align:start position:0%
this variable great
but<00:29:15.200><c> what</c><00:29:15.440><c> if</c><00:29:15.520><c> we</c><00:29:15.679><c> had</c><00:29:16.080><c> an</c><00:29:16.240><c> empty</c><00:29:16.559><c> array</c><00:29:16.799><c> here</c>

00:29:18.149 --> 00:29:18.159 align:start position:0%
but what if we had an empty array here
 

00:29:18.159 --> 00:29:19.269 align:start position:0%
but what if we had an empty array here
look

00:29:19.269 --> 00:29:19.279 align:start position:0%
look
 

00:29:19.279 --> 00:29:21.269 align:start position:0%
look
now<00:29:19.440><c> the</c><00:29:19.600><c> type</c><00:29:19.840><c> of</c><00:29:19.919><c> this</c><00:29:20.080><c> variable</c><00:29:20.720><c> is</c><00:29:21.039><c> any</c>

00:29:21.269 --> 00:29:21.279 align:start position:0%
now the type of this variable is any
 

00:29:21.279 --> 00:29:23.269 align:start position:0%
now the type of this variable is any
array<00:29:21.600><c> which</c><00:29:21.760><c> is</c><00:29:21.840><c> something</c><00:29:22.080><c> we</c><00:29:22.240><c> should</c><00:29:22.480><c> avoid</c>

00:29:23.269 --> 00:29:23.279 align:start position:0%
array which is something we should avoid
 

00:29:23.279 --> 00:29:25.909 align:start position:0%
array which is something we should avoid
with<00:29:23.600><c> any</c><00:29:23.760><c> arrays</c><00:29:24.320><c> again</c><00:29:24.640><c> we</c><00:29:24.799><c> can</c><00:29:24.960><c> have</c><00:29:25.520><c> a</c><00:29:25.600><c> mix</c>

00:29:25.909 --> 00:29:25.919 align:start position:0%
with any arrays again we can have a mix
 

00:29:25.919 --> 00:29:28.470 align:start position:0%
with any arrays again we can have a mix
of<00:29:26.080><c> different</c><00:29:26.399><c> types</c><00:29:27.039><c> so</c><00:29:27.200><c> the</c><00:29:27.360><c> first</c><00:29:27.679><c> element</c>

00:29:28.470 --> 00:29:28.480 align:start position:0%
of different types so the first element
 

00:29:28.480 --> 00:29:29.909 align:start position:0%
of different types so the first element
can<00:29:28.720><c> be</c><00:29:28.799><c> a</c><00:29:28.960><c> number</c>

00:29:29.909 --> 00:29:29.919 align:start position:0%
can be a number
 

00:29:29.919 --> 00:29:31.990 align:start position:0%
can be a number
the<00:29:30.080><c> second</c><00:29:30.480><c> element</c><00:29:31.200><c> can</c><00:29:31.360><c> be</c><00:29:31.520><c> of</c><00:29:31.679><c> a</c><00:29:31.760><c> different</c>

00:29:31.990 --> 00:29:32.000 align:start position:0%
the second element can be of a different
 

00:29:32.000 --> 00:29:34.710 align:start position:0%
the second element can be of a different
type<00:29:32.320><c> like</c><00:29:32.640><c> a</c><00:29:32.880><c> string</c><00:29:33.279><c> or</c><00:29:33.440><c> a</c><00:29:33.520><c> boolean</c><00:29:34.399><c> so</c><00:29:34.559><c> if</c>

00:29:34.710 --> 00:29:34.720 align:start position:0%
type like a string or a boolean so if
 

00:29:34.720 --> 00:29:36.710 align:start position:0%
type like a string or a boolean so if
you<00:29:34.799><c> want</c><00:29:34.880><c> to</c><00:29:34.960><c> use</c><00:29:35.360><c> an</c><00:29:35.520><c> empty</c><00:29:35.840><c> array</c><00:29:36.399><c> you</c><00:29:36.559><c> have</c>

00:29:36.710 --> 00:29:36.720 align:start position:0%
you want to use an empty array you have
 

00:29:36.720 --> 00:29:39.029 align:start position:0%
you want to use an empty array you have
to<00:29:36.960><c> explicitly</c><00:29:37.679><c> apply</c><00:29:38.080><c> a</c><00:29:38.240><c> type</c><00:29:38.559><c> annotation</c>

00:29:39.029 --> 00:29:39.039 align:start position:0%
to explicitly apply a type annotation
 

00:29:39.039 --> 00:29:42.070 align:start position:0%
to explicitly apply a type annotation
here<00:29:39.360><c> let's</c><00:29:39.520><c> say</c><00:29:40.080><c> number</c><00:29:40.960><c> array</c>

00:29:42.070 --> 00:29:42.080 align:start position:0%
here let's say number array
 

00:29:42.080 --> 00:29:45.190 align:start position:0%
here let's say number array
now<00:29:42.559><c> the</c><00:29:42.799><c> third</c><00:29:43.120><c> line</c><00:29:43.440><c> is</c><00:29:43.600><c> invalid</c><00:29:44.320><c> so</c><00:29:44.960><c> let's</c>

00:29:45.190 --> 00:29:45.200 align:start position:0%
now the third line is invalid so let's
 

00:29:45.200 --> 00:29:46.310 align:start position:0%
now the third line is invalid so let's
delete<00:29:45.520><c> it</c>

00:29:46.310 --> 00:29:46.320 align:start position:0%
delete it
 

00:29:46.320 --> 00:29:48.310 align:start position:0%
delete it
now<00:29:46.480><c> let</c><00:29:46.640><c> me</c><00:29:46.720><c> show</c><00:29:46.880><c> you</c><00:29:47.200><c> another</c><00:29:47.679><c> cool</c><00:29:47.919><c> benefit</c>

00:29:48.310 --> 00:29:48.320 align:start position:0%
now let me show you another cool benefit
 

00:29:48.320 --> 00:29:49.909 align:start position:0%
now let me show you another cool benefit
of<00:29:48.399><c> using</c><00:29:48.640><c> typescript</c><00:29:49.200><c> and</c><00:29:49.279><c> that</c><00:29:49.440><c> is</c><00:29:49.600><c> code</c>

00:29:49.909 --> 00:29:49.919 align:start position:0%
of using typescript and that is code
 

00:29:49.919 --> 00:29:52.870 align:start position:0%
of using typescript and that is code
completion<00:29:50.559><c> or</c><00:29:51.039><c> intellisense</c><00:29:52.159><c> so</c><00:29:52.320><c> if</c><00:29:52.480><c> we</c><00:29:52.559><c> type</c>

00:29:52.870 --> 00:29:52.880 align:start position:0%
completion or intellisense so if we type
 

00:29:52.880 --> 00:29:55.110 align:start position:0%
completion or intellisense so if we type
numbers<00:29:53.679><c> that</c><00:29:53.919><c> for</c><00:29:54.159><c> each</c>

00:29:55.110 --> 00:29:55.120 align:start position:0%
numbers that for each
 

00:29:55.120 --> 00:29:57.750 align:start position:0%
numbers that for each
and<00:29:55.440><c> pass</c><00:29:56.000><c> an</c><00:29:56.240><c> arrow</c><00:29:56.480><c> function</c><00:29:56.799><c> here</c><00:29:57.120><c> like</c><00:29:57.520><c> n</c>

00:29:57.750 --> 00:29:57.760 align:start position:0%
and pass an arrow function here like n
 

00:29:57.760 --> 00:29:58.789 align:start position:0%
and pass an arrow function here like n
goes<00:29:58.000><c> to</c>

00:29:58.789 --> 00:29:58.799 align:start position:0%
goes to
 

00:29:58.799 --> 00:30:01.029 align:start position:0%
goes to
and<00:29:58.880><c> then</c><00:29:59.039><c> type</c><00:29:59.440><c> n</c><00:29:59.840><c> period</c>

00:30:01.029 --> 00:30:01.039 align:start position:0%
and then type n period
 

00:30:01.039 --> 00:30:03.110 align:start position:0%
and then type n period
over<00:30:01.279><c> here</c><00:30:01.520><c> we</c><00:30:01.679><c> can</c><00:30:01.760><c> see</c><00:30:02.080><c> all</c><00:30:02.320><c> the</c><00:30:02.559><c> properties</c>

00:30:03.110 --> 00:30:03.120 align:start position:0%
over here we can see all the properties
 

00:30:03.120 --> 00:30:05.269 align:start position:0%
over here we can see all the properties
and<00:30:03.279><c> methods</c><00:30:03.840><c> of</c><00:30:04.000><c> number</c><00:30:04.399><c> objects</c><00:30:04.960><c> because</c>

00:30:05.269 --> 00:30:05.279 align:start position:0%
and methods of number objects because
 

00:30:05.279 --> 00:30:07.750 align:start position:0%
and methods of number objects because
our<00:30:05.520><c> editor</c><00:30:05.919><c> knows</c><00:30:06.159><c> the</c><00:30:06.320><c> type</c><00:30:06.559><c> of</c><00:30:06.720><c> n</c><00:30:07.120><c> it</c><00:30:07.360><c> offers</c>

00:30:07.750 --> 00:30:07.760 align:start position:0%
our editor knows the type of n it offers
 

00:30:07.760 --> 00:30:10.070 align:start position:0%
our editor knows the type of n it offers
code<00:30:08.080><c> completion</c><00:30:08.720><c> so</c><00:30:09.039><c> we</c><00:30:09.200><c> can</c><00:30:09.360><c> see</c><00:30:09.679><c> all</c><00:30:09.840><c> the</c>

00:30:10.070 --> 00:30:10.080 align:start position:0%
code completion so we can see all the
 

00:30:10.080 --> 00:30:11.990 align:start position:0%
code completion so we can see all the
methods<00:30:10.480><c> of</c><00:30:10.640><c> number</c><00:30:11.039><c> objects</c><00:30:11.440><c> this</c><00:30:11.600><c> is</c><00:30:11.760><c> very</c>

00:30:11.990 --> 00:30:12.000 align:start position:0%
methods of number objects this is very
 

00:30:12.000 --> 00:30:13.669 align:start position:0%
methods of number objects this is very
useful<00:30:12.320><c> it's</c><00:30:12.480><c> a</c><00:30:12.640><c> great</c><00:30:13.039><c> productivity</c>

00:30:13.669 --> 00:30:13.679 align:start position:0%
useful it's a great productivity
 

00:30:13.679 --> 00:30:15.590 align:start position:0%
useful it's a great productivity
boosting<00:30:14.080><c> feature</c><00:30:14.720><c> we</c><00:30:14.880><c> don't</c><00:30:15.039><c> get</c><00:30:15.200><c> this</c><00:30:15.440><c> with</c>

00:30:15.590 --> 00:30:15.600 align:start position:0%
boosting feature we don't get this with
 

00:30:15.600 --> 00:30:17.350 align:start position:0%
boosting feature we don't get this with
plain<00:30:15.919><c> javascript</c><00:30:16.559><c> right</c>

00:30:17.350 --> 00:30:17.360 align:start position:0%
plain javascript right
 

00:30:17.360 --> 00:30:18.950 align:start position:0%
plain javascript right
so<00:30:17.520><c> that's</c><00:30:17.919><c> another</c><00:30:18.240><c> benefit</c><00:30:18.640><c> of</c><00:30:18.720><c> using</c>

00:30:18.950 --> 00:30:18.960 align:start position:0%
so that's another benefit of using
 

00:30:18.960 --> 00:30:21.029 align:start position:0%
so that's another benefit of using
typescript<00:30:19.679><c> that's</c><00:30:20.000><c> all</c><00:30:20.159><c> about</c><00:30:20.320><c> the</c><00:30:20.480><c> arrays</c>

00:30:21.029 --> 00:30:21.039 align:start position:0%
typescript that's all about the arrays
 

00:30:21.039 --> 00:30:25.340 align:start position:0%
typescript that's all about the arrays
next<00:30:21.360><c> we're</c><00:30:21.520><c> going</c><00:30:21.520><c> to</c><00:30:21.600><c> talk</c><00:30:21.840><c> about</c><00:30:22.159><c> tuples</c>

00:30:25.340 --> 00:30:25.350 align:start position:0%
 
 

00:30:25.350 --> 00:30:30.630 align:start position:0%
 
[Music]

00:30:30.630 --> 00:30:30.640 align:start position:0%
 
 

00:30:30.640 --> 00:30:32.950 align:start position:0%
 
typescript<00:30:31.200><c> has</c><00:30:31.520><c> a</c><00:30:31.600><c> new</c><00:30:31.840><c> type</c><00:30:32.080><c> called</c><00:30:32.399><c> topple</c>

00:30:32.950 --> 00:30:32.960 align:start position:0%
typescript has a new type called topple
 

00:30:32.960 --> 00:30:35.029 align:start position:0%
typescript has a new type called topple
which<00:30:33.200><c> is</c><00:30:33.360><c> a</c><00:30:33.440><c> fixed</c><00:30:33.760><c> length</c><00:30:34.000><c> array</c><00:30:34.399><c> where</c><00:30:34.720><c> each</c>

00:30:35.029 --> 00:30:35.039 align:start position:0%
which is a fixed length array where each
 

00:30:35.039 --> 00:30:37.430 align:start position:0%
which is a fixed length array where each
element<00:30:35.440><c> has</c><00:30:35.600><c> a</c><00:30:35.760><c> particular</c><00:30:36.320><c> type</c><00:30:37.039><c> we</c><00:30:37.200><c> often</c>

00:30:37.430 --> 00:30:37.440 align:start position:0%
element has a particular type we often
 

00:30:37.440 --> 00:30:39.029 align:start position:0%
element has a particular type we often
use<00:30:37.679><c> them</c><00:30:37.840><c> when</c><00:30:38.080><c> working</c><00:30:38.399><c> with</c><00:30:38.640><c> a</c><00:30:38.720><c> pair</c><00:30:38.880><c> of</c>

00:30:39.029 --> 00:30:39.039 align:start position:0%
use them when working with a pair of
 

00:30:39.039 --> 00:30:41.029 align:start position:0%
use them when working with a pair of
values<00:30:39.840><c> for</c><00:30:40.000><c> example</c><00:30:40.399><c> let's</c><00:30:40.559><c> say</c><00:30:40.720><c> for</c><00:30:40.880><c> each</c>

00:30:41.029 --> 00:30:41.039 align:start position:0%
values for example let's say for each
 

00:30:41.039 --> 00:30:43.909 align:start position:0%
values for example let's say for each
user<00:30:41.600><c> we</c><00:30:41.760><c> want</c><00:30:41.840><c> to</c><00:30:41.919><c> represent</c><00:30:42.720><c> two</c><00:30:42.960><c> values</c><00:30:43.760><c> an</c>

00:30:43.909 --> 00:30:43.919 align:start position:0%
user we want to represent two values an
 

00:30:43.919 --> 00:30:44.950 align:start position:0%
user we want to represent two values an
id

00:30:44.950 --> 00:30:44.960 align:start position:0%
id
 

00:30:44.960 --> 00:30:46.070 align:start position:0%
id
and<00:30:45.120><c> an</c><00:30:45.279><c> a</c>

00:30:46.070 --> 00:30:46.080 align:start position:0%
and an a
 

00:30:46.080 --> 00:30:48.149 align:start position:0%
and an a
so<00:30:46.320><c> we</c><00:30:46.399><c> declare</c><00:30:46.799><c> a</c><00:30:46.960><c> variable</c>

00:30:48.149 --> 00:30:48.159 align:start position:0%
so we declare a variable
 

00:30:48.159 --> 00:30:50.310 align:start position:0%
so we declare a variable
and<00:30:48.480><c> annotate</c><00:30:48.960><c> it</c><00:30:49.039><c> using</c><00:30:49.279><c> a</c><00:30:49.440><c> special</c><00:30:49.840><c> syntax</c>

00:30:50.310 --> 00:30:50.320 align:start position:0%
and annotate it using a special syntax
 

00:30:50.320 --> 00:30:52.789 align:start position:0%
and annotate it using a special syntax
like<00:30:50.480><c> this</c><00:30:51.039><c> first</c><00:30:51.279><c> we</c><00:30:51.440><c> add</c><00:30:51.600><c> square</c><00:30:51.919><c> brackets</c>

00:30:52.789 --> 00:30:52.799 align:start position:0%
like this first we add square brackets
 

00:30:52.799 --> 00:30:54.549 align:start position:0%
like this first we add square brackets
and<00:30:52.960><c> then</c><00:30:53.120><c> tell</c><00:30:53.360><c> the</c><00:30:53.440><c> compiler</c><00:30:54.240><c> that</c><00:30:54.399><c> the</c>

00:30:54.549 --> 00:30:54.559 align:start position:0%
and then tell the compiler that the
 

00:30:54.559 --> 00:30:56.870 align:start position:0%
and then tell the compiler that the
first<00:30:54.880><c> element</c><00:30:55.279><c> is</c><00:30:55.360><c> going</c><00:30:55.440><c> to</c><00:30:55.520><c> be</c><00:30:55.679><c> a</c><00:30:55.760><c> number</c>

00:30:56.870 --> 00:30:56.880 align:start position:0%
first element is going to be a number
 

00:30:56.880 --> 00:30:58.230 align:start position:0%
first element is going to be a number
whereas<00:30:57.200><c> the</c><00:30:57.279><c> second</c><00:30:57.600><c> element</c><00:30:57.919><c> is</c><00:30:58.080><c> going</c><00:30:58.159><c> to</c>

00:30:58.230 --> 00:30:58.240 align:start position:0%
whereas the second element is going to
 

00:30:58.240 --> 00:30:59.509 align:start position:0%
whereas the second element is going to
be<00:30:58.320><c> a</c><00:30:58.480><c> string</c>

00:30:59.509 --> 00:30:59.519 align:start position:0%
be a string
 

00:30:59.519 --> 00:31:01.669 align:start position:0%
be a string
and<00:30:59.600><c> then</c><00:30:59.760><c> we</c><00:30:59.919><c> initialize</c><00:31:00.480><c> our</c><00:31:00.640><c> variable</c><00:31:01.200><c> like</c>

00:31:01.669 --> 00:31:01.679 align:start position:0%
and then we initialize our variable like
 

00:31:01.679 --> 00:31:02.950 align:start position:0%
and then we initialize our variable like
this

00:31:02.950 --> 00:31:02.960 align:start position:0%
this
 

00:31:02.960 --> 00:31:04.549 align:start position:0%
this
so<00:31:03.120><c> we</c><00:31:03.279><c> have</c><00:31:03.360><c> a</c><00:31:03.519><c> fixed</c><00:31:03.760><c> length</c><00:31:04.000><c> array</c><00:31:04.320><c> with</c>

00:31:04.549 --> 00:31:04.559 align:start position:0%
so we have a fixed length array with
 

00:31:04.559 --> 00:31:06.470 align:start position:0%
so we have a fixed length array with
exactly<00:31:05.039><c> two</c><00:31:05.200><c> elements</c><00:31:05.840><c> nothing</c><00:31:06.240><c> more</c>

00:31:06.470 --> 00:31:06.480 align:start position:0%
exactly two elements nothing more
 

00:31:06.480 --> 00:31:08.630 align:start position:0%
exactly two elements nothing more
nothing<00:31:06.799><c> less</c><00:31:07.519><c> so</c><00:31:07.679><c> if</c><00:31:07.760><c> we</c><00:31:07.919><c> add</c><00:31:08.240><c> a</c><00:31:08.399><c> third</c>

00:31:08.630 --> 00:31:08.640 align:start position:0%
nothing less so if we add a third
 

00:31:08.640 --> 00:31:11.909 align:start position:0%
nothing less so if we add a third
element<00:31:09.039><c> here</c><00:31:09.760><c> we</c><00:31:09.919><c> get</c><00:31:10.080><c> a</c><00:31:10.159><c> compilation</c><00:31:10.799><c> error</c>

00:31:11.909 --> 00:31:11.919 align:start position:0%
element here we get a compilation error
 

00:31:11.919 --> 00:31:14.950 align:start position:0%
element here we get a compilation error
saying<00:31:12.480><c> type</c><00:31:13.039><c> number</c><00:31:13.519><c> string</c><00:31:13.840><c> number</c><00:31:14.559><c> is</c><00:31:14.720><c> not</c>

00:31:14.950 --> 00:31:14.960 align:start position:0%
saying type number string number is not
 

00:31:14.960 --> 00:31:18.070 align:start position:0%
saying type number string number is not
assignable<00:31:15.440><c> to</c><00:31:15.600><c> type</c><00:31:16.080><c> number</c><00:31:16.559><c> string</c><00:31:17.039><c> okay</c><00:31:17.840><c> so</c>

00:31:18.070 --> 00:31:18.080 align:start position:0%
assignable to type number string okay so
 

00:31:18.080 --> 00:31:20.710 align:start position:0%
assignable to type number string okay so
exactly<00:31:18.480><c> two</c><00:31:18.640><c> elements</c><00:31:19.279><c> and</c><00:31:19.919><c> these</c><00:31:20.240><c> elements</c>

00:31:20.710 --> 00:31:20.720 align:start position:0%
exactly two elements and these elements
 

00:31:20.720 --> 00:31:22.950 align:start position:0%
exactly two elements and these elements
should<00:31:20.960><c> have</c><00:31:21.600><c> these</c><00:31:21.919><c> types</c><00:31:22.320><c> the</c><00:31:22.480><c> first</c><00:31:22.720><c> one</c>

00:31:22.950 --> 00:31:22.960 align:start position:0%
should have these types the first one
 

00:31:22.960 --> 00:31:25.110 align:start position:0%
should have these types the first one
has<00:31:23.200><c> to</c><00:31:23.279><c> be</c><00:31:23.440><c> a</c><00:31:23.519><c> number</c><00:31:24.080><c> so</c><00:31:24.240><c> if</c><00:31:24.320><c> we</c><00:31:24.480><c> pass</c><00:31:24.880><c> a</c>

00:31:25.110 --> 00:31:25.120 align:start position:0%
has to be a number so if we pass a
 

00:31:25.120 --> 00:31:28.310 align:start position:0%
has to be a number so if we pass a
string<00:31:25.760><c> again</c><00:31:26.320><c> we</c><00:31:26.480><c> get</c><00:31:26.640><c> a</c><00:31:26.720><c> compilation</c><00:31:27.360><c> error</c>

00:31:28.310 --> 00:31:28.320 align:start position:0%
string again we get a compilation error
 

00:31:28.320 --> 00:31:30.389 align:start position:0%
string again we get a compilation error
now<00:31:28.960><c> just</c><00:31:29.200><c> like</c><00:31:29.360><c> before</c><00:31:29.679><c> here</c><00:31:29.919><c> we</c><00:31:30.080><c> get</c>

00:31:30.389 --> 00:31:30.399 align:start position:0%
now just like before here we get
 

00:31:30.399 --> 00:31:33.029 align:start position:0%
now just like before here we get
intellisense<00:31:31.120><c> or</c><00:31:31.440><c> code</c><00:31:31.760><c> completion</c>

00:31:33.029 --> 00:31:33.039 align:start position:0%
intellisense or code completion
 

00:31:33.039 --> 00:31:35.269 align:start position:0%
intellisense or code completion
so<00:31:33.200><c> if</c><00:31:33.279><c> we</c><00:31:33.440><c> access</c><00:31:33.760><c> the</c><00:31:33.840><c> first</c><00:31:34.080><c> element</c>

00:31:35.269 --> 00:31:35.279 align:start position:0%
so if we access the first element
 

00:31:35.279 --> 00:31:38.149 align:start position:0%
so if we access the first element
we<00:31:35.440><c> see</c><00:31:35.679><c> all</c><00:31:35.840><c> the</c><00:31:36.080><c> methods</c><00:31:36.559><c> of</c><00:31:36.720><c> number</c><00:31:37.120><c> objects</c>

00:31:38.149 --> 00:31:38.159 align:start position:0%
we see all the methods of number objects
 

00:31:38.159 --> 00:31:40.630 align:start position:0%
we see all the methods of number objects
and<00:31:38.399><c> if</c><00:31:38.559><c> you</c><00:31:38.720><c> access</c><00:31:39.039><c> the</c><00:31:39.200><c> second</c><00:31:39.519><c> element</c><00:31:40.399><c> we</c>

00:31:40.630 --> 00:31:40.640 align:start position:0%
and if you access the second element we
 

00:31:40.640 --> 00:31:42.870 align:start position:0%
and if you access the second element we
see<00:31:40.799><c> all</c><00:31:40.960><c> the</c><00:31:41.120><c> properties</c><00:31:41.679><c> and</c><00:31:42.240><c> methods</c><00:31:42.720><c> of</c>

00:31:42.870 --> 00:31:42.880 align:start position:0%
see all the properties and methods of
 

00:31:42.880 --> 00:31:44.950 align:start position:0%
see all the properties and methods of
string<00:31:43.279><c> objects</c><00:31:43.679><c> again</c><00:31:44.159><c> one</c><00:31:44.399><c> of</c><00:31:44.480><c> the</c><00:31:44.640><c> reasons</c>

00:31:44.950 --> 00:31:44.960 align:start position:0%
string objects again one of the reasons
 

00:31:44.960 --> 00:31:46.389 align:start position:0%
string objects again one of the reasons
i<00:31:45.120><c> love</c><00:31:45.279><c> typescript</c>

00:31:46.389 --> 00:31:46.399 align:start position:0%
i love typescript
 

00:31:46.399 --> 00:31:47.909 align:start position:0%
i love typescript
now<00:31:46.880><c> one</c><00:31:47.039><c> thing</c><00:31:47.200><c> you</c><00:31:47.360><c> need</c><00:31:47.440><c> to</c><00:31:47.519><c> know</c><00:31:47.679><c> about</c>

00:31:47.909 --> 00:31:47.919 align:start position:0%
now one thing you need to know about
 

00:31:47.919 --> 00:31:50.070 align:start position:0%
now one thing you need to know about
tuples<00:31:48.399><c> is</c><00:31:48.559><c> that</c><00:31:49.120><c> internally</c><00:31:49.919><c> they're</c>

00:31:50.070 --> 00:31:50.080 align:start position:0%
tuples is that internally they're
 

00:31:50.080 --> 00:31:52.470 align:start position:0%
tuples is that internally they're
represented<00:31:50.880><c> using</c><00:31:51.200><c> plain</c><00:31:51.840><c> javascript</c>

00:31:52.470 --> 00:31:52.480 align:start position:0%
represented using plain javascript
 

00:31:52.480 --> 00:31:54.630 align:start position:0%
represented using plain javascript
arrays<00:31:53.120><c> so</c><00:31:53.279><c> if</c><00:31:53.440><c> we</c><00:31:53.519><c> compile</c><00:31:54.000><c> our</c><00:31:54.159><c> code</c><00:31:54.480><c> we're</c>

00:31:54.630 --> 00:31:54.640 align:start position:0%
arrays so if we compile our code we're
 

00:31:54.640 --> 00:31:56.950 align:start position:0%
arrays so if we compile our code we're
just<00:31:54.880><c> going</c><00:31:55.039><c> to</c><00:31:55.120><c> see</c><00:31:55.360><c> a</c><00:31:55.600><c> regular</c><00:31:56.320><c> javascript</c>

00:31:56.950 --> 00:31:56.960 align:start position:0%
just going to see a regular javascript
 

00:31:56.960 --> 00:31:59.430 align:start position:0%
just going to see a regular javascript
array<00:31:57.200><c> let</c><00:31:57.360><c> me</c><00:31:57.440><c> show</c><00:31:57.600><c> you</c><00:31:58.240><c> so</c><00:31:58.640><c> in</c><00:31:58.799><c> the</c><00:31:58.880><c> terminal</c>

00:31:59.430 --> 00:31:59.440 align:start position:0%
array let me show you so in the terminal
 

00:31:59.440 --> 00:32:01.509 align:start position:0%
array let me show you so in the terminal
let's<00:31:59.679><c> run</c><00:32:00.000><c> tsc</c>

00:32:01.509 --> 00:32:01.519 align:start position:0%
let's run tsc
 

00:32:01.519 --> 00:32:02.870 align:start position:0%
let's run tsc
good

00:32:02.870 --> 00:32:02.880 align:start position:0%
good
 

00:32:02.880 --> 00:32:05.190 align:start position:0%
good
now<00:32:03.279><c> back</c><00:32:03.519><c> in</c><00:32:03.679><c> our</c><00:32:03.840><c> project</c><00:32:04.640><c> here</c><00:32:04.799><c> in</c><00:32:05.039><c> this</c>

00:32:05.190 --> 00:32:05.200 align:start position:0%
now back in our project here in this
 

00:32:05.200 --> 00:32:08.310 align:start position:0%
now back in our project here in this
folder<00:32:05.600><c> let's</c><00:32:05.840><c> open</c><00:32:06.399><c> index.js</c><00:32:07.519><c> look</c><00:32:07.919><c> we</c><00:32:08.080><c> just</c>

00:32:08.310 --> 00:32:08.320 align:start position:0%
folder let's open index.js look we just
 

00:32:08.320 --> 00:32:11.350 align:start position:0%
folder let's open index.js look we just
have<00:32:08.559><c> a</c><00:32:08.799><c> regular</c><00:32:09.440><c> javascript</c><00:32:10.080><c> array</c><00:32:10.880><c> so</c><00:32:11.120><c> that</c>

00:32:11.350 --> 00:32:11.360 align:start position:0%
have a regular javascript array so that
 

00:32:11.360 --> 00:32:13.830 align:start position:0%
have a regular javascript array so that
means<00:32:12.000><c> back</c><00:32:12.159><c> in</c><00:32:12.320><c> our</c><00:32:12.399><c> typescript</c><00:32:12.880><c> code</c>

00:32:13.830 --> 00:32:13.840 align:start position:0%
means back in our typescript code
 

00:32:13.840 --> 00:32:16.070 align:start position:0%
means back in our typescript code
if<00:32:13.919><c> we</c><00:32:14.159><c> type</c><00:32:14.480><c> user</c><00:32:15.039><c> period</c>

00:32:16.070 --> 00:32:16.080 align:start position:0%
if we type user period
 

00:32:16.080 --> 00:32:18.389 align:start position:0%
if we type user period
over<00:32:16.320><c> here</c><00:32:16.559><c> we</c><00:32:16.720><c> can</c><00:32:16.880><c> see</c><00:32:17.200><c> all</c><00:32:17.440><c> the</c><00:32:17.679><c> methods</c><00:32:18.159><c> of</c>

00:32:18.389 --> 00:32:18.399 align:start position:0%
over here we can see all the methods of
 

00:32:18.399 --> 00:32:19.750 align:start position:0%
over here we can see all the methods of
array<00:32:18.799><c> objects</c>

00:32:19.750 --> 00:32:19.760 align:start position:0%
array objects
 

00:32:19.760 --> 00:32:21.269 align:start position:0%
array objects
now<00:32:19.919><c> one</c><00:32:20.080><c> of</c><00:32:20.159><c> this</c><00:32:20.399><c> method</c><00:32:20.720><c> is</c><00:32:20.880><c> a</c><00:32:20.960><c> little</c><00:32:21.120><c> bit</c>

00:32:21.269 --> 00:32:21.279 align:start position:0%
now one of this method is a little bit
 

00:32:21.279 --> 00:32:23.750 align:start position:0%
now one of this method is a little bit
troublesome<00:32:21.919><c> and</c><00:32:22.000><c> that</c><00:32:22.240><c> is</c><00:32:22.320><c> the</c><00:32:22.559><c> push</c><00:32:22.880><c> method</c>

00:32:23.750 --> 00:32:23.760 align:start position:0%
troublesome and that is the push method
 

00:32:23.760 --> 00:32:26.549 align:start position:0%
troublesome and that is the push method
so<00:32:23.919><c> we</c><00:32:24.000><c> can</c><00:32:24.240><c> call</c><00:32:24.399><c> this</c><00:32:24.640><c> method</c><00:32:25.519><c> and</c><00:32:25.760><c> store</c><00:32:26.399><c> a</c>

00:32:26.549 --> 00:32:26.559 align:start position:0%
so we can call this method and store a
 

00:32:26.559 --> 00:32:28.230 align:start position:0%
so we can call this method and store a
third<00:32:26.880><c> value</c><00:32:27.200><c> in</c><00:32:27.279><c> this</c><00:32:27.519><c> array</c><00:32:28.000><c> and</c><00:32:28.159><c> the</c>

00:32:28.230 --> 00:32:28.240 align:start position:0%
third value in this array and the
 

00:32:28.240 --> 00:32:30.230 align:start position:0%
third value in this array and the
compiler<00:32:28.799><c> is</c><00:32:28.880><c> not</c><00:32:29.039><c> going</c><00:32:29.200><c> to</c><00:32:29.279><c> complain</c><00:32:29.760><c> here</c><00:32:30.080><c> i</c>

00:32:30.230 --> 00:32:30.240 align:start position:0%
compiler is not going to complain here i
 

00:32:30.240 --> 00:32:31.990 align:start position:0%
compiler is not going to complain here i
believe<00:32:30.720><c> this</c><00:32:30.960><c> is</c><00:32:31.039><c> one</c><00:32:31.200><c> of</c><00:32:31.279><c> the</c><00:32:31.440><c> gaps</c><00:32:31.840><c> in</c>

00:32:31.990 --> 00:32:32.000 align:start position:0%
believe this is one of the gaps in
 

00:32:32.000 --> 00:32:33.909 align:start position:0%
believe this is one of the gaps in
typescript<00:32:32.559><c> at</c><00:32:32.640><c> the</c><00:32:32.720><c> time</c><00:32:32.960><c> of</c><00:32:33.120><c> recording</c><00:32:33.519><c> this</c>

00:32:33.909 --> 00:32:33.919 align:start position:0%
typescript at the time of recording this
 

00:32:33.919 --> 00:32:35.269 align:start position:0%
typescript at the time of recording this
hopefully<00:32:34.320><c> this</c><00:32:34.480><c> will</c><00:32:34.640><c> be</c><00:32:34.799><c> solved</c><00:32:35.039><c> in</c><00:32:35.200><c> the</c>

00:32:35.269 --> 00:32:35.279 align:start position:0%
hopefully this will be solved in the
 

00:32:35.279 --> 00:32:36.310 align:start position:0%
hopefully this will be solved in the
future

00:32:36.310 --> 00:32:36.320 align:start position:0%
future
 

00:32:36.320 --> 00:32:38.549 align:start position:0%
future
so<00:32:36.480><c> a</c><00:32:36.640><c> tuple</c><00:32:37.039><c> is</c><00:32:37.200><c> a</c><00:32:37.279><c> fixed</c><00:32:37.519><c> length</c><00:32:37.840><c> array</c><00:32:38.159><c> where</c>

00:32:38.549 --> 00:32:38.559 align:start position:0%
so a tuple is a fixed length array where
 

00:32:38.559 --> 00:32:40.870 align:start position:0%
so a tuple is a fixed length array where
each<00:32:38.880><c> element</c><00:32:39.200><c> has</c><00:32:39.360><c> a</c><00:32:39.440><c> particular</c><00:32:39.919><c> type</c><00:32:40.640><c> now</c>

00:32:40.870 --> 00:32:40.880 align:start position:0%
each element has a particular type now
 

00:32:40.880 --> 00:32:43.110 align:start position:0%
each element has a particular type now
as<00:32:41.039><c> a</c><00:32:41.120><c> best</c><00:32:41.360><c> practice</c><00:32:41.840><c> i</c><00:32:41.919><c> would</c><00:32:42.080><c> say</c><00:32:42.640><c> restrict</c>

00:32:43.110 --> 00:32:43.120 align:start position:0%
as a best practice i would say restrict
 

00:32:43.120 --> 00:32:45.350 align:start position:0%
as a best practice i would say restrict
your<00:32:43.279><c> tuples</c><00:32:43.679><c> to</c><00:32:43.840><c> only</c><00:32:44.080><c> two</c><00:32:44.320><c> values</c><00:32:45.039><c> because</c>

00:32:45.350 --> 00:32:45.360 align:start position:0%
your tuples to only two values because
 

00:32:45.360 --> 00:32:47.029 align:start position:0%
your tuples to only two values because
anything<00:32:45.679><c> more</c><00:32:45.919><c> than</c><00:32:46.080><c> that</c><00:32:46.480><c> is</c><00:32:46.640><c> going</c><00:32:46.720><c> to</c><00:32:46.880><c> make</c>

00:32:47.029 --> 00:32:47.039 align:start position:0%
anything more than that is going to make
 

00:32:47.039 --> 00:32:49.110 align:start position:0%
anything more than that is going to make
your<00:32:47.200><c> code</c><00:32:47.600><c> a</c><00:32:47.679><c> bit</c><00:32:47.919><c> hard</c><00:32:48.080><c> to</c><00:32:48.320><c> understand</c><00:32:48.960><c> for</c>

00:32:49.110 --> 00:32:49.120 align:start position:0%
your code a bit hard to understand for
 

00:32:49.120 --> 00:32:51.269 align:start position:0%
your code a bit hard to understand for
example<00:32:50.000><c> if</c><00:32:50.159><c> you</c><00:32:50.320><c> add</c>

00:32:51.269 --> 00:32:51.279 align:start position:0%
example if you add
 

00:32:51.279 --> 00:32:53.110 align:start position:0%
example if you add
a<00:32:52.000><c> boolean</c>

00:32:53.110 --> 00:32:53.120 align:start position:0%
a boolean
 

00:32:53.120 --> 00:32:56.310 align:start position:0%
a boolean
and<00:32:53.519><c> another</c><00:32:53.919><c> number</c><00:32:54.159><c> here</c>

00:32:56.310 --> 00:32:56.320 align:start position:0%
and another number here
 

00:32:56.320 --> 00:32:58.149 align:start position:0%
and another number here
what<00:32:56.480><c> do</c><00:32:56.640><c> these</c><00:32:56.880><c> values</c><00:32:57.279><c> really</c><00:32:57.519><c> represent</c>

00:32:58.149 --> 00:32:58.159 align:start position:0%
what do these values really represent
 

00:32:58.159 --> 00:32:59.669 align:start position:0%
what do these values really represent
it's<00:32:58.320><c> really</c><00:32:58.480><c> hard</c><00:32:58.720><c> to</c><00:32:58.880><c> tell</c>

00:32:59.669 --> 00:32:59.679 align:start position:0%
it's really hard to tell
 

00:32:59.679 --> 00:33:01.509 align:start position:0%
it's really hard to tell
so<00:32:59.919><c> tuples</c><00:33:00.320><c> are</c><00:33:00.480><c> useful</c><00:33:00.799><c> when</c><00:33:00.960><c> we</c><00:33:01.120><c> have</c><00:33:01.279><c> only</c>

00:33:01.509 --> 00:33:01.519 align:start position:0%
so tuples are useful when we have only
 

00:33:01.519 --> 00:33:04.070 align:start position:0%
so tuples are useful when we have only
two<00:33:01.760><c> values</c><00:33:02.159><c> like</c><00:33:02.480><c> key</c><00:33:02.720><c> value</c><00:33:03.039><c> pairs</c>

00:33:04.070 --> 00:33:04.080 align:start position:0%
two values like key value pairs
 

00:33:04.080 --> 00:33:08.480 align:start position:0%
two values like key value pairs
next<00:33:04.320><c> we're</c><00:33:04.480><c> going</c><00:33:04.559><c> to</c><00:33:04.640><c> talk</c><00:33:04.880><c> about</c><00:33:05.200><c> enums</c>

00:33:08.480 --> 00:33:08.490 align:start position:0%
 
 

00:33:08.490 --> 00:33:13.750 align:start position:0%
 
[Music]

00:33:13.750 --> 00:33:13.760 align:start position:0%
 
 

00:33:13.760 --> 00:33:15.669 align:start position:0%
 
typescript<00:33:14.320><c> has</c><00:33:14.640><c> another</c><00:33:14.960><c> built-in</c><00:33:15.360><c> type</c>

00:33:15.669 --> 00:33:15.679 align:start position:0%
typescript has another built-in type
 

00:33:15.679 --> 00:33:18.149 align:start position:0%
typescript has another built-in type
called<00:33:15.919><c> enum</c><00:33:16.559><c> which</c><00:33:16.880><c> represents</c><00:33:17.600><c> a</c><00:33:17.760><c> list</c><00:33:18.000><c> of</c>

00:33:18.149 --> 00:33:18.159 align:start position:0%
called enum which represents a list of
 

00:33:18.159 --> 00:33:20.710 align:start position:0%
called enum which represents a list of
related<00:33:18.720><c> constants</c><00:33:19.519><c> if</c><00:33:19.679><c> you</c><00:33:19.760><c> know</c><00:33:19.919><c> c</c><00:33:20.159><c> sharp</c><00:33:20.480><c> or</c>

00:33:20.710 --> 00:33:20.720 align:start position:0%
related constants if you know c sharp or
 

00:33:20.720 --> 00:33:22.710 align:start position:0%
related constants if you know c sharp or
java<00:33:21.279><c> you</c><00:33:21.440><c> have</c><00:33:21.519><c> seen</c><00:33:21.760><c> enums</c><00:33:22.159><c> before</c><00:33:22.399><c> we</c><00:33:22.559><c> have</c>

00:33:22.710 --> 00:33:22.720 align:start position:0%
java you have seen enums before we have
 

00:33:22.720 --> 00:33:24.149 align:start position:0%
java you have seen enums before we have
the<00:33:22.799><c> exact</c><00:33:23.200><c> same</c><00:33:23.440><c> concept</c><00:33:23.840><c> here</c><00:33:24.000><c> in</c>

00:33:24.149 --> 00:33:24.159 align:start position:0%
the exact same concept here in
 

00:33:24.159 --> 00:33:25.269 align:start position:0%
the exact same concept here in
typescript

00:33:25.269 --> 00:33:25.279 align:start position:0%
typescript
 

00:33:25.279 --> 00:33:27.190 align:start position:0%
typescript
so<00:33:25.600><c> let's</c><00:33:25.760><c> say</c><00:33:25.919><c> we</c><00:33:26.080><c> want</c><00:33:26.159><c> to</c><00:33:26.320><c> represent</c><00:33:26.960><c> the</c>

00:33:27.190 --> 00:33:27.200 align:start position:0%
so let's say we want to represent the
 

00:33:27.200 --> 00:33:29.990 align:start position:0%
so let's say we want to represent the
size<00:33:27.440><c> of</c><00:33:27.600><c> t-shirts</c><00:33:28.320><c> as</c><00:33:28.559><c> constants</c><00:33:29.519><c> one</c><00:33:29.679><c> way</c><00:33:29.840><c> is</c>

00:33:29.990 --> 00:33:30.000 align:start position:0%
size of t-shirts as constants one way is
 

00:33:30.000 --> 00:33:32.549 align:start position:0%
size of t-shirts as constants one way is
to<00:33:30.080><c> define</c><00:33:30.640><c> three</c><00:33:30.880><c> constants</c><00:33:31.440><c> like</c><00:33:31.679><c> this</c>

00:33:32.549 --> 00:33:32.559 align:start position:0%
to define three constants like this
 

00:33:32.559 --> 00:33:34.070 align:start position:0%
to define three constants like this
small

00:33:34.070 --> 00:33:34.080 align:start position:0%
small
 

00:33:34.080 --> 00:33:35.669 align:start position:0%
small
medium

00:33:35.669 --> 00:33:35.679 align:start position:0%
medium
 

00:33:35.679 --> 00:33:37.029 align:start position:0%
medium
and<00:33:35.840><c> large</c>

00:33:37.029 --> 00:33:37.039 align:start position:0%
and large
 

00:33:37.039 --> 00:33:38.870 align:start position:0%
and large
that's<00:33:37.360><c> one</c><00:33:37.519><c> way</c><00:33:38.000><c> and</c><00:33:38.159><c> then</c><00:33:38.320><c> throughout</c><00:33:38.720><c> our</c>

00:33:38.870 --> 00:33:38.880 align:start position:0%
that's one way and then throughout our
 

00:33:38.880 --> 00:33:41.669 align:start position:0%
that's one way and then throughout our
code<00:33:39.440><c> we</c><00:33:39.600><c> can</c><00:33:39.760><c> reference</c><00:33:40.159><c> this</c><00:33:40.399><c> constant</c>

00:33:41.669 --> 00:33:41.679 align:start position:0%
code we can reference this constant
 

00:33:41.679 --> 00:33:43.990 align:start position:0%
code we can reference this constant
another<00:33:42.000><c> way</c><00:33:42.320><c> is</c><00:33:42.480><c> to</c><00:33:42.640><c> group</c><00:33:42.880><c> this</c><00:33:43.120><c> constant</c>

00:33:43.990 --> 00:33:44.000 align:start position:0%
another way is to group this constant
 

00:33:44.000 --> 00:33:46.389 align:start position:0%
another way is to group this constant
inside<00:33:44.399><c> an</c><00:33:44.559><c> enum</c><00:33:45.440><c> so</c><00:33:45.679><c> we</c><00:33:45.760><c> use</c><00:33:45.919><c> the</c><00:33:46.080><c> enum</c>

00:33:46.389 --> 00:33:46.399 align:start position:0%
inside an enum so we use the enum
 

00:33:46.399 --> 00:33:47.509 align:start position:0%
inside an enum so we use the enum
keyword

00:33:47.509 --> 00:33:47.519 align:start position:0%
keyword
 

00:33:47.519 --> 00:33:49.990 align:start position:0%
keyword
then<00:33:47.760><c> give</c><00:33:48.000><c> our</c><00:33:48.080><c> enum</c><00:33:48.480><c> a</c><00:33:48.640><c> name</c>

00:33:49.990 --> 00:33:50.000 align:start position:0%
then give our enum a name
 

00:33:50.000 --> 00:33:52.470 align:start position:0%
then give our enum a name
now<00:33:50.240><c> note</c><00:33:50.399><c> that</c><00:33:50.559><c> here</c><00:33:50.799><c> i'm</c><00:33:50.880><c> using</c><00:33:51.440><c> pascal</c>

00:33:52.470 --> 00:33:52.480 align:start position:0%
now note that here i'm using pascal
 

00:33:52.480 --> 00:33:55.669 align:start position:0%
now note that here i'm using pascal
naming<00:33:52.799><c> convention</c><00:33:53.760><c> so</c><00:33:54.000><c> the</c><00:33:54.240><c> first</c><00:33:54.559><c> letter</c><00:33:55.360><c> of</c>

00:33:55.669 --> 00:33:55.679 align:start position:0%
naming convention so the first letter of
 

00:33:55.679 --> 00:33:58.389 align:start position:0%
naming convention so the first letter of
every<00:33:55.919><c> word</c><00:33:56.480><c> should</c><00:33:56.640><c> be</c><00:33:56.799><c> uppercase</c><00:33:57.440><c> okay</c>

00:33:58.389 --> 00:33:58.399 align:start position:0%
every word should be uppercase okay
 

00:33:58.399 --> 00:34:01.190 align:start position:0%
every word should be uppercase okay
then<00:33:58.559><c> we</c><00:33:58.720><c> add</c><00:33:59.200><c> curly</c><00:33:59.600><c> braces</c><00:34:00.559><c> and</c><00:34:00.799><c> inside</c><00:34:01.039><c> the</c>

00:34:01.190 --> 00:34:01.200 align:start position:0%
then we add curly braces and inside the
 

00:34:01.200 --> 00:34:03.909 align:start position:0%
then we add curly braces and inside the
braces<00:34:01.600><c> we</c><00:34:01.760><c> add</c><00:34:02.000><c> our</c><00:34:02.159><c> members</c><00:34:02.960><c> small</c>

00:34:03.909 --> 00:34:03.919 align:start position:0%
braces we add our members small
 

00:34:03.919 --> 00:34:07.190 align:start position:0%
braces we add our members small
medium<00:34:04.880><c> and</c><00:34:05.039><c> large</c><00:34:06.000><c> once</c><00:34:06.240><c> again</c><00:34:06.559><c> i'm</c><00:34:06.720><c> using</c>

00:34:07.190 --> 00:34:07.200 align:start position:0%
medium and large once again i'm using
 

00:34:07.200 --> 00:34:09.430 align:start position:0%
medium and large once again i'm using
the<00:34:07.440><c> pascal</c><00:34:08.240><c> naming</c><00:34:08.560><c> convention</c><00:34:09.119><c> for</c><00:34:09.280><c> the</c>

00:34:09.430 --> 00:34:09.440 align:start position:0%
the pascal naming convention for the
 

00:34:09.440 --> 00:34:10.550 align:start position:0%
the pascal naming convention for the
members

00:34:10.550 --> 00:34:10.560 align:start position:0%
members
 

00:34:10.560 --> 00:34:12.470 align:start position:0%
members
now<00:34:10.720><c> when</c><00:34:10.879><c> we</c><00:34:10.960><c> define</c><00:34:11.359><c> an</c><00:34:11.520><c> enum</c><00:34:12.000><c> we</c><00:34:12.159><c> don't</c><00:34:12.320><c> need</c>

00:34:12.470 --> 00:34:12.480 align:start position:0%
now when we define an enum we don't need
 

00:34:12.480 --> 00:34:15.750 align:start position:0%
now when we define an enum we don't need
to<00:34:12.560><c> define</c><00:34:13.280><c> these</c><00:34:13.520><c> three</c><00:34:13.760><c> constants</c><00:34:14.320><c> anymore</c>

00:34:15.750 --> 00:34:15.760 align:start position:0%
to define these three constants anymore
 

00:34:15.760 --> 00:34:17.430 align:start position:0%
to define these three constants anymore
and<00:34:16.159><c> by</c><00:34:16.399><c> default</c>

00:34:17.430 --> 00:34:17.440 align:start position:0%
and by default
 

00:34:17.440 --> 00:34:19.510 align:start position:0%
and by default
the<00:34:17.599><c> typescript</c><00:34:18.079><c> compiler</c><00:34:18.639><c> assigned</c><00:34:19.359><c> the</c>

00:34:19.510 --> 00:34:19.520 align:start position:0%
the typescript compiler assigned the
 

00:34:19.520 --> 00:34:22.629 align:start position:0%
the typescript compiler assigned the
first<00:34:19.839><c> member</c><00:34:20.240><c> the</c><00:34:20.399><c> value</c><00:34:20.720><c> of</c><00:34:20.960><c> 0</c>

00:34:22.629 --> 00:34:22.639 align:start position:0%
first member the value of 0
 

00:34:22.639 --> 00:34:25.030 align:start position:0%
first member the value of 0
and<00:34:22.879><c> other</c><00:34:23.119><c> members</c><00:34:23.520><c> values</c><00:34:23.919><c> like</c><00:34:24.240><c> 1</c><00:34:24.480><c> 2</c><00:34:24.720><c> and</c><00:34:24.879><c> so</c>

00:34:25.030 --> 00:34:25.040 align:start position:0%
and other members values like 1 2 and so
 

00:34:25.040 --> 00:34:26.950 align:start position:0%
and other members values like 1 2 and so
on<00:34:25.760><c> now</c><00:34:25.919><c> if</c><00:34:26.079><c> you</c><00:34:26.159><c> don't</c><00:34:26.320><c> want</c><00:34:26.480><c> to</c><00:34:26.560><c> use</c><00:34:26.720><c> these</c>

00:34:26.950 --> 00:34:26.960 align:start position:0%
on now if you don't want to use these
 

00:34:26.960 --> 00:34:29.510 align:start position:0%
on now if you don't want to use these
values<00:34:27.359><c> we</c><00:34:27.520><c> can</c><00:34:27.760><c> explicitly</c><00:34:28.399><c> set</c><00:34:28.639><c> values</c><00:34:29.359><c> so</c>

00:34:29.510 --> 00:34:29.520 align:start position:0%
values we can explicitly set values so
 

00:34:29.520 --> 00:34:31.829 align:start position:0%
values we can explicitly set values so
we<00:34:29.679><c> can</c><00:34:29.839><c> set</c><00:34:30.079><c> small</c><00:34:30.320><c> to</c><00:34:30.560><c> 1</c><00:34:31.040><c> and</c><00:34:31.200><c> then</c><00:34:31.440><c> medium</c>

00:34:31.829 --> 00:34:31.839 align:start position:0%
we can set small to 1 and then medium
 

00:34:31.839 --> 00:34:34.710 align:start position:0%
we can set small to 1 and then medium
becomes<00:34:32.159><c> 2</c><00:34:32.639><c> and</c><00:34:32.800><c> large</c><00:34:33.119><c> becomes</c><00:34:33.599><c> three</c><00:34:34.320><c> we</c><00:34:34.480><c> can</c>

00:34:34.710 --> 00:34:34.720 align:start position:0%
becomes 2 and large becomes three we can
 

00:34:34.720 --> 00:34:36.629 align:start position:0%
becomes 2 and large becomes three we can
also<00:34:34.960><c> use</c><00:34:35.200><c> string</c><00:34:35.520><c> values</c>

00:34:36.629 --> 00:34:36.639 align:start position:0%
also use string values
 

00:34:36.639 --> 00:34:37.589 align:start position:0%
also use string values
like

00:34:37.589 --> 00:34:37.599 align:start position:0%
like
 

00:34:37.599 --> 00:34:38.629 align:start position:0%
like
s

00:34:38.629 --> 00:34:38.639 align:start position:0%
s
 

00:34:38.639 --> 00:34:41.030 align:start position:0%
s
if<00:34:38.800><c> we</c><00:34:38.879><c> do</c><00:34:39.040><c> this</c><00:34:39.280><c> then</c><00:34:39.520><c> we</c><00:34:39.599><c> have</c><00:34:39.760><c> to</c><00:34:39.919><c> explicitly</c>

00:34:41.030 --> 00:34:41.040 align:start position:0%
if we do this then we have to explicitly
 

00:34:41.040 --> 00:34:44.149 align:start position:0%
if we do this then we have to explicitly
set<00:34:41.280><c> a</c><00:34:41.520><c> value</c><00:34:41.839><c> for</c><00:34:42.000><c> each</c><00:34:42.240><c> member</c><00:34:42.720><c> so</c>

00:34:44.149 --> 00:34:44.159 align:start position:0%
set a value for each member so
 

00:34:44.159 --> 00:34:45.990 align:start position:0%
set a value for each member so
medium<00:34:44.879><c> and</c>

00:34:45.990 --> 00:34:46.000 align:start position:0%
medium and
 

00:34:46.000 --> 00:34:48.470 align:start position:0%
medium and
large<00:34:46.720><c> like</c><00:34:46.879><c> this</c><00:34:47.760><c> now</c><00:34:47.919><c> i'm</c><00:34:48.000><c> going</c><00:34:48.079><c> to</c><00:34:48.159><c> revert</c>

00:34:48.470 --> 00:34:48.480 align:start position:0%
large like this now i'm going to revert
 

00:34:48.480 --> 00:34:50.550 align:start position:0%
large like this now i'm going to revert
this<00:34:48.639><c> code</c><00:34:48.960><c> and</c><00:34:49.119><c> just</c><00:34:49.599><c> rely</c>

00:34:50.550 --> 00:34:50.560 align:start position:0%
this code and just rely
 

00:34:50.560 --> 00:34:52.869 align:start position:0%
this code and just rely
on<00:34:50.720><c> numbers</c><00:34:51.440><c> so</c><00:34:51.599><c> i'm</c><00:34:51.679><c> going</c><00:34:51.760><c> to</c><00:34:51.919><c> initialize</c>

00:34:52.869 --> 00:34:52.879 align:start position:0%
on numbers so i'm going to initialize
 

00:34:52.879 --> 00:34:56.069 align:start position:0%
on numbers so i'm going to initialize
small<00:34:53.200><c> to</c><00:34:53.359><c> 1</c><00:34:53.679><c> and</c><00:34:54.399><c> rely</c><00:34:54.800><c> on</c><00:34:54.879><c> the</c><00:34:55.040><c> compiler</c><00:34:55.679><c> to</c>

00:34:56.069 --> 00:34:56.079 align:start position:0%
small to 1 and rely on the compiler to
 

00:34:56.079 --> 00:34:58.150 align:start position:0%
small to 1 and rely on the compiler to
set<00:34:56.240><c> the</c><00:34:56.480><c> value</c><00:34:56.800><c> for</c><00:34:56.960><c> other</c><00:34:57.200><c> members</c>

00:34:58.150 --> 00:34:58.160 align:start position:0%
set the value for other members
 

00:34:58.160 --> 00:35:00.150 align:start position:0%
set the value for other members
so<00:34:58.320><c> now</c><00:34:58.480><c> that</c><00:34:58.640><c> we</c><00:34:58.720><c> have</c><00:34:58.880><c> this</c><00:34:59.040><c> new</c><00:34:59.280><c> type</c><00:34:59.839><c> we</c><00:35:00.000><c> can</c>

00:35:00.150 --> 00:35:00.160 align:start position:0%
so now that we have this new type we can
 

00:35:00.160 --> 00:35:03.349 align:start position:0%
so now that we have this new type we can
declare<00:35:00.640><c> a</c><00:35:00.800><c> variable</c><00:35:01.280><c> like</c><00:35:01.920><c> my</c><00:35:02.160><c> size</c><00:35:02.800><c> of</c><00:35:03.040><c> type</c>

00:35:03.349 --> 00:35:03.359 align:start position:0%
declare a variable like my size of type
 

00:35:03.359 --> 00:35:04.230 align:start position:0%
declare a variable like my size of type
size

00:35:04.230 --> 00:35:04.240 align:start position:0%
size
 

00:35:04.240 --> 00:35:06.790 align:start position:0%
size
and<00:35:04.480><c> set</c><00:35:04.720><c> it</c><00:35:04.800><c> to</c><00:35:04.960><c> size</c><00:35:05.760><c> dot</c>

00:35:06.790 --> 00:35:06.800 align:start position:0%
and set it to size dot
 

00:35:06.800 --> 00:35:08.390 align:start position:0%
and set it to size dot
medium<00:35:07.599><c> okay</c>

00:35:08.390 --> 00:35:08.400 align:start position:0%
medium okay
 

00:35:08.400 --> 00:35:10.550 align:start position:0%
medium okay
so<00:35:08.560><c> this</c><00:35:08.720><c> is</c><00:35:08.800><c> how</c><00:35:08.960><c> we</c><00:35:09.040><c> can</c><00:35:09.200><c> use</c><00:35:09.440><c> enops</c><00:35:10.400><c> now</c>

00:35:10.550 --> 00:35:10.560 align:start position:0%
so this is how we can use enops now
 

00:35:10.560 --> 00:35:12.069 align:start position:0%
so this is how we can use enops now
let's<00:35:10.720><c> see</c><00:35:10.880><c> what</c><00:35:11.040><c> happens</c>

00:35:12.069 --> 00:35:12.079 align:start position:0%
let's see what happens
 

00:35:12.079 --> 00:35:13.270 align:start position:0%
let's see what happens
if<00:35:12.240><c> we</c><00:35:12.480><c> log</c>

00:35:13.270 --> 00:35:13.280 align:start position:0%
if we log
 

00:35:13.280 --> 00:35:16.790 align:start position:0%
if we log
my<00:35:13.520><c> size</c><00:35:14.320><c> on</c><00:35:14.480><c> the</c><00:35:14.640><c> console</c><00:35:16.079><c> so</c><00:35:16.400><c> back</c><00:35:16.560><c> to</c><00:35:16.640><c> the</c>

00:35:16.790 --> 00:35:16.800 align:start position:0%
my size on the console so back to the
 

00:35:16.800 --> 00:35:18.390 align:start position:0%
my size on the console so back to the
terminal<00:35:17.440><c> let's</c><00:35:17.680><c> run</c><00:35:17.839><c> the</c><00:35:18.000><c> typescript</c>

00:35:18.390 --> 00:35:18.400 align:start position:0%
terminal let's run the typescript
 

00:35:18.400 --> 00:35:19.750 align:start position:0%
terminal let's run the typescript
compiler

00:35:19.750 --> 00:35:19.760 align:start position:0%
compiler
 

00:35:19.760 --> 00:35:22.310 align:start position:0%
compiler
good<00:35:20.400><c> and</c><00:35:20.480><c> then</c><00:35:20.640><c> use</c><00:35:20.960><c> node</c><00:35:21.520><c> to</c><00:35:21.760><c> execute</c><00:35:22.160><c> our</c>

00:35:22.310 --> 00:35:22.320 align:start position:0%
good and then use node to execute our
 

00:35:22.320 --> 00:35:24.390 align:start position:0%
good and then use node to execute our
javascript<00:35:22.960><c> code</c><00:35:23.440><c> so</c><00:35:23.680><c> we</c><00:35:23.760><c> go</c><00:35:23.920><c> to</c><00:35:24.079><c> the</c><00:35:24.160><c> disk</c>

00:35:24.390 --> 00:35:24.400 align:start position:0%
javascript code so we go to the disk
 

00:35:24.400 --> 00:35:27.190 align:start position:0%
javascript code so we go to the disk
folder<00:35:24.800><c> and</c><00:35:24.960><c> pick</c><00:35:25.359><c> index.js</c>

00:35:27.190 --> 00:35:27.200 align:start position:0%
folder and pick index.js
 

00:35:27.200 --> 00:35:29.829 align:start position:0%
folder and pick index.js
so<00:35:27.359><c> look</c><00:35:28.000><c> we</c><00:35:28.160><c> see</c><00:35:28.320><c> the</c><00:35:28.480><c> numeric</c><00:35:29.040><c> value</c>

00:35:29.829 --> 00:35:29.839 align:start position:0%
so look we see the numeric value
 

00:35:29.839 --> 00:35:32.710 align:start position:0%
so look we see the numeric value
associated<00:35:30.720><c> with</c><00:35:30.960><c> our</c><00:35:31.119><c> enum</c><00:35:31.440><c> member</c><00:35:31.920><c> okay</c>

00:35:32.710 --> 00:35:32.720 align:start position:0%
associated with our enum member okay
 

00:35:32.720 --> 00:35:34.069 align:start position:0%
associated with our enum member okay
now<00:35:32.880><c> let's</c><00:35:33.040><c> look</c><00:35:33.280><c> at</c><00:35:33.359><c> the</c><00:35:33.520><c> generated</c>

00:35:34.069 --> 00:35:34.079 align:start position:0%
now let's look at the generated
 

00:35:34.079 --> 00:35:36.710 align:start position:0%
now let's look at the generated
javascript<00:35:34.560><c> code</c><00:35:34.960><c> in</c><00:35:35.119><c> this</c><00:35:35.359><c> file</c>

00:35:36.710 --> 00:35:36.720 align:start position:0%
javascript code in this file
 

00:35:36.720 --> 00:35:39.270 align:start position:0%
javascript code in this file
so<00:35:37.280><c> back</c><00:35:37.440><c> to</c><00:35:37.599><c> the</c><00:35:37.760><c> project</c><00:35:38.480><c> here's</c><00:35:38.720><c> our</c><00:35:38.880><c> index</c>

00:35:39.270 --> 00:35:39.280 align:start position:0%
so back to the project here's our index
 

00:35:39.280 --> 00:35:41.030 align:start position:0%
so back to the project here's our index
file<00:35:39.839><c> take</c><00:35:40.079><c> a</c><00:35:40.160><c> look</c>

00:35:41.030 --> 00:35:41.040 align:start position:0%
file take a look
 

00:35:41.040 --> 00:35:43.190 align:start position:0%
file take a look
so<00:35:41.599><c> the</c><00:35:41.760><c> generated</c><00:35:42.240><c> javascript</c><00:35:42.720><c> code</c><00:35:43.040><c> is</c>

00:35:43.190 --> 00:35:43.200 align:start position:0%
so the generated javascript code is
 

00:35:43.200 --> 00:35:45.190 align:start position:0%
so the generated javascript code is
pretty<00:35:43.520><c> verbose</c><00:35:44.079><c> it's</c><00:35:44.160><c> pretty</c><00:35:44.480><c> lengthy</c><00:35:45.040><c> now</c>

00:35:45.190 --> 00:35:45.200 align:start position:0%
pretty verbose it's pretty lengthy now
 

00:35:45.200 --> 00:35:46.150 align:start position:0%
pretty verbose it's pretty lengthy now
you<00:35:45.359><c> don't</c><00:35:45.520><c> need</c><00:35:45.599><c> to</c><00:35:45.680><c> worry</c><00:35:45.920><c> about</c>

00:35:46.150 --> 00:35:46.160 align:start position:0%
you don't need to worry about
 

00:35:46.160 --> 00:35:47.829 align:start position:0%
you don't need to worry about
understanding<00:35:46.720><c> this</c><00:35:47.119><c> but</c><00:35:47.280><c> let</c><00:35:47.440><c> me</c><00:35:47.520><c> show</c><00:35:47.680><c> you</c><00:35:47.760><c> a</c>

00:35:47.829 --> 00:35:47.839 align:start position:0%
understanding this but let me show you a
 

00:35:47.839 --> 00:35:48.710 align:start position:0%
understanding this but let me show you a
trick

00:35:48.710 --> 00:35:48.720 align:start position:0%
trick
 

00:35:48.720 --> 00:35:51.030 align:start position:0%
trick
back<00:35:48.880><c> to</c><00:35:48.960><c> our</c><00:35:49.119><c> typescript</c><00:35:49.599><c> file</c>

00:35:51.030 --> 00:35:51.040 align:start position:0%
back to our typescript file
 

00:35:51.040 --> 00:35:54.230 align:start position:0%
back to our typescript file
if<00:35:51.119><c> we</c><00:35:51.280><c> define</c><00:35:51.680><c> this</c><00:35:51.839><c> enum</c><00:35:52.720><c> as</c><00:35:53.040><c> constant</c><00:35:54.079><c> the</c>

00:35:54.230 --> 00:35:54.240 align:start position:0%
if we define this enum as constant the
 

00:35:54.240 --> 00:35:56.829 align:start position:0%
if we define this enum as constant the
compiler<00:35:54.800><c> will</c><00:35:55.040><c> generate</c><00:35:55.520><c> a</c><00:35:55.760><c> more</c><00:35:56.000><c> optimized</c>

00:35:56.829 --> 00:35:56.839 align:start position:0%
compiler will generate a more optimized
 

00:35:56.839 --> 00:36:00.550 align:start position:0%
compiler will generate a more optimized
code<00:35:57.839><c> so</c><00:35:58.079><c> let's</c><00:35:58.400><c> recompile</c><00:35:58.960><c> our</c><00:35:59.119><c> code</c>

00:36:00.550 --> 00:36:00.560 align:start position:0%
code so let's recompile our code
 

00:36:00.560 --> 00:36:02.310 align:start position:0%
code so let's recompile our code
and<00:36:00.800><c> then</c><00:36:01.280><c> look</c><00:36:01.599><c> at</c>

00:36:02.310 --> 00:36:02.320 align:start position:0%
and then look at
 

00:36:02.320 --> 00:36:03.829 align:start position:0%
and then look at
index.js

00:36:03.829 --> 00:36:03.839 align:start position:0%
index.js
 

00:36:03.839 --> 00:36:06.069 align:start position:0%
index.js
one<00:36:04.000><c> more</c><00:36:04.160><c> time</c>

00:36:06.069 --> 00:36:06.079 align:start position:0%
one more time
 

00:36:06.079 --> 00:36:07.750 align:start position:0%
one more time
now<00:36:06.320><c> we</c><00:36:06.400><c> don't</c><00:36:06.560><c> see</c><00:36:06.800><c> all</c><00:36:06.880><c> that</c><00:36:07.119><c> code</c><00:36:07.359><c> anymore</c>

00:36:07.750 --> 00:36:07.760 align:start position:0%
now we don't see all that code anymore
 

00:36:07.760 --> 00:36:09.829 align:start position:0%
now we don't see all that code anymore
we<00:36:08.000><c> only</c><00:36:08.160><c> have</c><00:36:08.400><c> one</c><00:36:08.640><c> line</c><00:36:09.040><c> for</c><00:36:09.280><c> setting</c><00:36:09.599><c> my</c>

00:36:09.829 --> 00:36:09.839 align:start position:0%
we only have one line for setting my
 

00:36:09.839 --> 00:36:12.390 align:start position:0%
we only have one line for setting my
size<00:36:10.160><c> to</c><00:36:10.320><c> 2.</c><00:36:11.040><c> again</c><00:36:11.599><c> you</c><00:36:11.760><c> don't</c><00:36:11.920><c> have</c><00:36:12.000><c> to</c><00:36:12.160><c> worry</c>

00:36:12.390 --> 00:36:12.400 align:start position:0%
size to 2. again you don't have to worry
 

00:36:12.400 --> 00:36:14.550 align:start position:0%
size to 2. again you don't have to worry
about<00:36:12.560><c> the</c><00:36:12.720><c> generated</c><00:36:13.200><c> javascript</c><00:36:13.839><c> code</c><00:36:14.320><c> all</c>

00:36:14.550 --> 00:36:14.560 align:start position:0%
about the generated javascript code all
 

00:36:14.560 --> 00:36:16.790 align:start position:0%
about the generated javascript code all
i<00:36:14.640><c> want</c><00:36:14.800><c> you</c><00:36:14.960><c> to</c><00:36:15.040><c> take</c><00:36:15.200><c> away</c><00:36:15.520><c> here</c><00:36:16.079><c> is</c><00:36:16.240><c> that</c>

00:36:16.790 --> 00:36:16.800 align:start position:0%
i want you to take away here is that
 

00:36:16.800 --> 00:36:19.589 align:start position:0%
i want you to take away here is that
using<00:36:17.119><c> an</c><00:36:17.280><c> enum</c><00:36:18.000><c> we</c><00:36:18.160><c> can</c><00:36:18.320><c> represent</c><00:36:19.119><c> a</c><00:36:19.200><c> list</c><00:36:19.520><c> of</c>

00:36:19.589 --> 00:36:19.599 align:start position:0%
using an enum we can represent a list of
 

00:36:19.599 --> 00:36:21.829 align:start position:0%
using an enum we can represent a list of
related<00:36:20.079><c> constants</c><00:36:20.960><c> and</c><00:36:21.119><c> if</c><00:36:21.200><c> we</c><00:36:21.359><c> define</c><00:36:21.680><c> our</c>

00:36:21.829 --> 00:36:21.839 align:start position:0%
related constants and if we define our
 

00:36:21.839 --> 00:36:24.310 align:start position:0%
related constants and if we define our
in-apps<00:36:22.400><c> using</c><00:36:22.720><c> the</c><00:36:22.880><c> constant</c><00:36:23.359><c> keyword</c><00:36:24.160><c> the</c>

00:36:24.310 --> 00:36:24.320 align:start position:0%
in-apps using the constant keyword the
 

00:36:24.320 --> 00:36:26.710 align:start position:0%
in-apps using the constant keyword the
compiler<00:36:24.880><c> will</c><00:36:25.119><c> generate</c><00:36:25.920><c> more</c><00:36:26.160><c> optimized</c>

00:36:26.710 --> 00:36:26.720 align:start position:0%
compiler will generate more optimized
 

00:36:26.720 --> 00:36:27.589 align:start position:0%
compiler will generate more optimized
code

00:36:27.589 --> 00:36:27.599 align:start position:0%
code
 

00:36:27.599 --> 00:36:31.830 align:start position:0%
code
next<00:36:27.839><c> we're</c><00:36:28.000><c> going</c><00:36:28.079><c> to</c><00:36:28.160><c> talk</c><00:36:28.320><c> about</c><00:36:28.640><c> functions</c>

00:36:31.830 --> 00:36:31.840 align:start position:0%
 
 

00:36:31.840 --> 00:36:37.190 align:start position:0%
 
[Music]

00:36:37.190 --> 00:36:37.200 align:start position:0%
 
 

00:36:37.200 --> 00:36:39.270 align:start position:0%
 
let's<00:36:37.440><c> talk</c><00:36:37.599><c> about</c><00:36:37.839><c> how</c><00:36:38.160><c> typescript</c><00:36:38.800><c> helps</c><00:36:39.040><c> us</c>

00:36:39.270 --> 00:36:39.280 align:start position:0%
let's talk about how typescript helps us
 

00:36:39.280 --> 00:36:41.270 align:start position:0%
let's talk about how typescript helps us
prevent<00:36:39.760><c> common</c><00:36:40.160><c> problems</c><00:36:40.720><c> when</c><00:36:40.960><c> working</c>

00:36:41.270 --> 00:36:41.280 align:start position:0%
prevent common problems when working
 

00:36:41.280 --> 00:36:42.470 align:start position:0%
prevent common problems when working
with<00:36:41.440><c> functions</c>

00:36:42.470 --> 00:36:42.480 align:start position:0%
with functions
 

00:36:42.480 --> 00:36:44.470 align:start position:0%
with functions
so<00:36:42.640><c> let's</c><00:36:42.800><c> define</c><00:36:43.200><c> a</c><00:36:43.359><c> function</c>

00:36:44.470 --> 00:36:44.480 align:start position:0%
so let's define a function
 

00:36:44.480 --> 00:36:46.390 align:start position:0%
so let's define a function
called<00:36:44.800><c> calculate</c><00:36:45.359><c> tags</c>

00:36:46.390 --> 00:36:46.400 align:start position:0%
called calculate tags
 

00:36:46.400 --> 00:36:48.950 align:start position:0%
called calculate tags
and<00:36:46.560><c> give</c><00:36:46.800><c> it</c><00:36:46.880><c> an</c><00:36:47.119><c> income</c><00:36:47.520><c> parameter</c><00:36:48.000><c> of</c><00:36:48.240><c> type</c>

00:36:48.950 --> 00:36:48.960 align:start position:0%
and give it an income parameter of type
 

00:36:48.960 --> 00:36:50.310 align:start position:0%
and give it an income parameter of type
number

00:36:50.310 --> 00:36:50.320 align:start position:0%
number
 

00:36:50.320 --> 00:36:52.550 align:start position:0%
number
now<00:36:51.040><c> let's</c><00:36:51.280><c> hover</c><00:36:51.599><c> our</c><00:36:51.760><c> mouse</c><00:36:52.160><c> over</c><00:36:52.400><c> the</c>

00:36:52.550 --> 00:36:52.560 align:start position:0%
now let's hover our mouse over the
 

00:36:52.560 --> 00:36:54.630 align:start position:0%
now let's hover our mouse over the
function<00:36:52.960><c> name</c><00:36:53.839><c> look</c><00:36:54.079><c> at</c><00:36:54.160><c> the</c><00:36:54.240><c> type</c><00:36:54.480><c> of</c><00:36:54.560><c> the</c>

00:36:54.630 --> 00:36:54.640 align:start position:0%
function name look at the type of the
 

00:36:54.640 --> 00:36:57.109 align:start position:0%
function name look at the type of the
return<00:36:55.040><c> value</c><00:36:55.680><c> it's</c><00:36:56.000><c> void</c><00:36:56.560><c> meaning</c><00:36:56.880><c> this</c>

00:36:57.109 --> 00:36:57.119 align:start position:0%
return value it's void meaning this
 

00:36:57.119 --> 00:36:59.270 align:start position:0%
return value it's void meaning this
function<00:36:57.520><c> does</c><00:36:57.680><c> not</c><00:36:57.920><c> return</c><00:36:58.320><c> a</c><00:36:58.400><c> value</c>

00:36:59.270 --> 00:36:59.280 align:start position:0%
function does not return a value
 

00:36:59.280 --> 00:37:01.670 align:start position:0%
function does not return a value
if<00:36:59.440><c> you</c><00:36:59.599><c> return</c><00:36:59.839><c> a</c><00:36:59.920><c> value</c><00:37:00.160><c> here</c><00:37:00.320><c> like</c><00:37:00.560><c> a</c><00:37:00.640><c> number</c>

00:37:01.670 --> 00:37:01.680 align:start position:0%
if you return a value here like a number
 

00:37:01.680 --> 00:37:03.030 align:start position:0%
if you return a value here like a number
now

00:37:03.030 --> 00:37:03.040 align:start position:0%
now
 

00:37:03.040 --> 00:37:05.670 align:start position:0%
now
the<00:37:03.200><c> type</c><00:37:03.440><c> of</c><00:37:03.599><c> the</c><00:37:03.680><c> return</c><00:37:04.000><c> value</c><00:37:04.640><c> is</c><00:37:04.880><c> number</c>

00:37:05.670 --> 00:37:05.680 align:start position:0%
the type of the return value is number
 

00:37:05.680 --> 00:37:08.230 align:start position:0%
the type of the return value is number
so<00:37:05.839><c> the</c><00:37:06.000><c> typescript</c><00:37:06.560><c> compiler</c><00:37:07.200><c> has</c><00:37:07.520><c> inferred</c>

00:37:08.230 --> 00:37:08.240 align:start position:0%
so the typescript compiler has inferred
 

00:37:08.240 --> 00:37:09.910 align:start position:0%
so the typescript compiler has inferred
the<00:37:08.400><c> type</c><00:37:08.640><c> of</c><00:37:08.720><c> the</c><00:37:08.880><c> return</c><00:37:09.200><c> value</c><00:37:09.520><c> for</c><00:37:09.680><c> us</c><00:37:09.839><c> and</c>

00:37:09.910 --> 00:37:09.920 align:start position:0%
the type of the return value for us and
 

00:37:09.920 --> 00:37:12.550 align:start position:0%
the type of the return value for us and
that's<00:37:10.160><c> great</c><00:37:10.800><c> but</c><00:37:11.119><c> as</c><00:37:11.280><c> a</c><00:37:11.359><c> best</c><00:37:11.680><c> practice</c><00:37:12.320><c> we</c>

00:37:12.550 --> 00:37:12.560 align:start position:0%
that's great but as a best practice we
 

00:37:12.560 --> 00:37:14.950 align:start position:0%
that's great but as a best practice we
should<00:37:12.880><c> always</c><00:37:13.680><c> properly</c><00:37:14.320><c> annotate</c><00:37:14.800><c> our</c>

00:37:14.950 --> 00:37:14.960 align:start position:0%
should always properly annotate our
 

00:37:14.960 --> 00:37:17.349 align:start position:0%
should always properly annotate our
functions<00:37:15.760><c> so</c><00:37:16.000><c> all</c><00:37:16.160><c> the</c><00:37:16.320><c> parameters</c><00:37:17.040><c> as</c><00:37:17.200><c> well</c>

00:37:17.349 --> 00:37:17.359 align:start position:0%
functions so all the parameters as well
 

00:37:17.359 --> 00:37:19.190 align:start position:0%
functions so all the parameters as well
as<00:37:17.520><c> the</c><00:37:17.599><c> return</c><00:37:17.920><c> type</c><00:37:18.400><c> should</c><00:37:18.560><c> be</c><00:37:18.720><c> properly</c>

00:37:19.190 --> 00:37:19.200 align:start position:0%
as the return type should be properly
 

00:37:19.200 --> 00:37:21.589 align:start position:0%
as the return type should be properly
annotated<00:37:20.079><c> especially</c><00:37:20.800><c> if</c><00:37:20.960><c> you're</c><00:37:21.200><c> building</c>

00:37:21.589 --> 00:37:21.599 align:start position:0%
annotated especially if you're building
 

00:37:21.599 --> 00:37:23.750 align:start position:0%
annotated especially if you're building
an<00:37:21.760><c> api</c><00:37:22.240><c> for</c><00:37:22.400><c> other</c><00:37:22.560><c> people</c><00:37:22.880><c> to</c><00:37:22.960><c> use</c>

00:37:23.750 --> 00:37:23.760 align:start position:0%
an api for other people to use
 

00:37:23.760 --> 00:37:25.910 align:start position:0%
an api for other people to use
so<00:37:24.000><c> in</c><00:37:24.160><c> this</c><00:37:24.320><c> case</c><00:37:24.720><c> to</c><00:37:24.960><c> annotate</c><00:37:25.440><c> the</c><00:37:25.520><c> return</c>

00:37:25.910 --> 00:37:25.920 align:start position:0%
so in this case to annotate the return
 

00:37:25.920 --> 00:37:26.710 align:start position:0%
so in this case to annotate the return
type

00:37:26.710 --> 00:37:26.720 align:start position:0%
type
 

00:37:26.720 --> 00:37:28.950 align:start position:0%
type
we<00:37:26.880><c> go</c><00:37:27.119><c> after</c><00:37:27.359><c> the</c><00:37:27.520><c> list</c><00:37:27.760><c> of</c><00:37:27.839><c> parameters</c>

00:37:28.950 --> 00:37:28.960 align:start position:0%
we go after the list of parameters
 

00:37:28.960 --> 00:37:31.829 align:start position:0%
we go after the list of parameters
add<00:37:29.200><c> a</c><00:37:29.280><c> colon</c><00:37:29.920><c> and</c><00:37:30.079><c> specify</c><00:37:30.560><c> the</c><00:37:30.640><c> return</c><00:37:31.040><c> type</c>

00:37:31.829 --> 00:37:31.839 align:start position:0%
add a colon and specify the return type
 

00:37:31.839 --> 00:37:33.990 align:start position:0%
add a colon and specify the return type
like<00:37:32.079><c> number</c><00:37:32.640><c> or</c><00:37:32.880><c> void</c><00:37:33.280><c> if</c><00:37:33.440><c> we</c><00:37:33.520><c> are</c><00:37:33.680><c> not</c><00:37:33.839><c> going</c>

00:37:33.990 --> 00:37:34.000 align:start position:0%
like number or void if we are not going
 

00:37:34.000 --> 00:37:35.270 align:start position:0%
like number or void if we are not going
to<00:37:34.079><c> return</c><00:37:34.320><c> a</c><00:37:34.400><c> value</c>

00:37:35.270 --> 00:37:35.280 align:start position:0%
to return a value
 

00:37:35.280 --> 00:37:36.710 align:start position:0%
to return a value
so<00:37:35.440><c> let's</c><00:37:35.599><c> add</c><00:37:35.839><c> number</c>

00:37:36.710 --> 00:37:36.720 align:start position:0%
so let's add number
 

00:37:36.720 --> 00:37:39.109 align:start position:0%
so let's add number
now<00:37:36.960><c> this</c><00:37:37.200><c> has</c><00:37:37.440><c> an</c><00:37:37.680><c> extra</c><00:37:38.000><c> benefit</c>

00:37:39.109 --> 00:37:39.119 align:start position:0%
now this has an extra benefit
 

00:37:39.119 --> 00:37:41.349 align:start position:0%
now this has an extra benefit
if<00:37:39.359><c> you</c><00:37:39.440><c> forget</c><00:37:39.760><c> to</c><00:37:39.839><c> return</c><00:37:40.160><c> a</c><00:37:40.240><c> value</c><00:37:40.960><c> or</c><00:37:41.200><c> if</c>

00:37:41.349 --> 00:37:41.359 align:start position:0%
if you forget to return a value or if
 

00:37:41.359 --> 00:37:43.030 align:start position:0%
if you forget to return a value or if
you<00:37:41.520><c> return</c><00:37:41.920><c> a</c><00:37:42.079><c> different</c><00:37:42.400><c> kind</c><00:37:42.560><c> of</c><00:37:42.720><c> value</c>

00:37:43.030 --> 00:37:43.040 align:start position:0%
you return a different kind of value
 

00:37:43.040 --> 00:37:45.109 align:start position:0%
you return a different kind of value
like<00:37:43.200><c> your</c><00:37:43.440><c> string</c><00:37:44.079><c> we</c><00:37:44.240><c> get</c><00:37:44.480><c> a</c><00:37:44.560><c> compilation</c>

00:37:45.109 --> 00:37:45.119 align:start position:0%
like your string we get a compilation
 

00:37:45.119 --> 00:37:47.910 align:start position:0%
like your string we get a compilation
error<00:37:45.440><c> immediately</c><00:37:46.560><c> so</c><00:37:46.720><c> as</c><00:37:46.960><c> best</c><00:37:47.200><c> practice</c>

00:37:47.910 --> 00:37:47.920 align:start position:0%
error immediately so as best practice
 

00:37:47.920 --> 00:37:50.390 align:start position:0%
error immediately so as best practice
always<00:37:48.400><c> properly</c><00:37:48.880><c> annotate</c><00:37:49.200><c> your</c><00:37:49.359><c> functions</c>

00:37:50.390 --> 00:37:50.400 align:start position:0%
always properly annotate your functions
 

00:37:50.400 --> 00:37:53.109 align:start position:0%
always properly annotate your functions
now<00:37:50.560><c> let's</c><00:37:50.720><c> temporarily</c><00:37:51.280><c> return</c><00:37:52.000><c> zero</c>

00:37:53.109 --> 00:37:53.119 align:start position:0%
now let's temporarily return zero
 

00:37:53.119 --> 00:37:53.990 align:start position:0%
now let's temporarily return zero
okay

00:37:53.990 --> 00:37:54.000 align:start position:0%
okay
 

00:37:54.000 --> 00:37:56.310 align:start position:0%
okay
look<00:37:54.240><c> at</c><00:37:54.320><c> the</c><00:37:54.560><c> income</c><00:37:54.880><c> parameter</c><00:37:55.760><c> this</c><00:37:56.000><c> is</c><00:37:56.079><c> an</c>

00:37:56.310 --> 00:37:56.320 align:start position:0%
look at the income parameter this is an
 

00:37:56.320 --> 00:37:58.470 align:start position:0%
look at the income parameter this is an
unused<00:37:56.720><c> parameter</c><00:37:57.359><c> now</c><00:37:57.520><c> we</c><00:37:57.680><c> have</c><00:37:57.839><c> a</c><00:37:57.920><c> compiler</c>

00:37:58.470 --> 00:37:58.480 align:start position:0%
unused parameter now we have a compiler
 

00:37:58.480 --> 00:38:00.710 align:start position:0%
unused parameter now we have a compiler
option<00:37:58.800><c> for</c><00:37:59.119><c> detecting</c><00:38:00.000><c> these</c><00:38:00.320><c> unused</c>

00:38:00.710 --> 00:38:00.720 align:start position:0%
option for detecting these unused
 

00:38:00.720 --> 00:38:01.910 align:start position:0%
option for detecting these unused
parameters

00:38:01.910 --> 00:38:01.920 align:start position:0%
parameters
 

00:38:01.920 --> 00:38:05.190 align:start position:0%
parameters
so<00:38:02.079><c> let's</c><00:38:02.240><c> go</c><00:38:02.400><c> back</c><00:38:02.560><c> to</c><00:38:02.720><c> our</c><00:38:03.040><c> ts</c><00:38:03.359><c> config</c><00:38:03.760><c> file</c>

00:38:05.190 --> 00:38:05.200 align:start position:0%
so let's go back to our ts config file
 

00:38:05.200 --> 00:38:07.030 align:start position:0%
so let's go back to our ts config file
in<00:38:05.280><c> the</c><00:38:05.440><c> type</c><00:38:05.680><c> checking</c><00:38:06.000><c> section</c>

00:38:07.030 --> 00:38:07.040 align:start position:0%
in the type checking section
 

00:38:07.040 --> 00:38:10.310 align:start position:0%
in the type checking section
we<00:38:07.280><c> have</c><00:38:07.760><c> a</c><00:38:07.920><c> compiler</c><00:38:08.480><c> option</c><00:38:08.800><c> called</c><00:38:09.520><c> no</c>

00:38:10.310 --> 00:38:10.320 align:start position:0%
we have a compiler option called no
 

00:38:10.320 --> 00:38:13.270 align:start position:0%
we have a compiler option called no
unused<00:38:11.119><c> parameters</c><00:38:12.160><c> we</c><00:38:12.320><c> have</c><00:38:12.480><c> to</c><00:38:12.640><c> explicitly</c>

00:38:13.270 --> 00:38:13.280 align:start position:0%
unused parameters we have to explicitly
 

00:38:13.280 --> 00:38:15.910 align:start position:0%
unused parameters we have to explicitly
turn<00:38:13.440><c> this</c><00:38:13.680><c> on</c><00:38:14.240><c> because</c><00:38:14.560><c> this</c><00:38:14.720><c> setting</c><00:38:15.520><c> is</c><00:38:15.680><c> not</c>

00:38:15.910 --> 00:38:15.920 align:start position:0%
turn this on because this setting is not
 

00:38:15.920 --> 00:38:18.630 align:start position:0%
turn this on because this setting is not
part<00:38:16.160><c> of</c><00:38:16.720><c> strict</c><00:38:17.119><c> setting</c><00:38:18.079><c> now</c><00:38:18.320><c> back</c><00:38:18.480><c> to</c>

00:38:18.630 --> 00:38:18.640 align:start position:0%
part of strict setting now back to
 

00:38:18.640 --> 00:38:20.150 align:start position:0%
part of strict setting now back to
index.ts

00:38:20.150 --> 00:38:20.160 align:start position:0%
index.ts
 

00:38:20.160 --> 00:38:20.950 align:start position:0%
index.ts
look

00:38:20.950 --> 00:38:20.960 align:start position:0%
look
 

00:38:20.960 --> 00:38:23.270 align:start position:0%
look
we<00:38:21.119><c> have</c><00:38:21.280><c> a</c><00:38:21.440><c> warning</c><00:38:22.160><c> saying</c>

00:38:23.270 --> 00:38:23.280 align:start position:0%
we have a warning saying
 

00:38:23.280 --> 00:38:25.510 align:start position:0%
we have a warning saying
income<00:38:23.680><c> is</c><00:38:23.760><c> declared</c><00:38:24.560><c> but</c><00:38:24.720><c> its</c><00:38:24.960><c> value</c><00:38:25.359><c> is</c>

00:38:25.510 --> 00:38:25.520 align:start position:0%
income is declared but its value is
 

00:38:25.520 --> 00:38:27.829 align:start position:0%
income is declared but its value is
never<00:38:25.839><c> read</c><00:38:26.560><c> so</c><00:38:26.720><c> let's</c><00:38:26.880><c> change</c><00:38:27.119><c> this</c><00:38:27.280><c> code</c><00:38:27.680><c> and</c>

00:38:27.829 --> 00:38:27.839 align:start position:0%
never read so let's change this code and
 

00:38:27.839 --> 00:38:29.430 align:start position:0%
never read so let's change this code and
say<00:38:28.560><c> if</c>

00:38:29.430 --> 00:38:29.440 align:start position:0%
say if
 

00:38:29.440 --> 00:38:32.710 align:start position:0%
say if
income<00:38:30.079><c> is</c><00:38:30.320><c> less</c><00:38:30.560><c> than</c><00:38:31.119><c> 50</c><00:38:31.599><c> 000</c>

00:38:32.710 --> 00:38:32.720 align:start position:0%
income is less than 50 000
 

00:38:32.720 --> 00:38:35.190 align:start position:0%
income is less than 50 000
then<00:38:32.880><c> we're</c><00:38:33.040><c> going</c><00:38:33.200><c> to</c><00:38:33.280><c> return</c><00:38:33.760><c> income</c><00:38:34.640><c> times</c>

00:38:35.190 --> 00:38:35.200 align:start position:0%
then we're going to return income times
 

00:38:35.200 --> 00:38:36.550 align:start position:0%
then we're going to return income times
1.2

00:38:36.550 --> 00:38:36.560 align:start position:0%
1.2
 

00:38:36.560 --> 00:38:38.310 align:start position:0%
1.2
now<00:38:36.720><c> here</c><00:38:36.880><c> we</c><00:38:37.040><c> have</c><00:38:37.359><c> another</c><00:38:37.760><c> compilation</c>

00:38:38.310 --> 00:38:38.320 align:start position:0%
now here we have another compilation
 

00:38:38.320 --> 00:38:39.589 align:start position:0%
now here we have another compilation
error

00:38:39.589 --> 00:38:39.599 align:start position:0%
error
 

00:38:39.599 --> 00:38:41.670 align:start position:0%
error
saying<00:38:40.160><c> function</c><00:38:40.560><c> lags</c><00:38:41.040><c> ending</c><00:38:41.359><c> return</c>

00:38:41.670 --> 00:38:41.680 align:start position:0%
saying function lags ending return
 

00:38:41.680 --> 00:38:43.829 align:start position:0%
saying function lags ending return
statement<00:38:42.400><c> and</c><00:38:42.640><c> return</c><00:38:42.960><c> type</c><00:38:43.359><c> does</c><00:38:43.599><c> not</c>

00:38:43.829 --> 00:38:43.839 align:start position:0%
statement and return type does not
 

00:38:43.839 --> 00:38:45.589 align:start position:0%
statement and return type does not
include<00:38:44.160><c> undefined</c><00:38:44.960><c> it</c><00:38:45.119><c> sounds</c><00:38:45.359><c> a</c><00:38:45.440><c> bit</c>

00:38:45.589 --> 00:38:45.599 align:start position:0%
include undefined it sounds a bit
 

00:38:45.599 --> 00:38:47.510 align:start position:0%
include undefined it sounds a bit
cryptic<00:38:46.240><c> but</c><00:38:46.400><c> what</c><00:38:46.560><c> this</c><00:38:46.800><c> error</c><00:38:47.040><c> is</c><00:38:47.119><c> saying</c><00:38:47.440><c> is</c>

00:38:47.510 --> 00:38:47.520 align:start position:0%
cryptic but what this error is saying is
 

00:38:47.520 --> 00:38:50.069 align:start position:0%
cryptic but what this error is saying is
that<00:38:48.240><c> if</c><00:38:48.400><c> this</c><00:38:48.560><c> condition</c><00:38:49.040><c> is</c><00:38:49.200><c> true</c><00:38:49.920><c> we're</c>

00:38:50.069 --> 00:38:50.079 align:start position:0%
that if this condition is true we're
 

00:38:50.079 --> 00:38:52.710 align:start position:0%
that if this condition is true we're
going<00:38:50.160><c> to</c><00:38:50.240><c> return</c><00:38:50.560><c> a</c><00:38:50.720><c> number</c><00:38:51.599><c> otherwise</c><00:38:52.480><c> as</c>

00:38:52.710 --> 00:38:52.720 align:start position:0%
going to return a number otherwise as
 

00:38:52.720 --> 00:38:55.430 align:start position:0%
going to return a number otherwise as
you<00:38:52.880><c> know</c><00:38:53.599><c> javascript</c><00:38:54.320><c> by</c><00:38:54.480><c> default</c><00:38:55.119><c> always</c>

00:38:55.430 --> 00:38:55.440 align:start position:0%
you know javascript by default always
 

00:38:55.440 --> 00:38:58.790 align:start position:0%
you know javascript by default always
returns<00:38:56.400><c> undefined</c><00:38:57.359><c> from</c><00:38:57.599><c> our</c><00:38:57.760><c> functions</c><00:38:58.560><c> and</c>

00:38:58.790 --> 00:38:58.800 align:start position:0%
returns undefined from our functions and
 

00:38:58.800 --> 00:39:01.430 align:start position:0%
returns undefined from our functions and
undefined<00:38:59.680><c> is</c><00:38:59.839><c> not</c><00:39:00.160><c> a</c><00:39:00.320><c> number</c>

00:39:01.430 --> 00:39:01.440 align:start position:0%
undefined is not a number
 

00:39:01.440 --> 00:39:03.430 align:start position:0%
undefined is not a number
now<00:39:01.760><c> let</c><00:39:01.920><c> me</c><00:39:02.079><c> temporarily</c>

00:39:03.430 --> 00:39:03.440 align:start position:0%
now let me temporarily
 

00:39:03.440 --> 00:39:04.950 align:start position:0%
now let me temporarily
remove<00:39:03.760><c> the</c><00:39:03.839><c> annotation</c><00:39:04.320><c> for</c><00:39:04.480><c> the</c><00:39:04.640><c> return</c>

00:39:04.950 --> 00:39:04.960 align:start position:0%
remove the annotation for the return
 

00:39:04.960 --> 00:39:07.750 align:start position:0%
remove the annotation for the return
type

00:39:07.750 --> 00:39:07.760 align:start position:0%
 
 

00:39:07.760 --> 00:39:09.670 align:start position:0%
 
look<00:39:08.079><c> we</c><00:39:08.240><c> have</c><00:39:08.400><c> no</c><00:39:08.560><c> compilation</c><00:39:09.119><c> error</c><00:39:09.520><c> but</c>

00:39:09.670 --> 00:39:09.680 align:start position:0%
look we have no compilation error but
 

00:39:09.680 --> 00:39:11.589 align:start position:0%
look we have no compilation error but
this<00:39:09.920><c> function</c><00:39:10.320><c> has</c><00:39:10.480><c> a</c><00:39:10.640><c> problem</c>

00:39:11.589 --> 00:39:11.599 align:start position:0%
this function has a problem
 

00:39:11.599 --> 00:39:13.990 align:start position:0%
this function has a problem
if<00:39:11.760><c> the</c><00:39:11.920><c> income</c><00:39:12.320><c> is</c><00:39:12.560><c> greater</c><00:39:12.880><c> than</c><00:39:13.040><c> 50</c><00:39:13.440><c> 000</c>

00:39:13.990 --> 00:39:14.000 align:start position:0%
if the income is greater than 50 000
 

00:39:14.000 --> 00:39:15.510 align:start position:0%
if the income is greater than 50 000
we're<00:39:14.160><c> gonna</c><00:39:14.400><c> get</c><00:39:14.640><c> undefined</c><00:39:15.200><c> from</c><00:39:15.359><c> this</c>

00:39:15.510 --> 00:39:15.520 align:start position:0%
we're gonna get undefined from this
 

00:39:15.520 --> 00:39:17.510 align:start position:0%
we're gonna get undefined from this
function<00:39:16.240><c> and</c><00:39:16.320><c> this</c><00:39:16.560><c> may</c><00:39:16.720><c> cause</c><00:39:16.960><c> a</c><00:39:17.040><c> bug</c><00:39:17.200><c> in</c><00:39:17.359><c> our</c>

00:39:17.510 --> 00:39:17.520 align:start position:0%
function and this may cause a bug in our
 

00:39:17.520 --> 00:39:19.430 align:start position:0%
function and this may cause a bug in our
application<00:39:18.480><c> the</c><00:39:18.640><c> good</c><00:39:18.800><c> news</c><00:39:19.040><c> is</c><00:39:19.200><c> that</c><00:39:19.359><c> we</c>

00:39:19.430 --> 00:39:19.440 align:start position:0%
application the good news is that we
 

00:39:19.440 --> 00:39:21.349 align:start position:0%
application the good news is that we
have<00:39:19.760><c> another</c><00:39:20.079><c> compiler</c><00:39:20.560><c> option</c><00:39:21.200><c> for</c>

00:39:21.349 --> 00:39:21.359 align:start position:0%
have another compiler option for
 

00:39:21.359 --> 00:39:23.670 align:start position:0%
have another compiler option for
detecting<00:39:21.839><c> these</c><00:39:22.079><c> kind</c><00:39:22.240><c> of</c><00:39:22.400><c> issues</c><00:39:23.040><c> where</c><00:39:23.440><c> we</c>

00:39:23.670 --> 00:39:23.680 align:start position:0%
detecting these kind of issues where we
 

00:39:23.680 --> 00:39:25.430 align:start position:0%
detecting these kind of issues where we
forget<00:39:24.000><c> to</c><00:39:24.079><c> return</c><00:39:24.400><c> a</c><00:39:24.480><c> value</c>

00:39:25.430 --> 00:39:25.440 align:start position:0%
forget to return a value
 

00:39:25.440 --> 00:39:28.470 align:start position:0%
forget to return a value
so<00:39:25.920><c> back</c><00:39:26.079><c> to</c><00:39:26.240><c> our</c><00:39:26.560><c> ts</c><00:39:26.880><c> config</c><00:39:27.280><c> file</c><00:39:28.079><c> again</c><00:39:28.400><c> in</c>

00:39:28.470 --> 00:39:28.480 align:start position:0%
so back to our ts config file again in
 

00:39:28.480 --> 00:39:30.390 align:start position:0%
so back to our ts config file again in
the<00:39:28.560><c> type</c><00:39:28.800><c> checking</c><00:39:29.119><c> section</c>

00:39:30.390 --> 00:39:30.400 align:start position:0%
the type checking section
 

00:39:30.400 --> 00:39:33.430 align:start position:0%
the type checking section
we<00:39:30.560><c> have</c><00:39:30.720><c> a</c><00:39:30.800><c> setting</c><00:39:31.119><c> called</c><00:39:31.760><c> no</c><00:39:32.480><c> implicit</c>

00:39:33.430 --> 00:39:33.440 align:start position:0%
we have a setting called no implicit
 

00:39:33.440 --> 00:39:34.470 align:start position:0%
we have a setting called no implicit
returns

00:39:34.470 --> 00:39:34.480 align:start position:0%
returns
 

00:39:34.480 --> 00:39:36.950 align:start position:0%
returns
again<00:39:35.040><c> we</c><00:39:35.200><c> have</c><00:39:35.359><c> to</c><00:39:35.520><c> explicitly</c><00:39:36.079><c> turn</c><00:39:36.320><c> this</c><00:39:36.560><c> on</c>

00:39:36.950 --> 00:39:36.960 align:start position:0%
again we have to explicitly turn this on
 

00:39:36.960 --> 00:39:38.470 align:start position:0%
again we have to explicitly turn this on
because<00:39:37.200><c> this</c><00:39:37.440><c> is</c><00:39:37.520><c> not</c><00:39:37.680><c> part</c><00:39:37.920><c> of</c><00:39:38.000><c> the</c><00:39:38.160><c> strict</c>

00:39:38.470 --> 00:39:38.480 align:start position:0%
because this is not part of the strict
 

00:39:38.480 --> 00:39:39.829 align:start position:0%
because this is not part of the strict
setting<00:39:38.960><c> okay</c>

00:39:39.829 --> 00:39:39.839 align:start position:0%
setting okay
 

00:39:39.839 --> 00:39:41.349 align:start position:0%
setting okay
now

00:39:41.349 --> 00:39:41.359 align:start position:0%
now
 

00:39:41.359 --> 00:39:43.030 align:start position:0%
now
to factor<00:39:41.599><c> code</c>

00:39:43.030 --> 00:39:43.040 align:start position:0%
to factor code
 

00:39:43.040 --> 00:39:45.430 align:start position:0%
to factor code
we<00:39:43.200><c> have</c><00:39:43.359><c> a</c><00:39:43.440><c> warning</c><00:39:43.839><c> saying</c><00:39:44.560><c> not</c><00:39:44.880><c> all</c><00:39:45.119><c> code</c>

00:39:45.430 --> 00:39:45.440 align:start position:0%
we have a warning saying not all code
 

00:39:45.440 --> 00:39:48.150 align:start position:0%
we have a warning saying not all code
paths<00:39:46.000><c> return</c><00:39:46.480><c> a</c><00:39:46.560><c> value</c><00:39:47.359><c> so</c><00:39:47.520><c> now</c><00:39:47.680><c> we</c><00:39:47.760><c> can</c><00:39:47.920><c> fix</c>

00:39:48.150 --> 00:39:48.160 align:start position:0%
paths return a value so now we can fix
 

00:39:48.160 --> 00:39:49.430 align:start position:0%
paths return a value so now we can fix
this<00:39:48.320><c> problem</c>

00:39:49.430 --> 00:39:49.440 align:start position:0%
this problem
 

00:39:49.440 --> 00:39:51.829 align:start position:0%
this problem
and<00:39:49.599><c> say</c><00:39:49.920><c> otherwise</c><00:39:50.800><c> if</c><00:39:51.040><c> income</c><00:39:51.440><c> is</c><00:39:51.520><c> greater</c>

00:39:51.829 --> 00:39:51.839 align:start position:0%
and say otherwise if income is greater
 

00:39:51.839 --> 00:39:54.310 align:start position:0%
and say otherwise if income is greater
than<00:39:52.000><c> 50</c><00:39:52.400><c> 000</c><00:39:53.119><c> we're</c><00:39:53.359><c> going</c><00:39:53.440><c> to</c><00:39:53.520><c> return</c><00:39:53.920><c> income</c>

00:39:54.310 --> 00:39:54.320 align:start position:0%
than 50 000 we're going to return income
 

00:39:54.320 --> 00:39:58.069 align:start position:0%
than 50 000 we're going to return income
times<00:39:54.960><c> 1.3</c><00:39:55.920><c> but</c><00:39:56.079><c> again</c><00:39:56.880><c> it's</c><00:39:57.119><c> best</c><00:39:57.440><c> to</c><00:39:57.680><c> always</c>

00:39:58.069 --> 00:39:58.079 align:start position:0%
times 1.3 but again it's best to always
 

00:39:58.079 --> 00:40:00.069 align:start position:0%
times 1.3 but again it's best to always
annotate<00:39:58.480><c> our</c><00:39:58.640><c> functions</c><00:39:59.119><c> properly</c><00:39:59.920><c> to</c>

00:40:00.069 --> 00:40:00.079 align:start position:0%
annotate our functions properly to
 

00:40:00.079 --> 00:40:02.790 align:start position:0%
annotate our functions properly to
prevent<00:40:00.720><c> all</c><00:40:00.800><c> these</c><00:40:01.119><c> issues</c><00:40:01.680><c> so</c><00:40:02.400><c> we</c><00:40:02.560><c> should</c>

00:40:02.790 --> 00:40:02.800 align:start position:0%
prevent all these issues so we should
 

00:40:02.800 --> 00:40:05.030 align:start position:0%
prevent all these issues so we should
always<00:40:03.040><c> return</c><00:40:03.839><c> a</c><00:40:04.000><c> number</c><00:40:04.640><c> from</c><00:40:04.880><c> this</c>

00:40:05.030 --> 00:40:05.040 align:start position:0%
always return a number from this
 

00:40:05.040 --> 00:40:06.069 align:start position:0%
always return a number from this
function

00:40:06.069 --> 00:40:06.079 align:start position:0%
function
 

00:40:06.079 --> 00:40:07.910 align:start position:0%
function
now<00:40:06.240><c> we</c><00:40:06.400><c> have</c><00:40:06.640><c> another</c><00:40:07.040><c> useful</c><00:40:07.359><c> compiler</c>

00:40:07.910 --> 00:40:07.920 align:start position:0%
now we have another useful compiler
 

00:40:07.920 --> 00:40:11.030 align:start position:0%
now we have another useful compiler
setting<00:40:08.240><c> for</c><00:40:08.800><c> detecting</c><00:40:09.680><c> unused</c><00:40:10.160><c> variables</c>

00:40:11.030 --> 00:40:11.040 align:start position:0%
setting for detecting unused variables
 

00:40:11.040 --> 00:40:13.190 align:start position:0%
setting for detecting unused variables
so<00:40:11.200><c> if</c><00:40:11.280><c> we</c><00:40:11.440><c> declare</c><00:40:11.839><c> a</c><00:40:11.920><c> variable</c><00:40:12.319><c> like</c><00:40:12.640><c> x</c><00:40:13.040><c> and</c>

00:40:13.190 --> 00:40:13.200 align:start position:0%
so if we declare a variable like x and
 

00:40:13.200 --> 00:40:15.030 align:start position:0%
so if we declare a variable like x and
don't<00:40:13.440><c> use</c><00:40:13.680><c> it</c><00:40:13.760><c> in</c><00:40:13.839><c> this</c><00:40:14.000><c> function</c><00:40:14.560><c> this</c><00:40:14.800><c> is</c>

00:40:15.030 --> 00:40:15.040 align:start position:0%
don't use it in this function this is
 

00:40:15.040 --> 00:40:17.510 align:start position:0%
don't use it in this function this is
unused<00:40:15.920><c> now</c><00:40:16.079><c> using</c><00:40:16.319><c> the</c><00:40:16.400><c> typescript</c><00:40:16.880><c> compiler</c>

00:40:17.510 --> 00:40:17.520 align:start position:0%
unused now using the typescript compiler
 

00:40:17.520 --> 00:40:19.670 align:start position:0%
unused now using the typescript compiler
we<00:40:17.680><c> can</c><00:40:17.839><c> find</c><00:40:18.079><c> these</c><00:40:18.319><c> issues</c><00:40:18.560><c> in</c><00:40:18.720><c> our</c><00:40:18.880><c> code</c>

00:40:19.670 --> 00:40:19.680 align:start position:0%
we can find these issues in our code
 

00:40:19.680 --> 00:40:20.470 align:start position:0%
we can find these issues in our code
so

00:40:20.470 --> 00:40:20.480 align:start position:0%
so
 

00:40:20.480 --> 00:40:22.470 align:start position:0%
so
back<00:40:20.720><c> to</c><00:40:20.800><c> ts</c><00:40:21.119><c> config</c>

00:40:22.470 --> 00:40:22.480 align:start position:0%
back to ts config
 

00:40:22.480 --> 00:40:24.390 align:start position:0%
back to ts config
here<00:40:22.640><c> is</c><00:40:22.800><c> the</c><00:40:22.880><c> setting</c><00:40:23.599><c> no</c>

00:40:24.390 --> 00:40:24.400 align:start position:0%
here is the setting no
 

00:40:24.400 --> 00:40:27.910 align:start position:0%
here is the setting no
unused<00:40:25.200><c> locals</c><00:40:26.240><c> with</c><00:40:26.400><c> this</c><00:40:26.560><c> feature</c><00:40:26.880><c> enabled</c>

00:40:27.910 --> 00:40:27.920 align:start position:0%
unused locals with this feature enabled
 

00:40:27.920 --> 00:40:28.710 align:start position:0%
unused locals with this feature enabled
now

00:40:28.710 --> 00:40:28.720 align:start position:0%
now
 

00:40:28.720 --> 00:40:30.550 align:start position:0%
now
back<00:40:28.880><c> to</c><00:40:28.960><c> our</c><00:40:29.119><c> code</c><00:40:29.920><c> we</c><00:40:30.079><c> have</c><00:40:30.160><c> a</c><00:40:30.240><c> yellow</c>

00:40:30.550 --> 00:40:30.560 align:start position:0%
back to our code we have a yellow
 

00:40:30.560 --> 00:40:32.150 align:start position:0%
back to our code we have a yellow
warning<00:40:30.880><c> saying</c>

00:40:32.150 --> 00:40:32.160 align:start position:0%
warning saying
 

00:40:32.160 --> 00:40:34.309 align:start position:0%
warning saying
x<00:40:32.400><c> is</c><00:40:32.560><c> declared</c><00:40:33.200><c> but</c><00:40:33.359><c> its</c><00:40:33.599><c> value</c><00:40:33.920><c> is</c><00:40:34.079><c> never</c>

00:40:34.309 --> 00:40:34.319 align:start position:0%
x is declared but its value is never
 

00:40:34.319 --> 00:40:35.829 align:start position:0%
x is declared but its value is never
read<00:40:34.800><c> so</c>

00:40:35.829 --> 00:40:35.839 align:start position:0%
read so
 

00:40:35.839 --> 00:40:37.589 align:start position:0%
read so
now<00:40:36.079><c> we</c><00:40:36.160><c> can</c><00:40:36.319><c> delete</c><00:40:36.560><c> this</c><00:40:36.800><c> and</c><00:40:36.960><c> make</c><00:40:37.200><c> our</c><00:40:37.359><c> code</c>

00:40:37.589 --> 00:40:37.599 align:start position:0%
now we can delete this and make our code
 

00:40:37.599 --> 00:40:38.390 align:start position:0%
now we can delete this and make our code
cleaner

00:40:38.390 --> 00:40:38.400 align:start position:0%
cleaner
 

00:40:38.400 --> 00:40:40.470 align:start position:0%
cleaner
so<00:40:38.560><c> this</c><00:40:38.720><c> is</c><00:40:38.880><c> the</c><00:40:38.960><c> basics</c><00:40:39.359><c> of</c><00:40:39.440><c> functions</c><00:40:40.319><c> now</c>

00:40:40.470 --> 00:40:40.480 align:start position:0%
so this is the basics of functions now
 

00:40:40.480 --> 00:40:43.430 align:start position:0%
so this is the basics of functions now
let's<00:40:40.720><c> add</c><00:40:40.880><c> a</c><00:40:40.960><c> second</c><00:40:41.280><c> parameter</c><00:40:41.680><c> here</c><00:40:42.240><c> called</c>

00:40:43.430 --> 00:40:43.440 align:start position:0%
let's add a second parameter here called
 

00:40:43.440 --> 00:40:45.430 align:start position:0%
let's add a second parameter here called
tax<00:40:43.760><c> here</c><00:40:44.400><c> of</c><00:40:44.640><c> type</c>

00:40:45.430 --> 00:40:45.440 align:start position:0%
tax here of type
 

00:40:45.440 --> 00:40:46.710 align:start position:0%
tax here of type
number

00:40:46.710 --> 00:40:46.720 align:start position:0%
number
 

00:40:46.720 --> 00:40:48.630 align:start position:0%
number
now<00:40:46.880><c> we</c><00:40:47.040><c> have</c><00:40:47.200><c> a</c><00:40:47.280><c> warning</c><00:40:47.599><c> here</c><00:40:48.000><c> saying</c>

00:40:48.630 --> 00:40:48.640 align:start position:0%
now we have a warning here saying
 

00:40:48.640 --> 00:40:50.550 align:start position:0%
now we have a warning here saying
texture<00:40:49.119><c> is</c><00:40:49.280><c> declared</c><00:40:49.839><c> but</c><00:40:50.079><c> its</c><00:40:50.240><c> value</c><00:40:50.480><c> is</c>

00:40:50.550 --> 00:40:50.560 align:start position:0%
texture is declared but its value is
 

00:40:50.560 --> 00:40:53.109 align:start position:0%
texture is declared but its value is
never<00:40:50.880><c> read</c><00:40:51.440><c> so</c><00:40:51.599><c> let's</c><00:40:51.920><c> change</c>

00:40:53.109 --> 00:40:53.119 align:start position:0%
never read so let's change
 

00:40:53.119 --> 00:40:54.630 align:start position:0%
never read so let's change
our<00:40:53.280><c> condition</c><00:40:53.760><c> to</c>

00:40:54.630 --> 00:40:54.640 align:start position:0%
our condition to
 

00:40:54.640 --> 00:40:56.470 align:start position:0%
our condition to
if<00:40:54.880><c> tax</c><00:40:55.200><c> year</c>

00:40:56.470 --> 00:40:56.480 align:start position:0%
if tax year
 

00:40:56.480 --> 00:40:59.430 align:start position:0%
if tax year
is<00:40:56.640><c> less</c><00:40:56.880><c> than</c><00:40:57.119><c> 2022</c><00:40:58.400><c> then</c><00:40:58.640><c> return</c><00:40:59.040><c> income</c>

00:40:59.430 --> 00:40:59.440 align:start position:0%
is less than 2022 then return income
 

00:40:59.440 --> 00:41:01.430 align:start position:0%
is less than 2022 then return income
times<00:40:59.920><c> 1.2</c>

00:41:01.430 --> 00:41:01.440 align:start position:0%
times 1.2
 

00:41:01.440 --> 00:41:03.270 align:start position:0%
times 1.2
so<00:41:01.599><c> now</c><00:41:01.760><c> with</c><00:41:01.920><c> these</c><00:41:02.079><c> two</c><00:41:02.240><c> parameters</c><00:41:03.040><c> if</c><00:41:03.119><c> you</c>

00:41:03.270 --> 00:41:03.280 align:start position:0%
so now with these two parameters if you
 

00:41:03.280 --> 00:41:05.670 align:start position:0%
so now with these two parameters if you
want<00:41:03.359><c> to</c><00:41:03.440><c> call</c><00:41:03.680><c> this</c><00:41:03.839><c> function</c>

00:41:05.670 --> 00:41:05.680 align:start position:0%
want to call this function
 

00:41:05.680 --> 00:41:08.390 align:start position:0%
want to call this function
we<00:41:05.839><c> have</c><00:41:05.920><c> to</c><00:41:06.079><c> supply</c><00:41:06.960><c> exactly</c><00:41:07.520><c> two</c><00:41:07.760><c> arguments</c>

00:41:08.390 --> 00:41:08.400 align:start position:0%
we have to supply exactly two arguments
 

00:41:08.400 --> 00:41:10.150 align:start position:0%
we have to supply exactly two arguments
nothing<00:41:08.720><c> more</c><00:41:09.040><c> nothing</c><00:41:09.359><c> less</c>

00:41:10.150 --> 00:41:10.160 align:start position:0%
nothing more nothing less
 

00:41:10.160 --> 00:41:11.829 align:start position:0%
nothing more nothing less
so<00:41:10.319><c> i'm</c><00:41:10.480><c> going</c><00:41:10.560><c> to</c><00:41:10.640><c> pass</c><00:41:10.960><c> 10</c><00:41:11.200><c> 000</c><00:41:11.520><c> for</c><00:41:11.680><c> the</c>

00:41:11.829 --> 00:41:11.839 align:start position:0%
so i'm going to pass 10 000 for the
 

00:41:11.839 --> 00:41:14.950 align:start position:0%
so i'm going to pass 10 000 for the
income<00:41:12.560><c> and</c><00:41:12.800><c> 2022</c><00:41:13.520><c> for</c><00:41:13.599><c> the</c><00:41:13.760><c> tax</c><00:41:14.079><c> year</c><00:41:14.720><c> if</c><00:41:14.800><c> you</c>

00:41:14.950 --> 00:41:14.960 align:start position:0%
income and 2022 for the tax year if you
 

00:41:14.960 --> 00:41:16.950 align:start position:0%
income and 2022 for the tax year if you
add<00:41:15.119><c> an</c><00:41:15.359><c> extra</c><00:41:15.680><c> argument</c><00:41:16.079><c> here</c>

00:41:16.950 --> 00:41:16.960 align:start position:0%
add an extra argument here
 

00:41:16.960 --> 00:41:19.349 align:start position:0%
add an extra argument here
we<00:41:17.119><c> get</c><00:41:17.280><c> a</c><00:41:17.359><c> compilation</c><00:41:17.839><c> error</c><00:41:18.160><c> saying</c>

00:41:19.349 --> 00:41:19.359 align:start position:0%
we get a compilation error saying
 

00:41:19.359 --> 00:41:21.670 align:start position:0%
we get a compilation error saying
expected<00:41:19.839><c> two</c><00:41:20.079><c> arguments</c><00:41:20.480><c> but</c><00:41:20.640><c> got</c><00:41:20.880><c> three</c><00:41:21.599><c> if</c>

00:41:21.670 --> 00:41:21.680 align:start position:0%
expected two arguments but got three if
 

00:41:21.680 --> 00:41:23.190 align:start position:0%
expected two arguments but got three if
you<00:41:21.839><c> have</c><00:41:21.920><c> been</c><00:41:22.079><c> coding</c><00:41:22.400><c> in</c><00:41:22.480><c> javascript</c><00:41:22.960><c> for</c><00:41:23.119><c> a</c>

00:41:23.190 --> 00:41:23.200 align:start position:0%
you have been coding in javascript for a
 

00:41:23.200 --> 00:41:25.030 align:start position:0%
you have been coding in javascript for a
while<00:41:23.760><c> you</c><00:41:23.920><c> know</c><00:41:24.079><c> that</c><00:41:24.240><c> this</c><00:41:24.480><c> is</c><00:41:24.720><c> valid</c>

00:41:25.030 --> 00:41:25.040 align:start position:0%
while you know that this is valid
 

00:41:25.040 --> 00:41:27.109 align:start position:0%
while you know that this is valid
javascript<00:41:25.599><c> code</c><00:41:26.000><c> so</c><00:41:26.240><c> javascript</c><00:41:26.880><c> doesn't</c>

00:41:27.109 --> 00:41:27.119 align:start position:0%
javascript code so javascript doesn't
 

00:41:27.119 --> 00:41:29.270 align:start position:0%
javascript code so javascript doesn't
really<00:41:27.440><c> care</c><00:41:28.079><c> how</c><00:41:28.240><c> many</c><00:41:28.480><c> arguments</c><00:41:28.880><c> we</c><00:41:29.040><c> pass</c>

00:41:29.270 --> 00:41:29.280 align:start position:0%
really care how many arguments we pass
 

00:41:29.280 --> 00:41:32.230 align:start position:0%
really care how many arguments we pass
to<00:41:29.440><c> a</c><00:41:29.520><c> function</c><00:41:30.079><c> we</c><00:41:30.240><c> can</c><00:41:30.400><c> pass</c><00:41:31.040><c> more</c><00:41:31.599><c> or</c><00:41:31.839><c> fewer</c>

00:41:32.230 --> 00:41:32.240 align:start position:0%
to a function we can pass more or fewer
 

00:41:32.240 --> 00:41:34.550 align:start position:0%
to a function we can pass more or fewer
arguments<00:41:32.880><c> than</c><00:41:33.040><c> the</c><00:41:33.200><c> number</c><00:41:33.440><c> of</c><00:41:33.599><c> parameters</c>

00:41:34.550 --> 00:41:34.560 align:start position:0%
arguments than the number of parameters
 

00:41:34.560 --> 00:41:37.109 align:start position:0%
arguments than the number of parameters
but<00:41:34.800><c> typescript</c><00:41:35.440><c> is</c><00:41:35.599><c> very</c><00:41:35.839><c> strict</c><00:41:36.240><c> about</c><00:41:36.480><c> this</c>

00:41:37.109 --> 00:41:37.119 align:start position:0%
but typescript is very strict about this
 

00:41:37.119 --> 00:41:38.950 align:start position:0%
but typescript is very strict about this
so<00:41:37.280><c> here</c><00:41:37.440><c> we</c><00:41:37.599><c> should</c><00:41:37.760><c> pass</c><00:41:38.240><c> exactly</c><00:41:38.720><c> two</c>

00:41:38.950 --> 00:41:38.960 align:start position:0%
so here we should pass exactly two
 

00:41:38.960 --> 00:41:41.349 align:start position:0%
so here we should pass exactly two
arguments<00:41:39.760><c> so</c><00:41:40.079><c> let's</c><00:41:40.240><c> remove</c><00:41:40.560><c> that</c>

00:41:41.349 --> 00:41:41.359 align:start position:0%
arguments so let's remove that
 

00:41:41.359 --> 00:41:42.630 align:start position:0%
arguments so let's remove that
but<00:41:41.599><c> what</c><00:41:41.839><c> if</c><00:41:41.920><c> you</c><00:41:42.000><c> want</c><00:41:42.160><c> to</c><00:41:42.240><c> make</c><00:41:42.319><c> this</c>

00:41:42.630 --> 00:41:42.640 align:start position:0%
but what if you want to make this
 

00:41:42.640 --> 00:41:44.950 align:start position:0%
but what if you want to make this
optional<00:41:43.119><c> let's</c><00:41:43.359><c> say</c><00:41:43.920><c> in</c><00:41:44.160><c> some</c><00:41:44.400><c> places</c><00:41:44.800><c> we</c>

00:41:44.950 --> 00:41:44.960 align:start position:0%
optional let's say in some places we
 

00:41:44.960 --> 00:41:47.430 align:start position:0%
optional let's say in some places we
want<00:41:45.119><c> to</c><00:41:45.200><c> call</c><00:41:45.440><c> this</c><00:41:45.599><c> function</c><00:41:46.480><c> without</c>

00:41:47.430 --> 00:41:47.440 align:start position:0%
want to call this function without
 

00:41:47.440 --> 00:41:50.550 align:start position:0%
want to call this function without
supplying<00:41:48.319><c> the</c><00:41:48.480><c> tax</c><00:41:48.800><c> year</c><00:41:49.440><c> well</c><00:41:50.079><c> we</c><00:41:50.240><c> can</c><00:41:50.400><c> make</c>

00:41:50.550 --> 00:41:50.560 align:start position:0%
supplying the tax year well we can make
 

00:41:50.560 --> 00:41:53.190 align:start position:0%
supplying the tax year well we can make
this<00:41:50.800><c> parameter</c><00:41:51.280><c> optional</c><00:41:52.000><c> by</c><00:41:52.240><c> adding</c><00:41:52.960><c> a</c>

00:41:53.190 --> 00:41:53.200 align:start position:0%
this parameter optional by adding a
 

00:41:53.200 --> 00:41:55.190 align:start position:0%
this parameter optional by adding a
question<00:41:53.599><c> mark</c><00:41:53.839><c> right</c><00:41:54.079><c> here</c>

00:41:55.190 --> 00:41:55.200 align:start position:0%
question mark right here
 

00:41:55.200 --> 00:41:57.030 align:start position:0%
question mark right here
now<00:41:55.680><c> we</c><00:41:55.839><c> have</c><00:41:55.920><c> a</c><00:41:56.000><c> compilation</c><00:41:56.560><c> error</c><00:41:56.720><c> on</c><00:41:56.880><c> this</c>

00:41:57.030 --> 00:41:57.040 align:start position:0%
now we have a compilation error on this
 

00:41:57.040 --> 00:41:58.309 align:start position:0%
now we have a compilation error on this
line<00:41:57.359><c> saying</c>

00:41:58.309 --> 00:41:58.319 align:start position:0%
line saying
 

00:41:58.319 --> 00:42:00.950 align:start position:0%
line saying
object<00:41:59.040><c> is</c><00:41:59.280><c> possibly</c><00:41:59.760><c> undefined</c>

00:42:00.950 --> 00:42:00.960 align:start position:0%
object is possibly undefined
 

00:42:00.960 --> 00:42:04.069 align:start position:0%
object is possibly undefined
so<00:42:01.200><c> if</c><00:42:01.359><c> we</c><00:42:01.440><c> don't</c><00:42:01.680><c> supply</c><00:42:02.640><c> the</c><00:42:02.880><c> tax</c><00:42:03.200><c> year</c><00:42:03.920><c> by</c>

00:42:04.069 --> 00:42:04.079 align:start position:0%
so if we don't supply the tax year by
 

00:42:04.079 --> 00:42:06.309 align:start position:0%
so if we don't supply the tax year by
default<00:42:04.800><c> undefined</c><00:42:05.359><c> will</c><00:42:05.520><c> be</c><00:42:05.680><c> used</c><00:42:06.079><c> and</c><00:42:06.240><c> we</c>

00:42:06.309 --> 00:42:06.319 align:start position:0%
default undefined will be used and we
 

00:42:06.319 --> 00:42:09.589 align:start position:0%
default undefined will be used and we
cannot<00:42:06.640><c> compare</c><00:42:07.040><c> undefined</c><00:42:07.839><c> with</c><00:42:08.079><c> 2022.</c>

00:42:09.589 --> 00:42:09.599 align:start position:0%
cannot compare undefined with 2022.
 

00:42:09.599 --> 00:42:11.829 align:start position:0%
cannot compare undefined with 2022.
so<00:42:09.760><c> here</c><00:42:09.920><c> we</c><00:42:10.079><c> have</c><00:42:10.480><c> two</c><00:42:10.720><c> options</c><00:42:11.280><c> one</c><00:42:11.520><c> option</c>

00:42:11.829 --> 00:42:11.839 align:start position:0%
so here we have two options one option
 

00:42:11.839 --> 00:42:15.030 align:start position:0%
so here we have two options one option
is<00:42:12.000><c> to</c><00:42:12.079><c> use</c><00:42:12.640><c> the</c><00:42:12.880><c> old</c><00:42:13.359><c> javascript</c><00:42:14.000><c> trick</c><00:42:14.640><c> so</c><00:42:14.800><c> we</c>

00:42:15.030 --> 00:42:15.040 align:start position:0%
is to use the old javascript trick so we
 

00:42:15.040 --> 00:42:17.510 align:start position:0%
is to use the old javascript trick so we
wrap<00:42:15.359><c> this</c><00:42:16.079><c> in</c><00:42:16.240><c> parenthesis</c>

00:42:17.510 --> 00:42:17.520 align:start position:0%
wrap this in parenthesis
 

00:42:17.520 --> 00:42:19.510 align:start position:0%
wrap this in parenthesis
and<00:42:17.599><c> then</c><00:42:17.760><c> using</c><00:42:18.079><c> the</c><00:42:18.240><c> or</c><00:42:18.560><c> operator</c><00:42:19.119><c> we</c><00:42:19.359><c> give</c>

00:42:19.510 --> 00:42:19.520 align:start position:0%
and then using the or operator we give
 

00:42:19.520 --> 00:42:22.470 align:start position:0%
and then using the or operator we give
it<00:42:19.599><c> a</c><00:42:19.680><c> default</c><00:42:20.079><c> value</c><00:42:20.480><c> like</c><00:42:20.960><c> 2022</c>

00:42:22.470 --> 00:42:22.480 align:start position:0%
it a default value like 2022
 

00:42:22.480 --> 00:42:25.270 align:start position:0%
it a default value like 2022
so<00:42:22.640><c> if</c><00:42:22.720><c> we</c><00:42:22.880><c> don't</c><00:42:23.119><c> supply</c><00:42:23.920><c> the</c><00:42:24.160><c> tax</c><00:42:24.480><c> year</c>

00:42:25.270 --> 00:42:25.280 align:start position:0%
so if we don't supply the tax year
 

00:42:25.280 --> 00:42:27.750 align:start position:0%
so if we don't supply the tax year
this<00:42:25.599><c> value</c><00:42:25.920><c> will</c><00:42:26.079><c> be</c><00:42:26.240><c> used</c><00:42:26.800><c> otherwise</c><00:42:27.520><c> the</c>

00:42:27.750 --> 00:42:27.760 align:start position:0%
this value will be used otherwise the
 

00:42:27.760 --> 00:42:29.589 align:start position:0%
this value will be used otherwise the
argument<00:42:28.160><c> that</c><00:42:28.319><c> we</c><00:42:28.480><c> pass</c><00:42:28.720><c> will</c><00:42:28.880><c> be</c><00:42:28.960><c> used</c><00:42:29.200><c> here</c>

00:42:29.589 --> 00:42:29.599 align:start position:0%
argument that we pass will be used here
 

00:42:29.599 --> 00:42:31.670 align:start position:0%
argument that we pass will be used here
okay<00:42:30.319><c> now</c><00:42:30.560><c> i</c><00:42:30.720><c> don't</c><00:42:30.800><c> like</c><00:42:30.960><c> this</c><00:42:31.200><c> approach</c>

00:42:31.670 --> 00:42:31.680 align:start position:0%
okay now i don't like this approach
 

00:42:31.680 --> 00:42:33.589 align:start position:0%
okay now i don't like this approach
there<00:42:31.920><c> is</c><00:42:32.000><c> a</c><00:42:32.079><c> better</c><00:42:32.319><c> way</c><00:42:32.880><c> we</c><00:42:33.040><c> can</c><00:42:33.200><c> give</c><00:42:33.359><c> this</c><00:42:33.520><c> a</c>

00:42:33.589 --> 00:42:33.599 align:start position:0%
there is a better way we can give this a
 

00:42:33.599 --> 00:42:35.670 align:start position:0%
there is a better way we can give this a
default<00:42:34.000><c> value</c><00:42:34.480><c> so</c><00:42:34.800><c> instead</c><00:42:35.119><c> of</c><00:42:35.200><c> making</c><00:42:35.520><c> it</c>

00:42:35.670 --> 00:42:35.680 align:start position:0%
default value so instead of making it
 

00:42:35.680 --> 00:42:37.750 align:start position:0%
default value so instead of making it
optional

00:42:37.750 --> 00:42:37.760 align:start position:0%
optional
 

00:42:37.760 --> 00:42:39.910 align:start position:0%
optional
we<00:42:37.920><c> give</c><00:42:38.079><c> it</c><00:42:38.160><c> a</c><00:42:38.240><c> default</c><00:42:38.640><c> value</c>

00:42:39.910 --> 00:42:39.920 align:start position:0%
we give it a default value
 

00:42:39.920 --> 00:42:41.270 align:start position:0%
we give it a default value
like<00:42:40.160><c> this</c>

00:42:41.270 --> 00:42:41.280 align:start position:0%
like this
 

00:42:41.280 --> 00:42:43.349 align:start position:0%
like this
now<00:42:41.440><c> we</c><00:42:41.599><c> can</c><00:42:41.680><c> call</c><00:42:41.920><c> this</c><00:42:42.079><c> function</c><00:42:42.720><c> with</c><00:42:43.200><c> or</c>

00:42:43.349 --> 00:42:43.359 align:start position:0%
now we can call this function with or
 

00:42:43.359 --> 00:42:45.750 align:start position:0%
now we can call this function with or
without<00:42:43.760><c> a</c><00:42:43.839><c> tax</c><00:42:44.079><c> year</c><00:42:44.720><c> if</c><00:42:44.880><c> we</c><00:42:45.040><c> don't</c><00:42:45.200><c> supply</c><00:42:45.520><c> an</c>

00:42:45.750 --> 00:42:45.760 align:start position:0%
without a tax year if we don't supply an
 

00:42:45.760 --> 00:42:47.750 align:start position:0%
without a tax year if we don't supply an
argument<00:42:46.079><c> for</c><00:42:46.240><c> the</c><00:42:46.319><c> tax</c><00:42:46.640><c> year</c><00:42:47.280><c> this</c><00:42:47.520><c> value</c>

00:42:47.750 --> 00:42:47.760 align:start position:0%
argument for the tax year this value
 

00:42:47.760 --> 00:42:50.950 align:start position:0%
argument for the tax year this value
will<00:42:47.920><c> be</c><00:42:48.079><c> used</c><00:42:48.640><c> otherwise</c><00:42:49.440><c> what</c><00:42:49.599><c> we</c><00:42:49.760><c> pass</c><00:42:50.079><c> here</c>

00:42:50.950 --> 00:42:50.960 align:start position:0%
will be used otherwise what we pass here
 

00:42:50.960 --> 00:42:52.870 align:start position:0%
will be used otherwise what we pass here
will<00:42:51.280><c> overwrite</c>

00:42:52.870 --> 00:42:52.880 align:start position:0%
will overwrite
 

00:42:52.880 --> 00:42:54.710 align:start position:0%
will overwrite
the<00:42:53.040><c> default</c><00:42:53.440><c> value</c><00:42:53.839><c> okay</c>

00:42:54.710 --> 00:42:54.720 align:start position:0%
the default value okay
 

00:42:54.720 --> 00:42:55.510 align:start position:0%
the default value okay
now

00:42:55.510 --> 00:42:55.520 align:start position:0%
now
 

00:42:55.520 --> 00:42:57.510 align:start position:0%
now
with<00:42:55.680><c> this</c><00:42:55.839><c> default</c><00:42:56.240><c> value</c><00:42:56.800><c> we</c><00:42:57.040><c> no</c><00:42:57.200><c> longer</c>

00:42:57.510 --> 00:42:57.520 align:start position:0%
with this default value we no longer
 

00:42:57.520 --> 00:42:58.390 align:start position:0%
with this default value we no longer
need<00:42:57.680><c> to</c><00:42:57.760><c> use</c>

00:42:58.390 --> 00:42:58.400 align:start position:0%
need to use
 

00:42:58.400 --> 00:43:00.230 align:start position:0%
need to use
this<00:42:58.640><c> ugly</c><00:42:58.960><c> expression</c><00:42:59.599><c> we</c><00:42:59.760><c> can</c><00:42:59.920><c> simply</c>

00:43:00.230 --> 00:43:00.240 align:start position:0%
this ugly expression we can simply
 

00:43:00.240 --> 00:43:01.190 align:start position:0%
this ugly expression we can simply
compare

00:43:01.190 --> 00:43:01.200 align:start position:0%
compare
 

00:43:01.200 --> 00:43:03.910 align:start position:0%
compare
tax<00:43:01.520><c> year</c><00:43:02.240><c> with</c><00:43:02.480><c> 2022</c>

00:43:03.910 --> 00:43:03.920 align:start position:0%
tax year with 2022
 

00:43:03.920 --> 00:43:05.510 align:start position:0%
tax year with 2022
so<00:43:04.079><c> let's</c><00:43:04.319><c> quickly</c><00:43:04.560><c> recap</c><00:43:05.040><c> what</c><00:43:05.119><c> you</c><00:43:05.280><c> learned</c>

00:43:05.510 --> 00:43:05.520 align:start position:0%
so let's quickly recap what you learned
 

00:43:05.520 --> 00:43:08.230 align:start position:0%
so let's quickly recap what you learned
in<00:43:05.599><c> this</c><00:43:05.760><c> lesson</c><00:43:06.480><c> as</c><00:43:06.640><c> a</c><00:43:06.720><c> best</c><00:43:06.960><c> practice</c><00:43:07.520><c> always</c>

00:43:08.230 --> 00:43:08.240 align:start position:0%
in this lesson as a best practice always
 

00:43:08.240 --> 00:43:10.069 align:start position:0%
in this lesson as a best practice always
properly<00:43:08.640><c> annotate</c><00:43:09.119><c> your</c><00:43:09.280><c> functions</c><00:43:09.839><c> all</c><00:43:09.920><c> the</c>

00:43:10.069 --> 00:43:10.079 align:start position:0%
properly annotate your functions all the
 

00:43:10.079 --> 00:43:13.349 align:start position:0%
properly annotate your functions all the
parameters<00:43:10.640><c> and</c><00:43:10.800><c> return</c><00:43:11.119><c> types</c><00:43:11.680><c> and</c><00:43:12.319><c> enable</c>

00:43:13.349 --> 00:43:13.359 align:start position:0%
parameters and return types and enable
 

00:43:13.359 --> 00:43:15.750 align:start position:0%
parameters and return types and enable
these<00:43:13.680><c> three</c><00:43:14.240><c> compiler</c><00:43:14.800><c> options</c>

00:43:15.750 --> 00:43:15.760 align:start position:0%
these three compiler options
 

00:43:15.760 --> 00:43:18.470 align:start position:0%
these three compiler options
no<00:43:16.000><c> unused</c><00:43:16.400><c> locals</c><00:43:17.280><c> no</c><00:43:17.440><c> unused</c><00:43:17.760><c> parameters</c>

00:43:18.470 --> 00:43:18.480 align:start position:0%
no unused locals no unused parameters
 

00:43:18.480 --> 00:43:22.860 align:start position:0%
no unused locals no unused parameters
and<00:43:19.040><c> no</c><00:43:19.280><c> implicit</c><00:43:19.680><c> returns</c>

00:43:22.860 --> 00:43:22.870 align:start position:0%
 
 

00:43:22.870 --> 00:43:28.069 align:start position:0%
 
[Music]

00:43:28.069 --> 00:43:28.079 align:start position:0%
 
 

00:43:28.079 --> 00:43:29.030 align:start position:0%
 
all<00:43:28.160><c> right</c><00:43:28.319><c> the</c><00:43:28.400><c> last</c><00:43:28.560><c> thing</c><00:43:28.800><c> we're</c><00:43:28.880><c> going</c><00:43:28.960><c> to</c>

00:43:29.030 --> 00:43:29.040 align:start position:0%
all right the last thing we're going to
 

00:43:29.040 --> 00:43:31.349 align:start position:0%
all right the last thing we're going to
cover<00:43:29.280><c> in</c><00:43:29.440><c> this</c><00:43:29.520><c> section</c><00:43:30.000><c> is</c><00:43:30.240><c> objects</c><00:43:31.200><c> so</c>

00:43:31.349 --> 00:43:31.359 align:start position:0%
cover in this section is objects so
 

00:43:31.359 --> 00:43:33.750 align:start position:0%
cover in this section is objects so
let's<00:43:31.520><c> declare</c><00:43:32.160><c> an</c><00:43:32.400><c> employee</c><00:43:32.800><c> object</c>

00:43:33.750 --> 00:43:33.760 align:start position:0%
let's declare an employee object
 

00:43:33.760 --> 00:43:35.750 align:start position:0%
let's declare an employee object
with<00:43:34.000><c> an</c><00:43:34.160><c> id</c><00:43:34.480><c> property</c>

00:43:35.750 --> 00:43:35.760 align:start position:0%
with an id property
 

00:43:35.760 --> 00:43:38.069 align:start position:0%
with an id property
now<00:43:36.000><c> you</c><00:43:36.160><c> know</c><00:43:36.319><c> that</c><00:43:36.560><c> in</c><00:43:36.720><c> javascript</c><00:43:37.599><c> objects</c>

00:43:38.069 --> 00:43:38.079 align:start position:0%
now you know that in javascript objects
 

00:43:38.079 --> 00:43:40.309 align:start position:0%
now you know that in javascript objects
are<00:43:38.240><c> dynamic</c><00:43:39.040><c> so</c><00:43:39.200><c> their</c><00:43:39.440><c> shape</c><00:43:39.680><c> can</c><00:43:40.000><c> change</c>

00:43:40.309 --> 00:43:40.319 align:start position:0%
are dynamic so their shape can change
 

00:43:40.319 --> 00:43:42.390 align:start position:0%
are dynamic so their shape can change
throughout<00:43:40.640><c> the</c><00:43:40.800><c> lifetime</c><00:43:41.280><c> of</c><00:43:41.280><c> our</c><00:43:41.440><c> programs</c>

00:43:42.390 --> 00:43:42.400 align:start position:0%
throughout the lifetime of our programs
 

00:43:42.400 --> 00:43:44.470 align:start position:0%
throughout the lifetime of our programs
so<00:43:42.560><c> once</c><00:43:42.800><c> we</c><00:43:42.960><c> have</c><00:43:43.040><c> an</c><00:43:43.200><c> employee</c><00:43:43.599><c> object</c><00:43:44.240><c> then</c>

00:43:44.470 --> 00:43:44.480 align:start position:0%
so once we have an employee object then
 

00:43:44.480 --> 00:43:46.710 align:start position:0%
so once we have an employee object then
later<00:43:45.200><c> we</c><00:43:45.359><c> can</c><00:43:45.520><c> give</c><00:43:45.680><c> it</c><00:43:45.839><c> a</c><00:43:45.920><c> new</c><00:43:46.079><c> property</c><00:43:46.480><c> like</c>

00:43:46.710 --> 00:43:46.720 align:start position:0%
later we can give it a new property like
 

00:43:46.720 --> 00:43:48.950 align:start position:0%
later we can give it a new property like
name<00:43:47.359><c> and</c><00:43:47.599><c> this</c><00:43:47.839><c> is</c><00:43:48.000><c> totally</c><00:43:48.480><c> valid</c><00:43:48.800><c> in</c>

00:43:48.950 --> 00:43:48.960 align:start position:0%
name and this is totally valid in
 

00:43:48.960 --> 00:43:51.270 align:start position:0%
name and this is totally valid in
javascript<00:43:49.920><c> but</c><00:43:50.160><c> as</c><00:43:50.319><c> you</c><00:43:50.400><c> can</c><00:43:50.560><c> see</c><00:43:50.960><c> this</c><00:43:51.200><c> is</c>

00:43:51.270 --> 00:43:51.280 align:start position:0%
javascript but as you can see this is
 

00:43:51.280 --> 00:43:53.589 align:start position:0%
javascript but as you can see this is
not<00:43:51.520><c> valid</c><00:43:51.839><c> in</c><00:43:51.920><c> typescript</c><00:43:52.800><c> the</c><00:43:52.960><c> compiler</c><00:43:53.440><c> is</c>

00:43:53.589 --> 00:43:53.599 align:start position:0%
not valid in typescript the compiler is
 

00:43:53.599 --> 00:43:55.990 align:start position:0%
not valid in typescript the compiler is
saying<00:43:54.079><c> property</c><00:43:54.560><c> name</c><00:43:55.119><c> does</c><00:43:55.359><c> not</c><00:43:55.599><c> exist</c><00:43:55.920><c> on</c>

00:43:55.990 --> 00:43:56.000 align:start position:0%
saying property name does not exist on
 

00:43:56.000 --> 00:43:58.790 align:start position:0%
saying property name does not exist on
this<00:43:56.240><c> type</c><00:43:56.880><c> so</c><00:43:57.040><c> this</c><00:43:57.280><c> type</c><00:43:57.680><c> is</c><00:43:57.920><c> an</c><00:43:58.079><c> object</c><00:43:58.560><c> with</c>

00:43:58.790 --> 00:43:58.800 align:start position:0%
this type so this type is an object with
 

00:43:58.800 --> 00:44:01.030 align:start position:0%
this type so this type is an object with
an<00:43:58.960><c> id</c><00:43:59.280><c> property</c><00:43:59.680><c> which</c><00:43:59.839><c> is</c><00:44:00.000><c> a</c><00:44:00.079><c> number</c>

00:44:01.030 --> 00:44:01.040 align:start position:0%
an id property which is a number
 

00:44:01.040 --> 00:44:02.710 align:start position:0%
an id property which is a number
so<00:44:01.280><c> just</c><00:44:01.520><c> like</c><00:44:01.760><c> all</c><00:44:01.920><c> the</c><00:44:02.079><c> variables</c><00:44:02.480><c> we</c><00:44:02.640><c> have</c>

00:44:02.710 --> 00:44:02.720 align:start position:0%
so just like all the variables we have
 

00:44:02.720 --> 00:44:05.349 align:start position:0%
so just like all the variables we have
declared<00:44:03.200><c> so</c><00:44:03.359><c> far</c><00:44:04.000><c> the</c><00:44:04.240><c> typescript</c><00:44:04.720><c> compiler</c>

00:44:05.349 --> 00:44:05.359 align:start position:0%
declared so far the typescript compiler
 

00:44:05.359 --> 00:44:07.670 align:start position:0%
declared so far the typescript compiler
has<00:44:05.680><c> inferred</c><00:44:06.319><c> the</c><00:44:06.560><c> shape</c><00:44:06.880><c> of</c><00:44:07.040><c> this</c><00:44:07.280><c> employee</c>

00:44:07.670 --> 00:44:07.680 align:start position:0%
has inferred the shape of this employee
 

00:44:07.680 --> 00:44:08.630 align:start position:0%
has inferred the shape of this employee
object

00:44:08.630 --> 00:44:08.640 align:start position:0%
object
 

00:44:08.640 --> 00:44:11.589 align:start position:0%
object
so<00:44:08.880><c> if</c><00:44:08.960><c> you</c><00:44:09.040><c> hover</c><00:44:09.359><c> our</c><00:44:09.520><c> mouse</c><00:44:09.839><c> over</c><00:44:10.560><c> employee</c>

00:44:11.589 --> 00:44:11.599 align:start position:0%
so if you hover our mouse over employee
 

00:44:11.599 --> 00:44:13.910 align:start position:0%
so if you hover our mouse over employee
we<00:44:11.760><c> can</c><00:44:11.920><c> see</c><00:44:12.079><c> its</c><00:44:12.240><c> shape</c><00:44:12.720><c> it's</c><00:44:12.960><c> an</c><00:44:13.119><c> object</c><00:44:13.680><c> with</c>

00:44:13.910 --> 00:44:13.920 align:start position:0%
we can see its shape it's an object with
 

00:44:13.920 --> 00:44:15.990 align:start position:0%
we can see its shape it's an object with
an<00:44:14.079><c> id</c><00:44:14.640><c> that</c><00:44:14.800><c> is</c><00:44:14.960><c> a</c><00:44:15.040><c> number</c>

00:44:15.990 --> 00:44:16.000 align:start position:0%
an id that is a number
 

00:44:16.000 --> 00:44:17.829 align:start position:0%
an id that is a number
now<00:44:16.319><c> just</c><00:44:16.560><c> like</c><00:44:16.880><c> all</c><00:44:17.040><c> the</c><00:44:17.200><c> variables</c><00:44:17.599><c> we</c><00:44:17.760><c> have</c>

00:44:17.829 --> 00:44:17.839 align:start position:0%
now just like all the variables we have
 

00:44:17.839 --> 00:44:20.710 align:start position:0%
now just like all the variables we have
declared<00:44:18.240><c> so</c><00:44:18.400><c> far</c><00:44:19.040><c> we</c><00:44:19.200><c> can</c><00:44:19.520><c> explicitly</c><00:44:20.319><c> apply</c>

00:44:20.710 --> 00:44:20.720 align:start position:0%
declared so far we can explicitly apply
 

00:44:20.720 --> 00:44:22.550 align:start position:0%
declared so far we can explicitly apply
a<00:44:20.880><c> type</c><00:44:21.200><c> annotation</c><00:44:21.680><c> here</c>

00:44:22.550 --> 00:44:22.560 align:start position:0%
a type annotation here
 

00:44:22.560 --> 00:44:24.470 align:start position:0%
a type annotation here
so<00:44:22.800><c> after</c><00:44:23.200><c> employee</c>

00:44:24.470 --> 00:44:24.480 align:start position:0%
so after employee
 

00:44:24.480 --> 00:44:28.069 align:start position:0%
so after employee
we<00:44:24.720><c> add</c><00:44:25.119><c> a</c><00:44:25.359><c> colon</c><00:44:26.160><c> followed</c><00:44:26.480><c> by</c><00:44:26.720><c> braces</c><00:44:27.760><c> and</c>

00:44:28.069 --> 00:44:28.079 align:start position:0%
we add a colon followed by braces and
 

00:44:28.079 --> 00:44:30.069 align:start position:0%
we add a colon followed by braces and
inside<00:44:28.400><c> the</c><00:44:28.560><c> braces</c><00:44:28.960><c> we</c><00:44:29.119><c> define</c><00:44:29.839><c> the</c>

00:44:30.069 --> 00:44:30.079 align:start position:0%
inside the braces we define the
 

00:44:30.079 --> 00:44:32.550 align:start position:0%
inside the braces we define the
properties<00:44:30.800><c> of</c><00:44:30.960><c> an</c><00:44:31.119><c> employee</c><00:44:31.520><c> object</c><00:44:32.319><c> so</c>

00:44:32.550 --> 00:44:32.560 align:start position:0%
properties of an employee object so
 

00:44:32.560 --> 00:44:34.230 align:start position:0%
properties of an employee object so
every<00:44:32.800><c> employee</c><00:44:33.040><c> should</c><00:44:33.280><c> have</c><00:44:33.359><c> an</c><00:44:33.520><c> id</c><00:44:33.920><c> that</c><00:44:34.079><c> is</c>

00:44:34.230 --> 00:44:34.240 align:start position:0%
every employee should have an id that is
 

00:44:34.240 --> 00:44:35.270 align:start position:0%
every employee should have an id that is
a<00:44:34.319><c> number</c>

00:44:35.270 --> 00:44:35.280 align:start position:0%
a number
 

00:44:35.280 --> 00:44:37.829 align:start position:0%
a number
and<00:44:35.440><c> a</c><00:44:35.520><c> name</c><00:44:36.079><c> that</c><00:44:36.319><c> is</c><00:44:36.400><c> a</c><00:44:36.560><c> string</c>

00:44:37.829 --> 00:44:37.839 align:start position:0%
and a name that is a string
 

00:44:37.839 --> 00:44:39.430 align:start position:0%
and a name that is a string
now<00:44:38.079><c> the</c><00:44:38.160><c> previous</c><00:44:38.560><c> error</c><00:44:38.800><c> on</c><00:44:38.880><c> this</c><00:44:39.040><c> line</c><00:44:39.280><c> is</c>

00:44:39.430 --> 00:44:39.440 align:start position:0%
now the previous error on this line is
 

00:44:39.440 --> 00:44:40.309 align:start position:0%
now the previous error on this line is
gone

00:44:40.309 --> 00:44:40.319 align:start position:0%
gone
 

00:44:40.319 --> 00:44:41.990 align:start position:0%
gone
but<00:44:40.480><c> we</c><00:44:40.640><c> have</c><00:44:40.720><c> a</c><00:44:40.800><c> new</c><00:44:40.960><c> kind</c><00:44:41.119><c> of</c><00:44:41.280><c> error</c><00:44:41.760><c> let's</c>

00:44:41.990 --> 00:44:42.000 align:start position:0%
but we have a new kind of error let's
 

00:44:42.000 --> 00:44:43.109 align:start position:0%
but we have a new kind of error let's
find<00:44:42.240><c> out</c>

00:44:43.109 --> 00:44:43.119 align:start position:0%
find out
 

00:44:43.119 --> 00:44:45.030 align:start position:0%
find out
the<00:44:43.280><c> compiler</c><00:44:43.760><c> is</c><00:44:43.839><c> saying</c><00:44:44.160><c> property</c><00:44:44.560><c> name</c><00:44:44.800><c> is</c>

00:44:45.030 --> 00:44:45.040 align:start position:0%
the compiler is saying property name is
 

00:44:45.040 --> 00:44:46.950 align:start position:0%
the compiler is saying property name is
missing<00:44:45.760><c> so</c><00:44:45.920><c> the</c><00:44:46.000><c> reason</c><00:44:46.319><c> we're</c><00:44:46.480><c> seeing</c><00:44:46.720><c> this</c>

00:44:46.950 --> 00:44:46.960 align:start position:0%
missing so the reason we're seeing this
 

00:44:46.960 --> 00:44:49.270 align:start position:0%
missing so the reason we're seeing this
is<00:44:47.119><c> because</c><00:44:47.920><c> every</c><00:44:48.160><c> employee</c><00:44:48.560><c> should</c><00:44:48.800><c> have</c>

00:44:49.270 --> 00:44:49.280 align:start position:0%
is because every employee should have
 

00:44:49.280 --> 00:44:51.190 align:start position:0%
is because every employee should have
these<00:44:49.440><c> two</c><00:44:49.680><c> properties</c><00:44:50.720><c> but</c><00:44:50.880><c> while</c>

00:44:51.190 --> 00:44:51.200 align:start position:0%
these two properties but while
 

00:44:51.200 --> 00:44:53.190 align:start position:0%
these two properties but while
initializing<00:44:51.920><c> this</c><00:44:52.160><c> object</c><00:44:52.800><c> we</c><00:44:52.960><c> haven't</c>

00:44:53.190 --> 00:44:53.200 align:start position:0%
initializing this object we haven't
 

00:44:53.200 --> 00:44:55.750 align:start position:0%
initializing this object we haven't
supplied<00:44:53.839><c> the</c><00:44:54.000><c> name</c><00:44:54.240><c> property</c><00:44:55.280><c> now</c><00:44:55.440><c> here</c><00:44:55.599><c> we</c>

00:44:55.750 --> 00:44:55.760 align:start position:0%
supplied the name property now here we
 

00:44:55.760 --> 00:44:58.550 align:start position:0%
supplied the name property now here we
have<00:44:55.839><c> two</c><00:44:56.079><c> options</c><00:44:56.880><c> one</c><00:44:57.200><c> option</c>

00:44:58.550 --> 00:44:58.560 align:start position:0%
have two options one option
 

00:44:58.560 --> 00:45:01.270 align:start position:0%
have two options one option
is<00:44:58.720><c> to</c><00:44:58.880><c> set</c><00:44:59.119><c> the</c><00:44:59.200><c> name</c><00:44:59.839><c> to</c><00:45:00.000><c> an</c><00:45:00.160><c> empty</c><00:45:00.480><c> string</c><00:45:01.119><c> we</c>

00:45:01.270 --> 00:45:01.280 align:start position:0%
is to set the name to an empty string we
 

00:45:01.280 --> 00:45:03.670 align:start position:0%
is to set the name to an empty string we
cannot<00:45:01.520><c> set</c><00:45:01.680><c> it</c><00:45:01.760><c> to</c><00:45:02.000><c> null</c><00:45:02.319><c> or</c><00:45:02.880><c> undefined</c><00:45:03.520><c> we'll</c>

00:45:03.670 --> 00:45:03.680 align:start position:0%
cannot set it to null or undefined we'll
 

00:45:03.680 --> 00:45:06.069 align:start position:0%
cannot set it to null or undefined we'll
talk<00:45:03.920><c> about</c><00:45:04.160><c> this</c><00:45:04.480><c> in</c><00:45:04.640><c> the</c><00:45:04.720><c> next</c><00:45:04.960><c> section</c><00:45:05.839><c> so</c>

00:45:06.069 --> 00:45:06.079 align:start position:0%
talk about this in the next section so
 

00:45:06.079 --> 00:45:07.670 align:start position:0%
talk about this in the next section so
we<00:45:06.160><c> should</c><00:45:06.319><c> either</c><00:45:06.560><c> set</c><00:45:06.800><c> it</c><00:45:07.040><c> to</c><00:45:07.200><c> an</c><00:45:07.359><c> empty</c>

00:45:07.670 --> 00:45:07.680 align:start position:0%
we should either set it to an empty
 

00:45:07.680 --> 00:45:08.630 align:start position:0%
we should either set it to an empty
string

00:45:08.630 --> 00:45:08.640 align:start position:0%
string
 

00:45:08.640 --> 00:45:11.270 align:start position:0%
string
or<00:45:09.119><c> we</c><00:45:09.280><c> can</c><00:45:09.440><c> make</c><00:45:09.599><c> this</c><00:45:09.839><c> property</c>

00:45:11.270 --> 00:45:11.280 align:start position:0%
or we can make this property
 

00:45:11.280 --> 00:45:13.190 align:start position:0%
or we can make this property
optional<00:45:12.240><c> and</c><00:45:12.400><c> then</c><00:45:12.640><c> we</c><00:45:12.800><c> don't</c><00:45:12.960><c> have</c><00:45:13.040><c> to</c>

00:45:13.190 --> 00:45:13.200 align:start position:0%
optional and then we don't have to
 

00:45:13.200 --> 00:45:15.910 align:start position:0%
optional and then we don't have to
supply<00:45:14.160><c> the</c><00:45:14.319><c> name</c><00:45:14.640><c> property</c><00:45:15.599><c> while</c>

00:45:15.910 --> 00:45:15.920 align:start position:0%
supply the name property while
 

00:45:15.920 --> 00:45:19.270 align:start position:0%
supply the name property while
initializing<00:45:16.800><c> an</c><00:45:17.040><c> employee</c><00:45:18.240><c> now</c><00:45:18.880><c> even</c><00:45:19.119><c> though</c>

00:45:19.270 --> 00:45:19.280 align:start position:0%
initializing an employee now even though
 

00:45:19.280 --> 00:45:20.710 align:start position:0%
initializing an employee now even though
typescript<00:45:19.760><c> allows</c><00:45:20.079><c> us</c><00:45:20.160><c> to</c><00:45:20.240><c> do</c><00:45:20.400><c> something</c>

00:45:20.710 --> 00:45:20.720 align:start position:0%
typescript allows us to do something
 

00:45:20.720 --> 00:45:22.550 align:start position:0%
typescript allows us to do something
like<00:45:20.880><c> this</c><00:45:21.520><c> this</c><00:45:21.760><c> is</c><00:45:21.839><c> something</c><00:45:22.160><c> we</c><00:45:22.319><c> should</c>

00:45:22.550 --> 00:45:22.560 align:start position:0%
like this this is something we should
 

00:45:22.560 --> 00:45:24.950 align:start position:0%
like this this is something we should
avoid<00:45:22.960><c> because</c><00:45:23.359><c> conceptually</c><00:45:24.480><c> it</c><00:45:24.640><c> doesn't</c>

00:45:24.950 --> 00:45:24.960 align:start position:0%
avoid because conceptually it doesn't
 

00:45:24.960 --> 00:45:27.510 align:start position:0%
avoid because conceptually it doesn't
make<00:45:25.200><c> sense</c><00:45:25.839><c> to</c><00:45:26.000><c> have</c><00:45:26.160><c> an</c><00:45:26.319><c> employee</c><00:45:26.960><c> without</c><00:45:27.440><c> a</c>

00:45:27.510 --> 00:45:27.520 align:start position:0%
make sense to have an employee without a
 

00:45:27.520 --> 00:45:29.829 align:start position:0%
make sense to have an employee without a
name<00:45:28.079><c> every</c><00:45:28.480><c> employee</c><00:45:28.800><c> should</c><00:45:28.960><c> have</c><00:45:29.040><c> a</c><00:45:29.119><c> name</c>

00:45:29.829 --> 00:45:29.839 align:start position:0%
name every employee should have a name
 

00:45:29.839 --> 00:45:31.430 align:start position:0%
name every employee should have a name
it<00:45:30.000><c> would</c><00:45:30.160><c> make</c><00:45:30.319><c> sense</c><00:45:30.560><c> to</c><00:45:30.720><c> make</c><00:45:30.880><c> the</c><00:45:31.119><c> fax</c>

00:45:31.430 --> 00:45:31.440 align:start position:0%
it would make sense to make the fax
 

00:45:31.440 --> 00:45:33.589 align:start position:0%
it would make sense to make the fax
property<00:45:31.920><c> optional</c><00:45:32.560><c> because</c><00:45:32.880><c> not</c><00:45:33.200><c> everyone</c>

00:45:33.589 --> 00:45:33.599 align:start position:0%
property optional because not everyone
 

00:45:33.599 --> 00:45:36.309 align:start position:0%
property optional because not everyone
has<00:45:33.760><c> a</c><00:45:33.839><c> fax</c><00:45:34.160><c> machine</c><00:45:34.560><c> right</c><00:45:35.280><c> so</c><00:45:35.839><c> always</c><00:45:36.160><c> make</c>

00:45:36.309 --> 00:45:36.319 align:start position:0%
has a fax machine right so always make
 

00:45:36.319 --> 00:45:38.390 align:start position:0%
has a fax machine right so always make
sure<00:45:36.640><c> the</c><00:45:36.800><c> code</c><00:45:37.040><c> you</c><00:45:37.200><c> write</c><00:45:37.680><c> conceptually</c>

00:45:38.390 --> 00:45:38.400 align:start position:0%
sure the code you write conceptually
 

00:45:38.400 --> 00:45:40.710 align:start position:0%
sure the code you write conceptually
makes<00:45:38.720><c> sense</c><00:45:39.359><c> don't</c><00:45:39.599><c> blindly</c><00:45:40.079><c> use</c><00:45:40.319><c> features</c>

00:45:40.710 --> 00:45:40.720 align:start position:0%
makes sense don't blindly use features
 

00:45:40.720 --> 00:45:42.550 align:start position:0%
makes sense don't blindly use features
of<00:45:40.800><c> typescript</c><00:45:41.520><c> or</c><00:45:41.680><c> any</c><00:45:41.920><c> other</c><00:45:42.160><c> programming</c>

00:45:42.550 --> 00:45:42.560 align:start position:0%
of typescript or any other programming
 

00:45:42.560 --> 00:45:44.950 align:start position:0%
of typescript or any other programming
languages<00:45:43.119><c> okay</c><00:45:43.839><c> so</c><00:45:44.079><c> in</c><00:45:44.160><c> this</c><00:45:44.319><c> case</c><00:45:44.480><c> we're</c><00:45:44.720><c> not</c>

00:45:44.950 --> 00:45:44.960 align:start position:0%
languages okay so in this case we're not
 

00:45:44.960 --> 00:45:47.109 align:start position:0%
languages okay so in this case we're not
going<00:45:45.040><c> to</c><00:45:45.119><c> use</c><00:45:45.760><c> an</c><00:45:45.920><c> optional</c><00:45:46.400><c> property</c><00:45:46.960><c> and</c>

00:45:47.109 --> 00:45:47.119 align:start position:0%
going to use an optional property and
 

00:45:47.119 --> 00:45:49.670 align:start position:0%
going to use an optional property and
that<00:45:47.359><c> means</c><00:45:48.000><c> we</c><00:45:48.160><c> should</c><00:45:48.400><c> either</c><00:45:48.640><c> set</c><00:45:48.880><c> the</c><00:45:48.960><c> name</c>

00:45:49.670 --> 00:45:49.680 align:start position:0%
that means we should either set the name
 

00:45:49.680 --> 00:45:52.230 align:start position:0%
that means we should either set the name
to<00:45:49.839><c> an</c><00:45:50.000><c> empty</c><00:45:50.400><c> string</c><00:45:50.720><c> or</c><00:45:51.200><c> initialize</c><00:45:51.920><c> it</c>

00:45:52.230 --> 00:45:52.240 align:start position:0%
to an empty string or initialize it
 

00:45:52.240 --> 00:45:54.630 align:start position:0%
to an empty string or initialize it
right<00:45:52.480><c> here</c><00:45:53.200><c> okay</c><00:45:53.839><c> now</c><00:45:54.000><c> we</c><00:45:54.160><c> have</c><00:45:54.240><c> an</c><00:45:54.400><c> error</c>

00:45:54.630 --> 00:45:54.640 align:start position:0%
right here okay now we have an error
 

00:45:54.640 --> 00:45:57.829 align:start position:0%
right here okay now we have an error
because<00:45:55.040><c> i</c><00:45:55.280><c> used</c><00:45:55.760><c> a</c><00:45:56.000><c> period</c><00:45:56.720><c> okay</c>

00:45:57.829 --> 00:45:57.839 align:start position:0%
because i used a period okay
 

00:45:57.839 --> 00:45:59.510 align:start position:0%
because i used a period okay
so<00:45:58.319><c> now</c><00:45:58.560><c> we</c><00:45:58.640><c> don't</c><00:45:58.800><c> need</c><00:45:58.960><c> this</c><00:45:59.119><c> last</c><00:45:59.280><c> line</c>

00:45:59.510 --> 00:45:59.520 align:start position:0%
so now we don't need this last line
 

00:45:59.520 --> 00:46:00.550 align:start position:0%
so now we don't need this last line
anymore

00:46:00.550 --> 00:46:00.560 align:start position:0%
anymore
 

00:46:00.560 --> 00:46:01.510 align:start position:0%
anymore
okay

00:46:01.510 --> 00:46:01.520 align:start position:0%
okay
 

00:46:01.520 --> 00:46:03.349 align:start position:0%
okay
now<00:46:02.000><c> sometimes</c><00:46:02.400><c> we</c><00:46:02.480><c> want</c><00:46:02.640><c> to</c><00:46:02.720><c> make</c><00:46:02.880><c> certain</c>

00:46:03.349 --> 00:46:03.359 align:start position:0%
now sometimes we want to make certain
 

00:46:03.359 --> 00:46:05.589 align:start position:0%
now sometimes we want to make certain
properties<00:46:03.839><c> read</c><00:46:04.079><c> only</c><00:46:04.800><c> so</c><00:46:05.200><c> we</c><00:46:05.359><c> don't</c>

00:46:05.589 --> 00:46:05.599 align:start position:0%
properties read only so we don't
 

00:46:05.599 --> 00:46:07.670 align:start position:0%
properties read only so we don't
accidentally<00:46:06.240><c> change</c><00:46:06.480><c> them</c><00:46:06.640><c> later</c><00:46:06.960><c> on</c><00:46:07.520><c> so</c>

00:46:07.670 --> 00:46:07.680 align:start position:0%
accidentally change them later on so
 

00:46:07.680 --> 00:46:09.829 align:start position:0%
accidentally change them later on so
with<00:46:07.839><c> our</c><00:46:08.000><c> current</c><00:46:08.240><c> implementation</c><00:46:09.440><c> we</c><00:46:09.599><c> can</c>

00:46:09.829 --> 00:46:09.839 align:start position:0%
with our current implementation we can
 

00:46:09.839 --> 00:46:12.309 align:start position:0%
with our current implementation we can
change<00:46:10.560><c> the</c><00:46:10.720><c> idea</c><00:46:11.040><c> of</c><00:46:11.119><c> an</c><00:46:11.280><c> employee</c><00:46:11.599><c> anytime</c>

00:46:12.309 --> 00:46:12.319 align:start position:0%
change the idea of an employee anytime
 

00:46:12.319 --> 00:46:14.390 align:start position:0%
change the idea of an employee anytime
and<00:46:12.400><c> this</c><00:46:12.640><c> is</c><00:46:12.720><c> not</c><00:46:12.880><c> valid</c><00:46:13.680><c> this</c><00:46:13.920><c> is</c><00:46:14.000><c> where</c><00:46:14.240><c> we</c>

00:46:14.390 --> 00:46:14.400 align:start position:0%
and this is not valid this is where we
 

00:46:14.400 --> 00:46:17.910 align:start position:0%
and this is not valid this is where we
use<00:46:14.960><c> the</c><00:46:15.200><c> read-only</c><00:46:15.839><c> modifier</c><00:46:16.560><c> so</c><00:46:16.720><c> we</c><00:46:16.960><c> applied</c>

00:46:17.910 --> 00:46:17.920 align:start position:0%
use the read-only modifier so we applied
 

00:46:17.920 --> 00:46:20.550 align:start position:0%
use the read-only modifier so we applied
before<00:46:18.240><c> the</c><00:46:18.400><c> name</c><00:46:18.560><c> of</c><00:46:18.640><c> the</c><00:46:18.800><c> property</c><00:46:19.280><c> and</c><00:46:19.440><c> now</c>

00:46:20.550 --> 00:46:20.560 align:start position:0%
before the name of the property and now
 

00:46:20.560 --> 00:46:22.870 align:start position:0%
before the name of the property and now
the<00:46:20.720><c> typescript</c><00:46:21.200><c> compiler</c><00:46:22.079><c> prevents</c><00:46:22.480><c> us</c><00:46:22.640><c> from</c>

00:46:22.870 --> 00:46:22.880 align:start position:0%
the typescript compiler prevents us from
 

00:46:22.880 --> 00:46:24.790 align:start position:0%
the typescript compiler prevents us from
accidentally<00:46:23.599><c> modifying</c><00:46:24.160><c> the</c><00:46:24.240><c> value</c><00:46:24.480><c> of</c><00:46:24.560><c> this</c>

00:46:24.790 --> 00:46:24.800 align:start position:0%
accidentally modifying the value of this
 

00:46:24.800 --> 00:46:26.630 align:start position:0%
accidentally modifying the value of this
property<00:46:25.200><c> okay</c>

00:46:26.630 --> 00:46:26.640 align:start position:0%
property okay
 

00:46:26.640 --> 00:46:29.510 align:start position:0%
property okay
good<00:46:27.200><c> now</c><00:46:27.680><c> how</c><00:46:27.839><c> can</c><00:46:28.000><c> we</c><00:46:28.160><c> define</c><00:46:28.560><c> a</c><00:46:28.800><c> function</c><00:46:29.359><c> or</c>

00:46:29.510 --> 00:46:29.520 align:start position:0%
good now how can we define a function or
 

00:46:29.520 --> 00:46:31.910 align:start position:0%
good now how can we define a function or
more<00:46:29.839><c> accurately</c><00:46:30.319><c> a</c><00:46:30.480><c> method</c><00:46:30.800><c> in</c><00:46:30.960><c> this</c><00:46:31.119><c> object</c>

00:46:31.910 --> 00:46:31.920 align:start position:0%
more accurately a method in this object
 

00:46:31.920 --> 00:46:33.670 align:start position:0%
more accurately a method in this object
let's<00:46:32.160><c> say</c><00:46:32.400><c> every</c><00:46:32.640><c> employee</c><00:46:32.960><c> object</c><00:46:33.440><c> should</c>

00:46:33.670 --> 00:46:33.680 align:start position:0%
let's say every employee object should
 

00:46:33.680 --> 00:46:35.750 align:start position:0%
let's say every employee object should
have<00:46:33.839><c> a</c><00:46:33.920><c> retirement</c><00:46:34.400><c> method</c><00:46:35.040><c> so</c>

00:46:35.750 --> 00:46:35.760 align:start position:0%
have a retirement method so
 

00:46:35.760 --> 00:46:38.230 align:start position:0%
have a retirement method so
in<00:46:35.920><c> our</c><00:46:36.000><c> type</c><00:46:36.319><c> annotation</c><00:46:37.119><c> we</c><00:46:37.280><c> need</c><00:46:37.440><c> to</c><00:46:37.520><c> define</c>

00:46:38.230 --> 00:46:38.240 align:start position:0%
in our type annotation we need to define
 

00:46:38.240 --> 00:46:40.309 align:start position:0%
in our type annotation we need to define
the<00:46:38.480><c> signature</c><00:46:39.040><c> of</c><00:46:39.119><c> this</c><00:46:39.280><c> method</c><00:46:39.839><c> we</c><00:46:40.000><c> need</c><00:46:40.160><c> to</c>

00:46:40.309 --> 00:46:40.319 align:start position:0%
the signature of this method we need to
 

00:46:40.319 --> 00:46:42.230 align:start position:0%
the signature of this method we need to
specify<00:46:41.040><c> how</c><00:46:41.200><c> many</c><00:46:41.440><c> parameters</c><00:46:42.000><c> it's</c><00:46:42.160><c> going</c>

00:46:42.230 --> 00:46:42.240 align:start position:0%
specify how many parameters it's going
 

00:46:42.240 --> 00:46:43.910 align:start position:0%
specify how many parameters it's going
to<00:46:42.400><c> have</c><00:46:42.960><c> what</c><00:46:43.119><c> is</c><00:46:43.280><c> the</c><00:46:43.359><c> type</c><00:46:43.599><c> of</c><00:46:43.760><c> each</c>

00:46:43.910 --> 00:46:43.920 align:start position:0%
to have what is the type of each
 

00:46:43.920 --> 00:46:45.510 align:start position:0%
to have what is the type of each
parameter<00:46:44.560><c> and</c><00:46:44.720><c> what</c><00:46:44.880><c> is</c><00:46:45.040><c> the</c><00:46:45.119><c> type</c><00:46:45.359><c> of</c><00:46:45.440><c> the</c>

00:46:45.510 --> 00:46:45.520 align:start position:0%
parameter and what is the type of the
 

00:46:45.520 --> 00:46:46.790 align:start position:0%
parameter and what is the type of the
return<00:46:45.920><c> value</c>

00:46:46.790 --> 00:46:46.800 align:start position:0%
return value
 

00:46:46.800 --> 00:46:48.790 align:start position:0%
return value
so<00:46:46.960><c> we're</c><00:46:47.119><c> going</c><00:46:47.200><c> to</c><00:46:47.280><c> have</c><00:46:47.520><c> a</c><00:46:47.680><c> retire</c><00:46:48.079><c> method</c>

00:46:48.790 --> 00:46:48.800 align:start position:0%
so we're going to have a retire method
 

00:46:48.800 --> 00:46:51.270 align:start position:0%
so we're going to have a retire method
with<00:46:49.119><c> one</c><00:46:49.280><c> parameter</c><00:46:49.760><c> that</c><00:46:49.920><c> is</c><00:46:50.079><c> date</c><00:46:50.880><c> now</c><00:46:51.119><c> here</c>

00:46:51.270 --> 00:46:51.280 align:start position:0%
with one parameter that is date now here
 

00:46:51.280 --> 00:46:53.349 align:start position:0%
with one parameter that is date now here
we<00:46:51.359><c> use</c><00:46:51.520><c> the</c><00:46:51.680><c> arrow</c><00:46:51.920><c> function</c><00:46:52.319><c> syntax</c><00:46:53.200><c> so</c>

00:46:53.349 --> 00:46:53.359 align:start position:0%
we use the arrow function syntax so
 

00:46:53.359 --> 00:46:55.510 align:start position:0%
we use the arrow function syntax so
first<00:46:53.599><c> we</c><00:46:53.760><c> add</c><00:46:53.920><c> parenthesis</c><00:46:54.880><c> and</c><00:46:55.119><c> inside</c>

00:46:55.510 --> 00:46:55.520 align:start position:0%
first we add parenthesis and inside
 

00:46:55.520 --> 00:46:57.990 align:start position:0%
first we add parenthesis and inside
parenthesis<00:46:56.079><c> we</c><00:46:56.319><c> specify</c><00:46:56.720><c> the</c><00:46:56.880><c> parameters</c><00:46:57.839><c> so</c>

00:46:57.990 --> 00:46:58.000 align:start position:0%
parenthesis we specify the parameters so
 

00:46:58.000 --> 00:47:00.069 align:start position:0%
parenthesis we specify the parameters so
we're<00:46:58.160><c> going</c><00:46:58.240><c> to</c><00:46:58.319><c> have</c><00:46:58.800><c> a</c><00:46:58.960><c> date</c><00:46:59.200><c> parameter</c><00:46:59.839><c> of</c>

00:47:00.069 --> 00:47:00.079 align:start position:0%
we're going to have a date parameter of
 

00:47:00.079 --> 00:47:01.270 align:start position:0%
we're going to have a date parameter of
type<00:47:00.400><c> date</c>

00:47:01.270 --> 00:47:01.280 align:start position:0%
type date
 

00:47:01.280 --> 00:47:03.589 align:start position:0%
type date
this<00:47:01.520><c> is</c><00:47:01.599><c> just</c><00:47:01.760><c> a</c><00:47:01.920><c> built-in</c><00:47:02.640><c> data</c><00:47:02.960><c> object</c><00:47:03.359><c> in</c>

00:47:03.589 --> 00:47:03.599 align:start position:0%
this is just a built-in data object in
 

00:47:03.599 --> 00:47:06.069 align:start position:0%
this is just a built-in data object in
javascript<00:47:04.240><c> and</c><00:47:04.400><c> typescript</c><00:47:05.359><c> so</c><00:47:05.680><c> we</c><00:47:05.839><c> only</c>

00:47:06.069 --> 00:47:06.079 align:start position:0%
javascript and typescript so we only
 

00:47:06.079 --> 00:47:08.390 align:start position:0%
javascript and typescript so we only
have<00:47:06.319><c> one</c><00:47:06.560><c> parameter</c><00:47:07.359><c> then</c><00:47:07.599><c> we</c><00:47:07.760><c> use</c><00:47:07.920><c> a</c><00:47:08.079><c> fat</c>

00:47:08.390 --> 00:47:08.400 align:start position:0%
have one parameter then we use a fat
 

00:47:08.400 --> 00:47:11.030 align:start position:0%
have one parameter then we use a fat
arrow<00:47:09.200><c> and</c><00:47:09.440><c> here</c><00:47:09.599><c> we</c><00:47:09.760><c> specify</c><00:47:10.480><c> the</c><00:47:10.720><c> type</c><00:47:10.960><c> of</c>

00:47:11.030 --> 00:47:11.040 align:start position:0%
arrow and here we specify the type of
 

00:47:11.040 --> 00:47:12.790 align:start position:0%
arrow and here we specify the type of
the<00:47:11.200><c> return</c><00:47:11.520><c> value</c><00:47:12.160><c> we</c><00:47:12.240><c> don't</c><00:47:12.400><c> want</c><00:47:12.480><c> to</c><00:47:12.560><c> return</c>

00:47:12.790 --> 00:47:12.800 align:start position:0%
the return value we don't want to return
 

00:47:12.800 --> 00:47:15.670 align:start position:0%
the return value we don't want to return
any<00:47:13.040><c> value</c><00:47:13.359><c> so</c><00:47:13.599><c> we're</c><00:47:13.760><c> going</c><00:47:13.839><c> to</c><00:47:13.920><c> use</c><00:47:14.400><c> weight</c>

00:47:15.670 --> 00:47:15.680 align:start position:0%
any value so we're going to use weight
 

00:47:15.680 --> 00:47:18.630 align:start position:0%
any value so we're going to use weight
now<00:47:16.319><c> we</c><00:47:16.480><c> have</c><00:47:16.640><c> a</c><00:47:16.720><c> compilation</c><00:47:17.200><c> error</c>

00:47:18.630 --> 00:47:18.640 align:start position:0%
now we have a compilation error
 

00:47:18.640 --> 00:47:20.950 align:start position:0%
now we have a compilation error
saying<00:47:18.960><c> property</c><00:47:19.440><c> retire</c><00:47:20.000><c> is</c><00:47:20.160><c> missing</c>

00:47:20.950 --> 00:47:20.960 align:start position:0%
saying property retire is missing
 

00:47:20.960 --> 00:47:23.349 align:start position:0%
saying property retire is missing
because<00:47:21.280><c> when</c><00:47:21.520><c> initializing</c><00:47:22.160><c> this</c><00:47:22.400><c> object</c><00:47:23.200><c> we</c>

00:47:23.349 --> 00:47:23.359 align:start position:0%
because when initializing this object we
 

00:47:23.359 --> 00:47:24.470 align:start position:0%
because when initializing this object we
haven't<00:47:23.599><c> supplied</c>

00:47:24.470 --> 00:47:24.480 align:start position:0%
haven't supplied
 

00:47:24.480 --> 00:47:26.950 align:start position:0%
haven't supplied
the<00:47:24.640><c> retired</c><00:47:25.040><c> method</c><00:47:25.839><c> so</c><00:47:26.160><c> let's</c><00:47:26.319><c> do</c><00:47:26.480><c> that</c><00:47:26.720><c> real</c>

00:47:26.950 --> 00:47:26.960 align:start position:0%
the retired method so let's do that real
 

00:47:26.960 --> 00:47:30.790 align:start position:0%
the retired method so let's do that real
quick

00:47:30.790 --> 00:47:30.800 align:start position:0%
 
 

00:47:30.800 --> 00:47:32.630 align:start position:0%
 
all<00:47:30.880><c> right</c><00:47:31.119><c> retirement</c><00:47:32.160><c> is</c><00:47:32.319><c> going</c><00:47:32.400><c> to</c><00:47:32.480><c> be</c><00:47:32.559><c> a</c>

00:47:32.630 --> 00:47:32.640 align:start position:0%
all right retirement is going to be a
 

00:47:32.640 --> 00:47:35.750 align:start position:0%
all right retirement is going to be a
method<00:47:33.520><c> with</c><00:47:33.760><c> one</c><00:47:33.920><c> parameter</c>

00:47:35.750 --> 00:47:35.760 align:start position:0%
method with one parameter
 

00:47:35.760 --> 00:47:36.710 align:start position:0%
method with one parameter
and

00:47:36.710 --> 00:47:36.720 align:start position:0%
and
 

00:47:36.720 --> 00:47:39.829 align:start position:0%
and
over<00:47:36.960><c> here</c><00:47:38.240><c> i</c><00:47:38.319><c> just</c><00:47:38.480><c> want</c><00:47:38.640><c> to</c><00:47:38.800><c> lock</c><00:47:39.040><c> the</c><00:47:39.200><c> date</c>

00:47:39.829 --> 00:47:39.839 align:start position:0%
over here i just want to lock the date
 

00:47:39.839 --> 00:47:42.309 align:start position:0%
over here i just want to lock the date
on<00:47:40.000><c> the</c><00:47:40.160><c> console</c><00:47:40.960><c> pretty</c><00:47:41.280><c> simple</c>

00:47:42.309 --> 00:47:42.319 align:start position:0%
on the console pretty simple
 

00:47:42.319 --> 00:47:44.470 align:start position:0%
on the console pretty simple
so<00:47:42.480><c> this</c><00:47:42.640><c> is</c><00:47:42.720><c> how</c><00:47:42.880><c> we</c><00:47:42.960><c> can</c><00:47:43.119><c> work</c><00:47:43.280><c> with</c><00:47:43.520><c> objects</c>

00:47:44.470 --> 00:47:44.480 align:start position:0%
so this is how we can work with objects
 

00:47:44.480 --> 00:47:46.390 align:start position:0%
so this is how we can work with objects
now<00:47:44.640><c> i</c><00:47:44.800><c> know</c><00:47:44.960><c> this</c><00:47:45.119><c> syntax</c><00:47:45.839><c> this</c><00:47:46.079><c> type</c>

00:47:46.390 --> 00:47:46.400 align:start position:0%
now i know this syntax this type
 

00:47:46.400 --> 00:47:48.309 align:start position:0%
now i know this syntax this type
annotation<00:47:46.960><c> is</c><00:47:47.119><c> a</c><00:47:47.200><c> little</c><00:47:47.359><c> bit</c><00:47:47.520><c> messy</c><00:47:48.160><c> it's</c>

00:47:48.309 --> 00:47:48.319 align:start position:0%
annotation is a little bit messy it's
 

00:47:48.319 --> 00:47:50.950 align:start position:0%
annotation is a little bit messy it's
making<00:47:48.640><c> our</c><00:47:48.720><c> code</c><00:47:48.960><c> a</c><00:47:49.040><c> bit</c><00:47:49.280><c> verbose</c><00:47:49.839><c> or</c><00:47:50.160><c> noisy</c>

00:47:50.950 --> 00:47:50.960 align:start position:0%
making our code a bit verbose or noisy
 

00:47:50.960 --> 00:47:52.630 align:start position:0%
making our code a bit verbose or noisy
so<00:47:51.119><c> in</c><00:47:51.200><c> the</c><00:47:51.280><c> next</c><00:47:51.520><c> section</c><00:47:52.000><c> i'll</c><00:47:52.240><c> show</c><00:47:52.400><c> you</c><00:47:52.480><c> a</c>

00:47:52.630 --> 00:47:52.640 align:start position:0%
so in the next section i'll show you a
 

00:47:52.640 --> 00:47:58.950 align:start position:0%
so in the next section i'll show you a
better<00:47:52.960><c> way</c><00:47:53.440><c> to</c><00:47:53.599><c> work</c><00:47:53.839><c> with</c><00:47:54.079><c> objects</c>

00:47:58.950 --> 00:47:58.960 align:start position:0%
 
 

00:47:58.960 --> 00:48:00.630 align:start position:0%
 
welcome<00:47:59.359><c> back</c><00:47:59.520><c> to</c><00:47:59.680><c> another</c><00:48:00.079><c> section</c><00:48:00.400><c> of</c><00:48:00.480><c> the</c>

00:48:00.630 --> 00:48:00.640 align:start position:0%
welcome back to another section of the
 

00:48:00.640 --> 00:48:02.630 align:start position:0%
welcome back to another section of the
ultimate<00:48:01.119><c> typescript</c><00:48:01.599><c> course</c><00:48:02.319><c> in</c><00:48:02.400><c> this</c>

00:48:02.630 --> 00:48:02.640 align:start position:0%
ultimate typescript course in this
 

00:48:02.640 --> 00:48:04.230 align:start position:0%
ultimate typescript course in this
section<00:48:03.200><c> we're</c><00:48:03.359><c> going</c><00:48:03.440><c> to</c><00:48:03.599><c> explore</c><00:48:04.079><c> more</c>

00:48:04.230 --> 00:48:04.240 align:start position:0%
section we're going to explore more
 

00:48:04.240 --> 00:48:06.470 align:start position:0%
section we're going to explore more
advanced<00:48:04.720><c> types</c><00:48:05.040><c> in</c><00:48:05.200><c> typescript</c>

00:48:06.470 --> 00:48:06.480 align:start position:0%
advanced types in typescript
 

00:48:06.480 --> 00:48:08.230 align:start position:0%
advanced types in typescript
so<00:48:06.640><c> you</c><00:48:06.800><c> will</c><00:48:06.880><c> learn</c><00:48:07.359><c> how</c><00:48:07.520><c> to</c><00:48:07.680><c> use</c><00:48:07.920><c> type</c>

00:48:08.230 --> 00:48:08.240 align:start position:0%
so you will learn how to use type
 

00:48:08.240 --> 00:48:10.710 align:start position:0%
so you will learn how to use type
aliases<00:48:08.960><c> to</c><00:48:09.119><c> reuse</c><00:48:09.520><c> types</c><00:48:09.839><c> and</c><00:48:10.000><c> simplify</c><00:48:10.559><c> your</c>

00:48:10.710 --> 00:48:10.720 align:start position:0%
aliases to reuse types and simplify your
 

00:48:10.720 --> 00:48:13.589 align:start position:0%
aliases to reuse types and simplify your
code<00:48:11.440><c> how</c><00:48:11.599><c> to</c><00:48:11.680><c> use</c><00:48:11.920><c> unions</c><00:48:12.480><c> and</c><00:48:12.800><c> intersections</c>

00:48:13.589 --> 00:48:13.599 align:start position:0%
code how to use unions and intersections
 

00:48:13.599 --> 00:48:16.390 align:start position:0%
code how to use unions and intersections
to<00:48:13.760><c> combine</c><00:48:14.160><c> types</c><00:48:14.800><c> how</c><00:48:15.040><c> to</c><00:48:15.280><c> narrow</c><00:48:15.599><c> types</c><00:48:16.240><c> how</c>

00:48:16.390 --> 00:48:16.400 align:start position:0%
to combine types how to narrow types how
 

00:48:16.400 --> 00:48:18.309 align:start position:0%
to combine types how to narrow types how
to<00:48:16.559><c> work</c><00:48:16.800><c> with</c><00:48:16.960><c> nullables</c><00:48:17.680><c> as</c><00:48:17.839><c> well</c><00:48:18.000><c> as</c><00:48:18.160><c> the</c>

00:48:18.309 --> 00:48:18.319 align:start position:0%
to work with nullables as well as the
 

00:48:18.319 --> 00:48:21.030 align:start position:0%
to work with nullables as well as the
unknown<00:48:18.880><c> and</c><00:48:19.040><c> never</c><00:48:19.359><c> types</c><00:48:20.000><c> so</c><00:48:20.400><c> let's</c><00:48:20.640><c> jump</c><00:48:20.880><c> in</c>

00:48:21.030 --> 00:48:21.040 align:start position:0%
unknown and never types so let's jump in
 

00:48:21.040 --> 00:48:22.210 align:start position:0%
unknown and never types so let's jump in
and<00:48:21.280><c> get</c><00:48:21.440><c> started</c>

00:48:22.210 --> 00:48:22.220 align:start position:0%
and get started
 

00:48:22.220 --> 00:48:31.990 align:start position:0%
and get started
[Music]

00:48:31.990 --> 00:48:32.000 align:start position:0%
 
 

00:48:32.000 --> 00:48:33.430 align:start position:0%
 
alright<00:48:32.240><c> so</c><00:48:32.400><c> this</c><00:48:32.559><c> is</c><00:48:32.640><c> the</c><00:48:32.800><c> employee</c><00:48:33.200><c> object</c>

00:48:33.430 --> 00:48:33.440 align:start position:0%
alright so this is the employee object
 

00:48:33.440 --> 00:48:34.950 align:start position:0%
alright so this is the employee object
that<00:48:33.680><c> we</c><00:48:33.839><c> created</c><00:48:34.319><c> at</c><00:48:34.480><c> the</c><00:48:34.559><c> end</c><00:48:34.720><c> of</c><00:48:34.800><c> the</c>

00:48:34.950 --> 00:48:34.960 align:start position:0%
that we created at the end of the
 

00:48:34.960 --> 00:48:37.109 align:start position:0%
that we created at the end of the
previous<00:48:35.280><c> section</c><00:48:36.079><c> now</c><00:48:36.480><c> there</c><00:48:36.640><c> are</c><00:48:36.800><c> three</c>

00:48:37.109 --> 00:48:37.119 align:start position:0%
previous section now there are three
 

00:48:37.119 --> 00:48:39.109 align:start position:0%
previous section now there are three
problems<00:48:37.520><c> in</c><00:48:37.599><c> this</c><00:48:37.839><c> implementation</c><00:48:38.960><c> the</c>

00:48:39.109 --> 00:48:39.119 align:start position:0%
problems in this implementation the
 

00:48:39.119 --> 00:48:40.790 align:start position:0%
problems in this implementation the
first<00:48:39.440><c> problem</c><00:48:40.079><c> is</c><00:48:40.240><c> that</c><00:48:40.319><c> if</c><00:48:40.480><c> you</c><00:48:40.559><c> want</c><00:48:40.720><c> to</c>

00:48:40.790 --> 00:48:40.800 align:start position:0%
first problem is that if you want to
 

00:48:40.800 --> 00:48:42.950 align:start position:0%
first problem is that if you want to
create<00:48:41.280><c> another</c><00:48:41.760><c> employee</c><00:48:42.160><c> object</c><00:48:42.720><c> we</c><00:48:42.880><c> have</c>

00:48:42.950 --> 00:48:42.960 align:start position:0%
create another employee object we have
 

00:48:42.960 --> 00:48:44.630 align:start position:0%
create another employee object we have
to<00:48:43.119><c> repeat</c><00:48:43.520><c> this</c><00:48:43.680><c> structure</c><00:48:44.240><c> we</c><00:48:44.400><c> have</c><00:48:44.559><c> to</c>

00:48:44.630 --> 00:48:44.640 align:start position:0%
to repeat this structure we have to
 

00:48:44.640 --> 00:48:46.549 align:start position:0%
to repeat this structure we have to
repeat<00:48:44.960><c> this</c><00:48:45.200><c> shape</c><00:48:45.760><c> so</c><00:48:45.920><c> we'll</c><00:48:46.160><c> end</c><00:48:46.400><c> up</c>

00:48:46.549 --> 00:48:46.559 align:start position:0%
repeat this shape so we'll end up
 

00:48:46.559 --> 00:48:48.470 align:start position:0%
repeat this shape so we'll end up
duplicating<00:48:47.200><c> our</c><00:48:47.280><c> code</c><00:48:47.440><c> which</c><00:48:47.680><c> is</c><00:48:47.839><c> bad</c><00:48:48.319><c> we</c>

00:48:48.470 --> 00:48:48.480 align:start position:0%
duplicating our code which is bad we
 

00:48:48.480 --> 00:48:50.230 align:start position:0%
duplicating our code which is bad we
always<00:48:48.720><c> want</c><00:48:48.880><c> to</c><00:48:48.960><c> confirm</c><00:48:49.520><c> to</c><00:48:49.680><c> the</c><00:48:49.839><c> dry</c>

00:48:50.230 --> 00:48:50.240 align:start position:0%
always want to confirm to the dry
 

00:48:50.240 --> 00:48:53.510 align:start position:0%
always want to confirm to the dry
principle<00:48:50.960><c> don't</c><00:48:51.520><c> repeat</c><00:48:51.920><c> yourself</c>

00:48:53.510 --> 00:48:53.520 align:start position:0%
principle don't repeat yourself
 

00:48:53.520 --> 00:48:55.910 align:start position:0%
principle don't repeat yourself
now<00:48:53.760><c> the</c><00:48:53.920><c> second</c><00:48:54.319><c> problem</c><00:48:54.720><c> is</c><00:48:54.880><c> that</c><00:48:55.280><c> the</c><00:48:55.599><c> other</c>

00:48:55.910 --> 00:48:55.920 align:start position:0%
now the second problem is that the other
 

00:48:55.920 --> 00:48:57.910 align:start position:0%
now the second problem is that the other
employee<00:48:56.319><c> object</c><00:48:56.880><c> might</c><00:48:57.200><c> have</c><00:48:57.599><c> other</c>

00:48:57.910 --> 00:48:57.920 align:start position:0%
employee object might have other
 

00:48:57.920 --> 00:49:00.150 align:start position:0%
employee object might have other
properties<00:48:58.720><c> so</c><00:48:58.960><c> these</c><00:48:59.119><c> two</c><00:48:59.359><c> employee</c><00:48:59.760><c> objects</c>

00:49:00.150 --> 00:49:00.160 align:start position:0%
properties so these two employee objects
 

00:49:00.160 --> 00:49:02.470 align:start position:0%
properties so these two employee objects
might<00:49:00.319><c> not</c><00:49:00.559><c> have</c><00:49:01.040><c> a</c><00:49:01.280><c> consistent</c><00:49:02.000><c> shape</c>

00:49:02.470 --> 00:49:02.480 align:start position:0%
might not have a consistent shape
 

00:49:02.480 --> 00:49:04.230 align:start position:0%
might not have a consistent shape
because<00:49:02.720><c> we</c><00:49:02.880><c> don't</c><00:49:03.040><c> have</c><00:49:03.200><c> a</c><00:49:03.280><c> single</c><00:49:03.599><c> place</c><00:49:04.079><c> to</c>

00:49:04.230 --> 00:49:04.240 align:start position:0%
because we don't have a single place to
 

00:49:04.240 --> 00:49:06.790 align:start position:0%
because we don't have a single place to
define<00:49:04.640><c> the</c><00:49:04.880><c> shape</c><00:49:05.119><c> of</c><00:49:05.280><c> an</c><00:49:05.440><c> employee</c><00:49:05.920><c> object</c>

00:49:06.790 --> 00:49:06.800 align:start position:0%
define the shape of an employee object
 

00:49:06.800 --> 00:49:09.270 align:start position:0%
define the shape of an employee object
now<00:49:07.040><c> the</c><00:49:07.280><c> third</c><00:49:07.599><c> problem</c><00:49:08.319><c> is</c><00:49:08.480><c> that</c><00:49:08.800><c> overall</c>

00:49:09.270 --> 00:49:09.280 align:start position:0%
now the third problem is that overall
 

00:49:09.280 --> 00:49:11.190 align:start position:0%
now the third problem is that overall
this<00:49:09.520><c> structure</c><00:49:10.079><c> is</c><00:49:10.240><c> making</c><00:49:10.559><c> our</c><00:49:10.720><c> code</c><00:49:11.119><c> a</c>

00:49:11.190 --> 00:49:11.200 align:start position:0%
this structure is making our code a
 

00:49:11.200 --> 00:49:13.109 align:start position:0%
this structure is making our code a
little<00:49:11.440><c> bit</c><00:49:11.599><c> hard</c><00:49:11.839><c> to</c><00:49:11.920><c> read</c><00:49:12.160><c> and</c><00:49:12.319><c> understand</c>

00:49:13.109 --> 00:49:13.119 align:start position:0%
little bit hard to read and understand
 

00:49:13.119 --> 00:49:15.510 align:start position:0%
little bit hard to read and understand
this<00:49:13.359><c> is</c><00:49:13.440><c> where</c><00:49:13.680><c> we</c><00:49:13.760><c> use</c><00:49:14.000><c> a</c><00:49:14.160><c> type</c><00:49:14.400><c> alias</c><00:49:15.200><c> using</c>

00:49:15.510 --> 00:49:15.520 align:start position:0%
this is where we use a type alias using
 

00:49:15.520 --> 00:49:17.750 align:start position:0%
this is where we use a type alias using
a<00:49:15.599><c> type</c><00:49:15.920><c> alias</c><00:49:16.319><c> we</c><00:49:16.400><c> can</c><00:49:16.559><c> define</c><00:49:16.960><c> a</c><00:49:17.040><c> custom</c><00:49:17.520><c> type</c>

00:49:17.750 --> 00:49:17.760 align:start position:0%
a type alias we can define a custom type
 

00:49:17.760 --> 00:49:18.950 align:start position:0%
a type alias we can define a custom type
let<00:49:18.000><c> me</c><00:49:18.079><c> show</c><00:49:18.240><c> you</c>

00:49:18.950 --> 00:49:18.960 align:start position:0%
let me show you
 

00:49:18.960 --> 00:49:21.030 align:start position:0%
let me show you
so<00:49:19.280><c> on</c><00:49:19.359><c> the</c><00:49:19.520><c> top</c><00:49:19.760><c> we</c><00:49:19.920><c> start</c><00:49:20.480><c> with</c><00:49:20.640><c> the</c><00:49:20.720><c> type</c>

00:49:21.030 --> 00:49:21.040 align:start position:0%
so on the top we start with the type
 

00:49:21.040 --> 00:49:23.589 align:start position:0%
so on the top we start with the type
keyword<00:49:21.920><c> then</c><00:49:22.079><c> give</c><00:49:22.319><c> our</c><00:49:22.400><c> new</c><00:49:22.640><c> type</c><00:49:22.880><c> and</c><00:49:23.040><c> name</c>

00:49:23.589 --> 00:49:23.599 align:start position:0%
keyword then give our new type and name
 

00:49:23.599 --> 00:49:25.670 align:start position:0%
keyword then give our new type and name
and<00:49:23.760><c> once</c><00:49:24.000><c> again</c><00:49:24.240><c> here</c><00:49:24.400><c> we</c><00:49:24.559><c> use</c><00:49:24.960><c> the</c><00:49:25.200><c> pascal</c>

00:49:25.670 --> 00:49:25.680 align:start position:0%
and once again here we use the pascal
 

00:49:25.680 --> 00:49:27.829 align:start position:0%
and once again here we use the pascal
case<00:49:26.160><c> so</c><00:49:26.720><c> employee</c>

00:49:27.829 --> 00:49:27.839 align:start position:0%
case so employee
 

00:49:27.839 --> 00:49:29.430 align:start position:0%
case so employee
with<00:49:28.079><c> a</c><00:49:28.160><c> capital</c><00:49:28.640><c> e</c>

00:49:29.430 --> 00:49:29.440 align:start position:0%
with a capital e
 

00:49:29.440 --> 00:49:31.910 align:start position:0%
with a capital e
then<00:49:29.680><c> we</c><00:49:29.839><c> set</c><00:49:30.000><c> it</c><00:49:30.079><c> to</c><00:49:30.240><c> braces</c><00:49:31.119><c> and</c><00:49:31.440><c> inside</c><00:49:31.760><c> the</c>

00:49:31.910 --> 00:49:31.920 align:start position:0%
then we set it to braces and inside the
 

00:49:31.920 --> 00:49:34.390 align:start position:0%
then we set it to braces and inside the
braces<00:49:32.319><c> we</c><00:49:32.480><c> define</c><00:49:33.200><c> all</c><00:49:33.359><c> the</c><00:49:33.599><c> properties</c><00:49:34.160><c> and</c>

00:49:34.390 --> 00:49:34.400 align:start position:0%
braces we define all the properties and
 

00:49:34.400 --> 00:49:36.950 align:start position:0%
braces we define all the properties and
methods<00:49:34.960><c> an</c><00:49:35.119><c> employee</c><00:49:35.520><c> object</c><00:49:35.839><c> should</c><00:49:36.079><c> have</c>

00:49:36.950 --> 00:49:36.960 align:start position:0%
methods an employee object should have
 

00:49:36.960 --> 00:49:39.270 align:start position:0%
methods an employee object should have
so<00:49:37.119><c> i'm</c><00:49:37.200><c> going</c><00:49:37.280><c> to</c><00:49:37.359><c> go</c><00:49:37.520><c> in</c><00:49:37.599><c> this</c><00:49:37.760><c> annotation</c>

00:49:39.270 --> 00:49:39.280 align:start position:0%
so i'm going to go in this annotation
 

00:49:39.280 --> 00:49:41.589 align:start position:0%
so i'm going to go in this annotation
select<00:49:39.599><c> these</c><00:49:39.760><c> three</c><00:49:40.000><c> lines</c><00:49:40.720><c> and</c><00:49:40.880><c> by</c><00:49:41.119><c> pressing</c>

00:49:41.589 --> 00:49:41.599 align:start position:0%
select these three lines and by pressing
 

00:49:41.599 --> 00:49:44.950 align:start position:0%
select these three lines and by pressing
alt<00:49:42.160><c> and</c><00:49:42.400><c> up</c><00:49:42.800><c> we</c><00:49:42.960><c> can</c><00:49:43.200><c> move</c><00:49:43.440><c> these</c><00:49:43.680><c> lines</c><00:49:44.319><c> up</c>

00:49:44.950 --> 00:49:44.960 align:start position:0%
alt and up we can move these lines up
 

00:49:44.960 --> 00:49:46.870 align:start position:0%
alt and up we can move these lines up
okay

00:49:46.870 --> 00:49:46.880 align:start position:0%
okay
 

00:49:46.880 --> 00:49:48.870 align:start position:0%
okay
now<00:49:47.119><c> when</c><00:49:47.280><c> defining</c><00:49:47.680><c> this</c><00:49:47.839><c> employee</c><00:49:48.160><c> object</c>

00:49:48.870 --> 00:49:48.880 align:start position:0%
now when defining this employee object
 

00:49:48.880 --> 00:49:51.589 align:start position:0%
now when defining this employee object
we<00:49:49.200><c> annotate</c><00:49:49.680><c> it</c><00:49:49.839><c> with</c><00:49:50.160><c> our</c><00:49:50.319><c> new</c><00:49:50.559><c> type</c>

00:49:51.589 --> 00:49:51.599 align:start position:0%
we annotate it with our new type
 

00:49:51.599 --> 00:49:54.549 align:start position:0%
we annotate it with our new type
employee<00:49:52.480><c> okay</c><00:49:53.119><c> so</c><00:49:53.280><c> now</c><00:49:53.520><c> we</c><00:49:53.599><c> have</c><00:49:54.079><c> a</c><00:49:54.240><c> single</c>

00:49:54.549 --> 00:49:54.559 align:start position:0%
employee okay so now we have a single
 

00:49:54.559 --> 00:49:56.950 align:start position:0%
employee okay so now we have a single
place<00:49:54.960><c> where</c><00:49:55.440><c> we</c><00:49:55.599><c> define</c><00:49:56.240><c> the</c><00:49:56.480><c> shape</c><00:49:56.720><c> of</c><00:49:56.800><c> an</c>

00:49:56.950 --> 00:49:56.960 align:start position:0%
place where we define the shape of an
 

00:49:56.960 --> 00:49:59.270 align:start position:0%
place where we define the shape of an
employee<00:49:57.359><c> object</c><00:49:58.000><c> and</c><00:49:58.160><c> we</c><00:49:58.319><c> can</c><00:49:58.480><c> reuse</c><00:49:58.800><c> this</c><00:49:59.119><c> in</c>

00:49:59.270 --> 00:49:59.280 align:start position:0%
employee object and we can reuse this in
 

00:49:59.280 --> 00:50:01.430 align:start position:0%
employee object and we can reuse this in
multiple<00:49:59.680><c> places</c><00:50:00.319><c> this</c><00:50:00.559><c> is</c><00:50:00.640><c> the</c><00:50:00.880><c> benefit</c><00:50:01.280><c> of</c>

00:50:01.430 --> 00:50:01.440 align:start position:0%
multiple places this is the benefit of
 

00:50:01.440 --> 00:50:05.180 align:start position:0%
multiple places this is the benefit of
using<00:50:01.680><c> a</c><00:50:01.760><c> type</c><00:50:02.079><c> abs</c>

00:50:05.180 --> 00:50:05.190 align:start position:0%
 
 

00:50:05.190 --> 00:50:10.390 align:start position:0%
 
[Music]

00:50:10.390 --> 00:50:10.400 align:start position:0%
 
 

00:50:10.400 --> 00:50:12.470 align:start position:0%
 
all<00:50:10.559><c> right</c><00:50:10.720><c> let's</c><00:50:10.880><c> talk</c><00:50:11.040><c> about</c><00:50:11.280><c> union</c><00:50:11.760><c> types</c>

00:50:12.470 --> 00:50:12.480 align:start position:0%
all right let's talk about union types
 

00:50:12.480 --> 00:50:14.790 align:start position:0%
all right let's talk about union types
with<00:50:12.720><c> union</c><00:50:13.200><c> types</c><00:50:13.599><c> we</c><00:50:13.760><c> can</c><00:50:13.920><c> give</c><00:50:14.079><c> a</c><00:50:14.240><c> variable</c>

00:50:14.790 --> 00:50:14.800 align:start position:0%
with union types we can give a variable
 

00:50:14.800 --> 00:50:17.030 align:start position:0%
with union types we can give a variable
or<00:50:14.960><c> a</c><00:50:15.040><c> function</c><00:50:15.520><c> parameter</c><00:50:16.400><c> more</c><00:50:16.559><c> than</c><00:50:16.800><c> one</c>

00:50:17.030 --> 00:50:17.040 align:start position:0%
or a function parameter more than one
 

00:50:17.040 --> 00:50:19.109 align:start position:0%
or a function parameter more than one
type<00:50:17.680><c> so</c><00:50:17.839><c> let's</c><00:50:18.000><c> define</c><00:50:18.319><c> a</c><00:50:18.480><c> function</c><00:50:18.880><c> for</c>

00:50:19.109 --> 00:50:19.119 align:start position:0%
type so let's define a function for
 

00:50:19.119 --> 00:50:21.109 align:start position:0%
type so let's define a function for
converting<00:50:19.599><c> weight</c><00:50:20.000><c> from</c><00:50:20.240><c> kilogram</c><00:50:20.880><c> to</c>

00:50:21.109 --> 00:50:21.119 align:start position:0%
converting weight from kilogram to
 

00:50:21.119 --> 00:50:22.069 align:start position:0%
converting weight from kilogram to
pounds

00:50:22.069 --> 00:50:22.079 align:start position:0%
pounds
 

00:50:22.079 --> 00:50:24.309 align:start position:0%
pounds
now<00:50:22.240><c> we</c><00:50:22.400><c> give</c><00:50:22.559><c> it</c><00:50:22.640><c> a</c><00:50:22.720><c> parameter</c><00:50:23.119><c> called</c><00:50:23.359><c> weight</c>

00:50:24.309 --> 00:50:24.319 align:start position:0%
now we give it a parameter called weight
 

00:50:24.319 --> 00:50:26.309 align:start position:0%
now we give it a parameter called weight
now<00:50:24.480><c> let's</c><00:50:24.720><c> assume</c><00:50:25.040><c> that</c><00:50:25.200><c> this</c><00:50:25.440><c> parameter</c><00:50:26.079><c> can</c>

00:50:26.309 --> 00:50:26.319 align:start position:0%
now let's assume that this parameter can
 

00:50:26.319 --> 00:50:29.589 align:start position:0%
now let's assume that this parameter can
be<00:50:26.480><c> either</c><00:50:27.040><c> a</c><00:50:27.280><c> number</c><00:50:28.000><c> or</c><00:50:28.160><c> a</c><00:50:28.400><c> string</c><00:50:29.200><c> so</c><00:50:29.359><c> we</c>

00:50:29.589 --> 00:50:29.599 align:start position:0%
be either a number or a string so we
 

00:50:29.599 --> 00:50:33.430 align:start position:0%
be either a number or a string so we
annotate<00:50:30.079><c> it</c><00:50:30.240><c> with</c><00:50:30.800><c> number</c><00:50:31.520><c> or</c><00:50:32.240><c> string</c>

00:50:33.430 --> 00:50:33.440 align:start position:0%
annotate it with number or string
 

00:50:33.440 --> 00:50:35.990 align:start position:0%
annotate it with number or string
so<00:50:33.760><c> using</c><00:50:34.000><c> a</c><00:50:34.160><c> vertical</c><00:50:34.720><c> bar</c><00:50:35.200><c> we</c><00:50:35.359><c> can</c><00:50:35.599><c> create</c><00:50:35.920><c> a</c>

00:50:35.990 --> 00:50:36.000 align:start position:0%
so using a vertical bar we can create a
 

00:50:36.000 --> 00:50:37.270 align:start position:0%
so using a vertical bar we can create a
union<00:50:36.400><c> type</c>

00:50:37.270 --> 00:50:37.280 align:start position:0%
union type
 

00:50:37.280 --> 00:50:38.069 align:start position:0%
union type
now

00:50:38.069 --> 00:50:38.079 align:start position:0%
now
 

00:50:38.079 --> 00:50:40.710 align:start position:0%
now
we<00:50:38.240><c> can</c><00:50:38.480><c> call</c><00:50:38.720><c> this</c><00:50:38.880><c> function</c><00:50:39.440><c> in</c><00:50:39.599><c> two</c><00:50:39.839><c> ways</c><00:50:40.559><c> we</c>

00:50:40.710 --> 00:50:40.720 align:start position:0%
we can call this function in two ways we
 

00:50:40.720 --> 00:50:42.230 align:start position:0%
we can call this function in two ways we
can<00:50:40.880><c> give</c><00:50:41.040><c> it</c><00:50:41.200><c> a</c><00:50:41.280><c> number</c>

00:50:42.230 --> 00:50:42.240 align:start position:0%
can give it a number
 

00:50:42.240 --> 00:50:43.109 align:start position:0%
can give it a number
or

00:50:43.109 --> 00:50:43.119 align:start position:0%
or
 

00:50:43.119 --> 00:50:46.710 align:start position:0%
or
a<00:50:43.440><c> string</c><00:50:43.760><c> like</c><00:50:44.319><c> 10</c><00:50:44.880><c> kilograms</c><00:50:45.760><c> okay</c>

00:50:46.710 --> 00:50:46.720 align:start position:0%
a string like 10 kilograms okay
 

00:50:46.720 --> 00:50:48.470 align:start position:0%
a string like 10 kilograms okay
now<00:50:46.960><c> let's</c><00:50:47.200><c> finish</c><00:50:47.440><c> up</c><00:50:47.520><c> this</c><00:50:47.760><c> example</c><00:50:48.240><c> so</c>

00:50:48.470 --> 00:50:48.480 align:start position:0%
now let's finish up this example so
 

00:50:48.480 --> 00:50:50.230 align:start position:0%
now let's finish up this example so
we're<00:50:48.640><c> going</c><00:50:48.720><c> to</c><00:50:48.800><c> annotate</c><00:50:49.200><c> the</c><00:50:49.280><c> return</c><00:50:49.599><c> type</c>

00:50:50.230 --> 00:50:50.240 align:start position:0%
we're going to annotate the return type
 

00:50:50.240 --> 00:50:52.549 align:start position:0%
we're going to annotate the return type
and<00:50:50.400><c> return</c><00:50:50.800><c> a</c><00:50:50.880><c> number</c>

00:50:52.549 --> 00:50:52.559 align:start position:0%
and return a number
 

00:50:52.559 --> 00:50:55.270 align:start position:0%
and return a number
now<00:50:52.800><c> in</c><00:50:52.880><c> this</c><00:50:53.119><c> function</c><00:50:53.920><c> at</c><00:50:54.079><c> this</c><00:50:54.400><c> point</c><00:50:55.119><c> we</c>

00:50:55.270 --> 00:50:55.280 align:start position:0%
now in this function at this point we
 

00:50:55.280 --> 00:50:57.589 align:start position:0%
now in this function at this point we
don't<00:50:55.440><c> know</c><00:50:55.680><c> if</c><00:50:55.920><c> the</c><00:50:56.079><c> weight</c><00:50:56.640><c> is</c><00:50:56.800><c> a</c><00:50:56.960><c> number</c><00:50:57.440><c> or</c>

00:50:57.589 --> 00:50:57.599 align:start position:0%
don't know if the weight is a number or
 

00:50:57.599 --> 00:51:00.790 align:start position:0%
don't know if the weight is a number or
a<00:50:57.760><c> string</c><00:50:58.400><c> so</c><00:50:58.559><c> if</c><00:50:58.720><c> we</c><00:50:58.800><c> type</c><00:50:59.119><c> weight</c><00:50:59.680><c> period</c><00:51:00.480><c> we</c>

00:51:00.790 --> 00:51:00.800 align:start position:0%
a string so if we type weight period we
 

00:51:00.800 --> 00:51:03.589 align:start position:0%
a string so if we type weight period we
only<00:51:01.119><c> see</c><00:51:01.680><c> the</c><00:51:01.920><c> properties</c><00:51:02.559><c> and</c><00:51:02.800><c> methods</c><00:51:03.359><c> that</c>

00:51:03.589 --> 00:51:03.599 align:start position:0%
only see the properties and methods that
 

00:51:03.599 --> 00:51:06.470 align:start position:0%
only see the properties and methods that
are<00:51:03.839><c> common</c><00:51:04.240><c> between</c><00:51:04.960><c> numbers</c><00:51:05.599><c> and</c><00:51:05.839><c> strings</c>

00:51:06.470 --> 00:51:06.480 align:start position:0%
are common between numbers and strings
 

00:51:06.480 --> 00:51:08.549 align:start position:0%
are common between numbers and strings
so<00:51:06.800><c> both</c><00:51:07.040><c> numbers</c><00:51:07.440><c> and</c><00:51:07.599><c> strings</c><00:51:08.079><c> have</c><00:51:08.319><c> these</c>

00:51:08.549 --> 00:51:08.559 align:start position:0%
so both numbers and strings have these
 

00:51:08.559 --> 00:51:11.349 align:start position:0%
so both numbers and strings have these
three<00:51:08.800><c> methods</c><00:51:09.440><c> to</c><00:51:09.599><c> locale</c><00:51:10.000><c> string</c><00:51:10.559><c> to</c><00:51:10.800><c> string</c>

00:51:11.349 --> 00:51:11.359 align:start position:0%
three methods to locale string to string
 

00:51:11.359 --> 00:51:13.829 align:start position:0%
three methods to locale string to string
and<00:51:11.599><c> value</c><00:51:12.000><c> of</c><00:51:12.319><c> so</c><00:51:12.480><c> here</c><00:51:12.720><c> we</c><00:51:12.800><c> are</c><00:51:12.960><c> not</c><00:51:13.200><c> seeing</c>

00:51:13.829 --> 00:51:13.839 align:start position:0%
and value of so here we are not seeing
 

00:51:13.839 --> 00:51:16.150 align:start position:0%
and value of so here we are not seeing
methods<00:51:14.240><c> that</c><00:51:14.400><c> are</c><00:51:14.559><c> specific</c><00:51:15.040><c> to</c><00:51:15.280><c> numbers</c><00:51:15.920><c> or</c>

00:51:16.150 --> 00:51:16.160 align:start position:0%
methods that are specific to numbers or
 

00:51:16.160 --> 00:51:18.470 align:start position:0%
methods that are specific to numbers or
strings<00:51:17.040><c> and</c><00:51:17.200><c> this</c><00:51:17.359><c> is</c><00:51:17.440><c> where</c><00:51:17.680><c> we</c><00:51:17.839><c> use</c><00:51:18.319><c> a</c>

00:51:18.470 --> 00:51:18.480 align:start position:0%
strings and this is where we use a
 

00:51:18.480 --> 00:51:20.870 align:start position:0%
strings and this is where we use a
technique<00:51:18.960><c> called</c><00:51:19.760><c> narrowing</c><00:51:20.559><c> so</c><00:51:20.720><c> we're</c>

00:51:20.870 --> 00:51:20.880 align:start position:0%
technique called narrowing so we're
 

00:51:20.880 --> 00:51:22.870 align:start position:0%
technique called narrowing so we're
going<00:51:21.040><c> to</c><00:51:21.200><c> narrow</c><00:51:21.520><c> down</c><00:51:21.760><c> this</c><00:51:22.000><c> union</c><00:51:22.400><c> type</c>

00:51:22.870 --> 00:51:22.880 align:start position:0%
going to narrow down this union type
 

00:51:22.880 --> 00:51:25.510 align:start position:0%
going to narrow down this union type
into<00:51:23.200><c> a</c><00:51:23.359><c> more</c><00:51:23.599><c> specific</c><00:51:24.160><c> type</c><00:51:24.880><c> so</c><00:51:25.040><c> here</c><00:51:25.200><c> we</c><00:51:25.359><c> can</c>

00:51:25.510 --> 00:51:25.520 align:start position:0%
into a more specific type so here we can
 

00:51:25.520 --> 00:51:28.710 align:start position:0%
into a more specific type so here we can
say<00:51:26.079><c> if</c><00:51:26.720><c> type</c><00:51:27.119><c> of</c><00:51:27.680><c> weight</c>

00:51:28.710 --> 00:51:28.720 align:start position:0%
say if type of weight
 

00:51:28.720 --> 00:51:29.750 align:start position:0%
say if type of weight
equals

00:51:29.750 --> 00:51:29.760 align:start position:0%
equals
 

00:51:29.760 --> 00:51:31.510 align:start position:0%
equals
number

00:51:31.510 --> 00:51:31.520 align:start position:0%
number
 

00:51:31.520 --> 00:51:33.990 align:start position:0%
number
now<00:51:31.760><c> in</c><00:51:31.839><c> this</c><00:51:32.079><c> block</c><00:51:32.640><c> the</c><00:51:32.800><c> compiler</c><00:51:33.359><c> knows</c>

00:51:33.990 --> 00:51:34.000 align:start position:0%
now in this block the compiler knows
 

00:51:34.000 --> 00:51:36.710 align:start position:0%
now in this block the compiler knows
that<00:51:34.240><c> the</c><00:51:34.400><c> weight</c><00:51:35.040><c> is</c><00:51:35.280><c> a</c><00:51:35.359><c> number</c><00:51:36.319><c> so</c><00:51:36.559><c> if</c><00:51:36.640><c> we</c>

00:51:36.710 --> 00:51:36.720 align:start position:0%
that the weight is a number so if we
 

00:51:36.720 --> 00:51:39.190 align:start position:0%
that the weight is a number so if we
type<00:51:36.960><c> weight</c><00:51:37.520><c> period</c><00:51:38.240><c> we</c><00:51:38.400><c> see</c><00:51:38.720><c> all</c><00:51:38.880><c> the</c>

00:51:39.190 --> 00:51:39.200 align:start position:0%
type weight period we see all the
 

00:51:39.200 --> 00:51:41.270 align:start position:0%
type weight period we see all the
methods<00:51:39.680><c> that</c><00:51:39.920><c> are</c><00:51:40.000><c> available</c><00:51:40.559><c> in</c><00:51:40.880><c> number</c>

00:51:41.270 --> 00:51:41.280 align:start position:0%
methods that are available in number
 

00:51:41.280 --> 00:51:42.390 align:start position:0%
methods that are available in number
objects

00:51:42.390 --> 00:51:42.400 align:start position:0%
objects
 

00:51:42.400 --> 00:51:44.630 align:start position:0%
objects
and<00:51:42.640><c> by</c><00:51:42.800><c> the</c><00:51:42.880><c> way</c><00:51:43.280><c> we</c><00:51:43.440><c> don't</c><00:51:43.599><c> necessarily</c><00:51:44.160><c> need</c>

00:51:44.630 --> 00:51:44.640 align:start position:0%
and by the way we don't necessarily need
 

00:51:44.640 --> 00:51:46.870 align:start position:0%
and by the way we don't necessarily need
the<00:51:44.880><c> code</c><00:51:45.119><c> blocks</c><00:51:45.440><c> here</c><00:51:46.079><c> in</c><00:51:46.160><c> this</c><00:51:46.400><c> line</c><00:51:46.640><c> if</c><00:51:46.800><c> you</c>

00:51:46.870 --> 00:51:46.880 align:start position:0%
the code blocks here in this line if you
 

00:51:46.880 --> 00:51:49.510 align:start position:0%
the code blocks here in this line if you
have<00:51:46.960><c> a</c><00:51:47.040><c> one-liner</c><00:51:48.079><c> and</c><00:51:48.559><c> type</c><00:51:48.880><c> weight</c><00:51:49.119><c> period</c>

00:51:49.510 --> 00:51:49.520 align:start position:0%
have a one-liner and type weight period
 

00:51:49.520 --> 00:51:52.069 align:start position:0%
have a one-liner and type weight period
we<00:51:49.760><c> still</c><00:51:50.000><c> see</c><00:51:50.559><c> all</c><00:51:50.720><c> the</c><00:51:50.960><c> methods</c><00:51:51.520><c> available</c>

00:51:52.069 --> 00:51:52.079 align:start position:0%
we still see all the methods available
 

00:51:52.079 --> 00:51:53.750 align:start position:0%
we still see all the methods available
in<00:51:52.240><c> numbers</c><00:51:52.800><c> okay</c>

00:51:53.750 --> 00:51:53.760 align:start position:0%
in numbers okay
 

00:51:53.760 --> 00:51:55.829 align:start position:0%
in numbers okay
so<00:51:54.400><c> what</c><00:51:54.640><c> are</c><00:51:54.720><c> we</c><00:51:54.800><c> going</c><00:51:54.960><c> to</c><00:51:55.040><c> do</c><00:51:55.200><c> here</c><00:51:55.599><c> we're</c>

00:51:55.829 --> 00:51:55.839 align:start position:0%
so what are we going to do here we're
 

00:51:55.839 --> 00:51:59.990 align:start position:0%
so what are we going to do here we're
going<00:51:55.920><c> to</c><00:51:56.000><c> return</c><00:51:56.800><c> weight</c><00:51:57.599><c> times</c><00:51:58.240><c> 2.2</c>

00:51:59.990 --> 00:52:00.000 align:start position:0%
going to return weight times 2.2
 

00:52:00.000 --> 00:52:01.349 align:start position:0%
going to return weight times 2.2
otherwise

00:52:01.349 --> 00:52:01.359 align:start position:0%
otherwise
 

00:52:01.359 --> 00:52:04.309 align:start position:0%
otherwise
if<00:52:01.520><c> you</c><00:52:01.599><c> end</c><00:52:01.760><c> up</c><00:52:01.920><c> here</c><00:52:02.559><c> that</c><00:52:02.800><c> means</c><00:52:03.520><c> weight</c><00:52:04.079><c> as</c>

00:52:04.309 --> 00:52:04.319 align:start position:0%
if you end up here that means weight as
 

00:52:04.319 --> 00:52:06.309 align:start position:0%
if you end up here that means weight as
a<00:52:04.400><c> string</c><00:52:05.040><c> so</c><00:52:05.200><c> now</c><00:52:05.359><c> we</c><00:52:05.520><c> see</c><00:52:05.839><c> all</c><00:52:06.079><c> the</c>

00:52:06.309 --> 00:52:06.319 align:start position:0%
a string so now we see all the
 

00:52:06.319 --> 00:52:08.870 align:start position:0%
a string so now we see all the
properties<00:52:06.880><c> and</c><00:52:07.040><c> methods</c><00:52:07.760><c> of</c><00:52:07.920><c> string</c><00:52:08.240><c> objects</c>

00:52:08.870 --> 00:52:08.880 align:start position:0%
properties and methods of string objects
 

00:52:08.880 --> 00:52:09.829 align:start position:0%
properties and methods of string objects
okay

00:52:09.829 --> 00:52:09.839 align:start position:0%
okay
 

00:52:09.839 --> 00:52:11.670 align:start position:0%
okay
so<00:52:10.000><c> to</c><00:52:10.160><c> finish</c><00:52:10.480><c> this</c><00:52:10.640><c> example</c>

00:52:11.670 --> 00:52:11.680 align:start position:0%
so to finish this example
 

00:52:11.680 --> 00:52:13.030 align:start position:0%
so to finish this example
here<00:52:11.839><c> we're</c><00:52:12.000><c> going</c><00:52:12.079><c> to</c><00:52:12.160><c> return</c>

00:52:13.030 --> 00:52:13.040 align:start position:0%
here we're going to return
 

00:52:13.040 --> 00:52:14.390 align:start position:0%
here we're going to return
first<00:52:13.280><c> we</c><00:52:13.440><c> need</c><00:52:13.520><c> to</c><00:52:13.599><c> convert</c><00:52:13.920><c> the</c><00:52:14.000><c> weight</c><00:52:14.240><c> to</c>

00:52:14.390 --> 00:52:14.400 align:start position:0%
first we need to convert the weight to
 

00:52:14.400 --> 00:52:16.829 align:start position:0%
first we need to convert the weight to
an<00:52:14.559><c> integer</c><00:52:15.200><c> so</c><00:52:15.440><c> we</c><00:52:15.599><c> call</c>

00:52:16.829 --> 00:52:16.839 align:start position:0%
an integer so we call
 

00:52:16.839 --> 00:52:19.109 align:start position:0%
an integer so we call
parsend<00:52:17.920><c> pass</c><00:52:18.160><c> the</c><00:52:18.240><c> weight</c>

00:52:19.109 --> 00:52:19.119 align:start position:0%
parsend pass the weight
 

00:52:19.119 --> 00:52:22.069 align:start position:0%
parsend pass the weight
and<00:52:19.280><c> then</c><00:52:19.680><c> multiply</c><00:52:20.160><c> it</c><00:52:20.240><c> by</c><00:52:20.480><c> 2.2</c>

00:52:22.069 --> 00:52:22.079 align:start position:0%
and then multiply it by 2.2
 

00:52:22.079 --> 00:52:23.270 align:start position:0%
and then multiply it by 2.2
okay

00:52:23.270 --> 00:52:23.280 align:start position:0%
okay
 

00:52:23.280 --> 00:52:25.030 align:start position:0%
okay
now<00:52:23.440><c> back</c><00:52:23.599><c> to</c><00:52:23.760><c> the</c><00:52:23.839><c> terminal</c><00:52:24.319><c> let's</c><00:52:24.559><c> compile</c>

00:52:25.030 --> 00:52:25.040 align:start position:0%
now back to the terminal let's compile
 

00:52:25.040 --> 00:52:27.190 align:start position:0%
now back to the terminal let's compile
our<00:52:25.119><c> code</c><00:52:25.440><c> and</c><00:52:25.520><c> see</c><00:52:25.680><c> what</c><00:52:25.839><c> we</c><00:52:26.000><c> get</c>

00:52:27.190 --> 00:52:27.200 align:start position:0%
our code and see what we get
 

00:52:27.200 --> 00:52:31.349 align:start position:0%
our code and see what we get
all<00:52:27.359><c> right</c><00:52:28.000><c> we're</c><00:52:28.160><c> going</c><00:52:28.240><c> to</c><00:52:28.319><c> go</c><00:52:28.400><c> to</c><00:52:28.640><c> index.js</c>

00:52:31.349 --> 00:52:31.359 align:start position:0%
all right we're going to go to index.js
 

00:52:31.359 --> 00:52:34.230 align:start position:0%
all right we're going to go to index.js
take<00:52:31.599><c> a</c><00:52:31.680><c> look</c><00:52:32.319><c> our</c><00:52:32.480><c> union</c><00:52:32.880><c> type</c><00:52:33.440><c> is</c><00:52:33.680><c> not</c><00:52:33.920><c> part</c>

00:52:34.230 --> 00:52:34.240 align:start position:0%
take a look our union type is not part
 

00:52:34.240 --> 00:52:36.390 align:start position:0%
take a look our union type is not part
of<00:52:34.720><c> the</c><00:52:34.960><c> generated</c><00:52:35.520><c> javascript</c><00:52:36.079><c> code</c><00:52:36.319><c> it's</c>

00:52:36.390 --> 00:52:36.400 align:start position:0%
of the generated javascript code it's
 

00:52:36.400 --> 00:52:38.230 align:start position:0%
of the generated javascript code it's
purely<00:52:36.720><c> for</c><00:52:36.880><c> the</c><00:52:36.960><c> compiler</c><00:52:37.599><c> to</c><00:52:37.680><c> do</c><00:52:37.839><c> is</c><00:52:38.000><c> type</c>

00:52:38.230 --> 00:52:38.240 align:start position:0%
purely for the compiler to do is type
 

00:52:38.240 --> 00:52:41.330 align:start position:0%
purely for the compiler to do is type
checking

00:52:41.330 --> 00:52:41.340 align:start position:0%
 
 

00:52:41.340 --> 00:52:46.549 align:start position:0%
 
[Music]

00:52:46.549 --> 00:52:46.559 align:start position:0%
 
 

00:52:46.559 --> 00:52:48.069 align:start position:0%
 
so<00:52:46.800><c> in</c><00:52:46.880><c> the</c><00:52:46.960><c> previous</c><00:52:47.359><c> lesson</c><00:52:47.760><c> you</c><00:52:47.839><c> learned</c>

00:52:48.069 --> 00:52:48.079 align:start position:0%
so in the previous lesson you learned
 

00:52:48.079 --> 00:52:50.630 align:start position:0%
so in the previous lesson you learned
that<00:52:48.400><c> using</c><00:52:48.800><c> a</c><00:52:48.960><c> union</c><00:52:49.359><c> type</c><00:52:49.839><c> we</c><00:52:50.000><c> can</c><00:52:50.160><c> say</c><00:52:50.400><c> a</c>

00:52:50.630 --> 00:52:50.640 align:start position:0%
that using a union type we can say a
 

00:52:50.640 --> 00:52:53.030 align:start position:0%
that using a union type we can say a
variable<00:52:51.200><c> or</c><00:52:51.359><c> a</c><00:52:51.440><c> function</c><00:52:51.839><c> parameter</c><00:52:52.640><c> can</c><00:52:52.800><c> be</c>

00:52:53.030 --> 00:52:53.040 align:start position:0%
variable or a function parameter can be
 

00:52:53.040 --> 00:52:55.510 align:start position:0%
variable or a function parameter can be
one<00:52:53.200><c> of</c><00:52:53.440><c> many</c><00:52:53.760><c> types</c><00:52:54.160><c> right</c><00:52:54.880><c> now</c><00:52:55.040><c> we</c><00:52:55.200><c> have</c>

00:52:55.510 --> 00:52:55.520 align:start position:0%
one of many types right now we have
 

00:52:55.520 --> 00:52:57.349 align:start position:0%
one of many types right now we have
another<00:52:55.839><c> technique</c><00:52:56.240><c> for</c><00:52:56.400><c> combining</c><00:52:56.960><c> types</c>

00:52:57.349 --> 00:52:57.359 align:start position:0%
another technique for combining types
 

00:52:57.359 --> 00:52:59.270 align:start position:0%
another technique for combining types
called<00:52:58.000><c> intersection</c>

00:52:59.270 --> 00:52:59.280 align:start position:0%
called intersection
 

00:52:59.280 --> 00:53:01.430 align:start position:0%
called intersection
so<00:52:59.520><c> instead</c><00:52:59.839><c> of</c><00:53:00.000><c> a</c><00:53:00.079><c> vertical</c><00:53:00.559><c> bar</c>

00:53:01.430 --> 00:53:01.440 align:start position:0%
so instead of a vertical bar
 

00:53:01.440 --> 00:53:02.950 align:start position:0%
so instead of a vertical bar
use<00:53:01.680><c> an</c><00:53:01.839><c> ampersand</c>

00:53:02.950 --> 00:53:02.960 align:start position:0%
use an ampersand
 

00:53:02.960 --> 00:53:06.230 align:start position:0%
use an ampersand
and<00:53:03.119><c> now</c><00:53:03.839><c> this</c><00:53:04.079><c> type</c><00:53:04.400><c> represents</c><00:53:05.359><c> an</c><00:53:05.599><c> object</c>

00:53:06.230 --> 00:53:06.240 align:start position:0%
and now this type represents an object
 

00:53:06.240 --> 00:53:08.549 align:start position:0%
and now this type represents an object
that<00:53:06.400><c> is</c><00:53:06.640><c> both</c><00:53:06.960><c> a</c><00:53:07.200><c> number</c><00:53:07.680><c> and</c><00:53:07.839><c> a</c><00:53:08.079><c> string</c><00:53:08.400><c> at</c>

00:53:08.549 --> 00:53:08.559 align:start position:0%
that is both a number and a string at
 

00:53:08.559 --> 00:53:10.790 align:start position:0%
that is both a number and a string at
the<00:53:08.720><c> same</c><00:53:08.960><c> time</c><00:53:09.440><c> now</c><00:53:09.680><c> technically</c><00:53:10.400><c> this</c><00:53:10.640><c> is</c>

00:53:10.790 --> 00:53:10.800 align:start position:0%
the same time now technically this is
 

00:53:10.800 --> 00:53:13.109 align:start position:0%
the same time now technically this is
impossible<00:53:11.520><c> we</c><00:53:11.680><c> cannot</c><00:53:12.000><c> have</c><00:53:12.240><c> an</c><00:53:12.400><c> object</c><00:53:12.880><c> that</c>

00:53:13.109 --> 00:53:13.119 align:start position:0%
impossible we cannot have an object that
 

00:53:13.119 --> 00:53:15.030 align:start position:0%
impossible we cannot have an object that
is<00:53:13.359><c> both</c><00:53:13.680><c> a</c><00:53:13.839><c> number</c><00:53:14.240><c> and</c><00:53:14.400><c> a</c><00:53:14.480><c> string</c><00:53:14.800><c> at</c><00:53:14.960><c> the</c>

00:53:15.030 --> 00:53:15.040 align:start position:0%
is both a number and a string at the
 

00:53:15.040 --> 00:53:16.870 align:start position:0%
is both a number and a string at the
same<00:53:15.280><c> time</c><00:53:15.920><c> so</c><00:53:16.079><c> let's</c><00:53:16.240><c> look</c><00:53:16.400><c> at</c><00:53:16.480><c> a</c><00:53:16.640><c> more</c>

00:53:16.870 --> 00:53:16.880 align:start position:0%
same time so let's look at a more
 

00:53:16.880 --> 00:53:18.309 align:start position:0%
same time so let's look at a more
realistic<00:53:17.359><c> example</c>

00:53:18.309 --> 00:53:18.319 align:start position:0%
realistic example
 

00:53:18.319 --> 00:53:20.309 align:start position:0%
realistic example
i'm<00:53:18.559><c> going</c><00:53:18.640><c> to</c><00:53:18.720><c> use</c><00:53:19.440><c> our</c><00:53:19.599><c> type</c><00:53:19.839><c> alias</c><00:53:20.240><c> to</c>

00:53:20.309 --> 00:53:20.319 align:start position:0%
i'm going to use our type alias to
 

00:53:20.319 --> 00:53:22.790 align:start position:0%
i'm going to use our type alias to
define<00:53:20.960><c> a</c><00:53:21.119><c> new</c><00:53:21.359><c> custom</c><00:53:21.760><c> type</c><00:53:22.160><c> called</c>

00:53:22.790 --> 00:53:22.800 align:start position:0%
define a new custom type called
 

00:53:22.800 --> 00:53:25.990 align:start position:0%
define a new custom type called
draggable<00:53:23.760><c> so</c><00:53:23.920><c> this</c><00:53:24.079><c> represents</c><00:53:25.200><c> an</c><00:53:25.440><c> object</c>

00:53:25.990 --> 00:53:26.000 align:start position:0%
draggable so this represents an object
 

00:53:26.000 --> 00:53:28.150 align:start position:0%
draggable so this represents an object
that<00:53:26.160><c> can</c><00:53:26.319><c> be</c><00:53:26.480><c> dragged</c><00:53:26.880><c> on</c><00:53:26.960><c> the</c><00:53:27.119><c> screen</c><00:53:27.920><c> now</c>

00:53:28.150 --> 00:53:28.160 align:start position:0%
that can be dragged on the screen now
 

00:53:28.160 --> 00:53:30.069 align:start position:0%
that can be dragged on the screen now
what<00:53:28.400><c> properties</c><00:53:28.960><c> or</c><00:53:29.119><c> methods</c><00:53:29.440><c> do</c><00:53:29.599><c> we</c><00:53:29.680><c> need</c><00:53:30.000><c> in</c>

00:53:30.069 --> 00:53:30.079 align:start position:0%
what properties or methods do we need in
 

00:53:30.079 --> 00:53:31.750 align:start position:0%
what properties or methods do we need in
a<00:53:30.160><c> draggable</c><00:53:30.720><c> object</c>

00:53:31.750 --> 00:53:31.760 align:start position:0%
a draggable object
 

00:53:31.760 --> 00:53:34.150 align:start position:0%
a draggable object
well<00:53:32.319><c> at</c><00:53:32.480><c> least</c><00:53:32.720><c> we</c><00:53:32.880><c> need</c><00:53:33.359><c> a</c><00:53:33.520><c> method</c><00:53:33.920><c> called</c>

00:53:34.150 --> 00:53:34.160 align:start position:0%
well at least we need a method called
 

00:53:34.160 --> 00:53:37.109 align:start position:0%
well at least we need a method called
drag<00:53:35.040><c> which</c><00:53:35.280><c> takes</c><00:53:35.520><c> no</c><00:53:35.760><c> arguments</c><00:53:36.640><c> and</c>

00:53:37.109 --> 00:53:37.119 align:start position:0%
drag which takes no arguments and
 

00:53:37.119 --> 00:53:39.510 align:start position:0%
drag which takes no arguments and
returns<00:53:37.839><c> void</c>

00:53:39.510 --> 00:53:39.520 align:start position:0%
returns void
 

00:53:39.520 --> 00:53:41.190 align:start position:0%
returns void
now<00:53:39.760><c> similarly</c><00:53:40.240><c> we're</c><00:53:40.400><c> going</c><00:53:40.480><c> to</c><00:53:40.559><c> define</c>

00:53:41.190 --> 00:53:41.200 align:start position:0%
now similarly we're going to define
 

00:53:41.200 --> 00:53:44.630 align:start position:0%
now similarly we're going to define
another<00:53:41.520><c> type</c><00:53:41.920><c> called</c><00:53:42.480><c> resizable</c>

00:53:44.630 --> 00:53:44.640 align:start position:0%
another type called resizable
 

00:53:44.640 --> 00:53:46.630 align:start position:0%
another type called resizable
and<00:53:44.800><c> here</c><00:53:44.960><c> we</c><00:53:45.040><c> need</c><00:53:45.280><c> a</c><00:53:45.359><c> resize</c><00:53:45.760><c> method</c><00:53:46.480><c> that</c>

00:53:46.630 --> 00:53:46.640 align:start position:0%
and here we need a resize method that
 

00:53:46.640 --> 00:53:49.030 align:start position:0%
and here we need a resize method that
should<00:53:46.800><c> take</c><00:53:47.359><c> two</c><00:53:47.599><c> parameters</c><00:53:48.160><c> like</c><00:53:48.400><c> the</c><00:53:48.800><c> new</c>

00:53:49.030 --> 00:53:49.040 align:start position:0%
should take two parameters like the new
 

00:53:49.040 --> 00:53:50.870 align:start position:0%
should take two parameters like the new
width<00:53:49.440><c> and</c><00:53:49.599><c> the</c><00:53:49.680><c> new</c><00:53:49.920><c> height</c><00:53:50.480><c> but</c><00:53:50.640><c> for</c>

00:53:50.870 --> 00:53:50.880 align:start position:0%
width and the new height but for
 

00:53:50.880 --> 00:53:52.710 align:start position:0%
width and the new height but for
simplicity<00:53:51.599><c> let's</c><00:53:51.839><c> get</c><00:53:52.000><c> rid</c><00:53:52.160><c> of</c><00:53:52.319><c> all</c><00:53:52.480><c> that</c>

00:53:52.710 --> 00:53:52.720 align:start position:0%
simplicity let's get rid of all that
 

00:53:52.720 --> 00:53:55.270 align:start position:0%
simplicity let's get rid of all that
noise<00:53:53.119><c> and</c><00:53:53.280><c> just</c><00:53:53.760><c> add</c><00:53:54.000><c> no</c><00:53:54.240><c> parameters</c><00:53:54.880><c> and</c><00:53:55.040><c> say</c>

00:53:55.270 --> 00:53:55.280 align:start position:0%
noise and just add no parameters and say
 

00:53:55.280 --> 00:53:58.630 align:start position:0%
noise and just add no parameters and say
this<00:53:55.680><c> method</c><00:53:56.079><c> returns</c><00:53:56.880><c> void</c><00:53:57.520><c> okay</c>

00:53:58.630 --> 00:53:58.640 align:start position:0%
this method returns void okay
 

00:53:58.640 --> 00:54:01.030 align:start position:0%
this method returns void okay
so<00:53:58.800><c> now</c><00:53:58.960><c> we</c><00:53:59.119><c> have</c><00:53:59.280><c> two</c><00:53:59.520><c> separate</c><00:53:59.920><c> types</c><00:54:00.640><c> and</c>

00:54:01.030 --> 00:54:01.040 align:start position:0%
so now we have two separate types and
 

00:54:01.040 --> 00:54:02.950 align:start position:0%
so now we have two separate types and
using<00:54:01.280><c> an</c><00:54:01.520><c> intersection</c><00:54:02.160><c> type</c><00:54:02.559><c> we</c><00:54:02.720><c> can</c>

00:54:02.950 --> 00:54:02.960 align:start position:0%
using an intersection type we can
 

00:54:02.960 --> 00:54:05.510 align:start position:0%
using an intersection type we can
combine<00:54:03.440><c> them</c><00:54:03.839><c> into</c><00:54:04.000><c> a</c><00:54:04.079><c> new</c><00:54:04.319><c> type</c><00:54:05.119><c> so</c><00:54:05.280><c> we</c><00:54:05.359><c> can</c>

00:54:05.510 --> 00:54:05.520 align:start position:0%
combine them into a new type so we can
 

00:54:05.520 --> 00:54:08.390 align:start position:0%
combine them into a new type so we can
define<00:54:05.839><c> a</c><00:54:05.920><c> new</c><00:54:06.160><c> type</c><00:54:06.400><c> called</c><00:54:06.960><c> ui</c><00:54:07.280><c> widget</c><00:54:08.160><c> which</c>

00:54:08.390 --> 00:54:08.400 align:start position:0%
define a new type called ui widget which
 

00:54:08.400 --> 00:54:12.390 align:start position:0%
define a new type called ui widget which
is<00:54:08.800><c> draggable</c><00:54:09.680><c> and</c><00:54:10.319><c> resizable</c><00:54:11.520><c> so</c><00:54:11.680><c> this</c><00:54:11.920><c> is</c><00:54:12.160><c> an</c>

00:54:12.390 --> 00:54:12.400 align:start position:0%
is draggable and resizable so this is an
 

00:54:12.400 --> 00:54:14.390 align:start position:0%
is draggable and resizable so this is an
intersection<00:54:13.040><c> type</c>

00:54:14.390 --> 00:54:14.400 align:start position:0%
intersection type
 

00:54:14.400 --> 00:54:15.910 align:start position:0%
intersection type
now<00:54:14.559><c> with</c><00:54:14.720><c> this</c><00:54:14.880><c> type</c><00:54:15.119><c> in</c><00:54:15.280><c> place</c><00:54:15.599><c> we</c><00:54:15.760><c> can</c>

00:54:15.910 --> 00:54:15.920 align:start position:0%
now with this type in place we can
 

00:54:15.920 --> 00:54:18.069 align:start position:0%
now with this type in place we can
declare<00:54:16.800><c> a</c><00:54:16.960><c> variable</c>

00:54:18.069 --> 00:54:18.079 align:start position:0%
declare a variable
 

00:54:18.079 --> 00:54:20.069 align:start position:0%
declare a variable
called<00:54:18.319><c> textbox</c>

00:54:20.069 --> 00:54:20.079 align:start position:0%
called textbox
 

00:54:20.079 --> 00:54:21.750 align:start position:0%
called textbox
which<00:54:20.319><c> is</c><00:54:20.400><c> a</c><00:54:20.480><c> ui</c><00:54:20.800><c> widget</c>

00:54:21.750 --> 00:54:21.760 align:start position:0%
which is a ui widget
 

00:54:21.760 --> 00:54:24.390 align:start position:0%
which is a ui widget
now<00:54:21.920><c> to</c><00:54:22.160><c> initialize</c><00:54:22.720><c> this</c><00:54:22.960><c> object</c><00:54:23.839><c> we</c><00:54:24.000><c> need</c><00:54:24.160><c> to</c>

00:54:24.390 --> 00:54:24.400 align:start position:0%
now to initialize this object we need to
 

00:54:24.400 --> 00:54:27.589 align:start position:0%
now to initialize this object we need to
implement<00:54:25.280><c> all</c><00:54:25.520><c> members</c><00:54:26.160><c> of</c><00:54:26.400><c> draggable</c><00:54:27.119><c> and</c>

00:54:27.589 --> 00:54:27.599 align:start position:0%
implement all members of draggable and
 

00:54:27.599 --> 00:54:29.670 align:start position:0%
implement all members of draggable and
resizable<00:54:28.400><c> objects</c><00:54:29.040><c> so</c><00:54:29.200><c> we</c><00:54:29.359><c> need</c><00:54:29.440><c> to</c>

00:54:29.670 --> 00:54:29.680 align:start position:0%
resizable objects so we need to
 

00:54:29.680 --> 00:54:32.630 align:start position:0%
resizable objects so we need to
implement<00:54:30.240><c> the</c><00:54:30.480><c> drag</c><00:54:31.040><c> and</c><00:54:31.200><c> resize</c><00:54:31.680><c> methods</c>

00:54:32.630 --> 00:54:32.640 align:start position:0%
implement the drag and resize methods
 

00:54:32.640 --> 00:54:34.230 align:start position:0%
implement the drag and resize methods
so

00:54:34.230 --> 00:54:34.240 align:start position:0%
so
 

00:54:34.240 --> 00:54:36.710 align:start position:0%
so
drag<00:54:34.960><c> as</c><00:54:35.119><c> a</c><00:54:35.200><c> simple</c><00:54:35.599><c> method</c>

00:54:36.710 --> 00:54:36.720 align:start position:0%
drag as a simple method
 

00:54:36.720 --> 00:54:39.910 align:start position:0%
drag as a simple method
and<00:54:36.960><c> so</c><00:54:37.200><c> is</c><00:54:37.760><c> the</c><00:54:37.920><c> resize</c><00:54:38.960><c> method</c>

00:54:39.910 --> 00:54:39.920 align:start position:0%
and so is the resize method
 

00:54:39.920 --> 00:54:44.780 align:start position:0%
and so is the resize method
so<00:54:40.079><c> this</c><00:54:40.319><c> is</c><00:54:40.400><c> type</c><00:54:40.720><c> intersection</c><00:54:41.359><c> in</c><00:54:41.599><c> action</c>

00:54:44.780 --> 00:54:44.790 align:start position:0%
 
 

00:54:44.790 --> 00:54:50.069 align:start position:0%
 
[Music]

00:54:50.069 --> 00:54:50.079 align:start position:0%
 
 

00:54:50.079 --> 00:54:52.069 align:start position:0%
 
sometimes<00:54:50.559><c> we</c><00:54:50.720><c> want</c><00:54:50.880><c> to</c><00:54:50.960><c> limit</c><00:54:51.280><c> the</c><00:54:51.440><c> values</c><00:54:51.920><c> we</c>

00:54:52.069 --> 00:54:52.079 align:start position:0%
sometimes we want to limit the values we
 

00:54:52.079 --> 00:54:53.990 align:start position:0%
sometimes we want to limit the values we
can<00:54:52.240><c> assign</c><00:54:52.559><c> to</c><00:54:52.640><c> a</c><00:54:52.799><c> variable</c><00:54:53.440><c> this</c><00:54:53.680><c> is</c><00:54:53.760><c> where</c>

00:54:53.990 --> 00:54:54.000 align:start position:0%
can assign to a variable this is where
 

00:54:54.000 --> 00:54:56.549 align:start position:0%
can assign to a variable this is where
we<00:54:54.160><c> use</c><00:54:54.400><c> literal</c><00:54:54.799><c> types</c><00:54:55.599><c> so</c><00:54:55.839><c> let's</c><00:54:56.000><c> declare</c><00:54:56.400><c> a</c>

00:54:56.549 --> 00:54:56.559 align:start position:0%
we use literal types so let's declare a
 

00:54:56.559 --> 00:54:59.270 align:start position:0%
we use literal types so let's declare a
variable<00:54:57.119><c> called</c><00:54:57.440><c> quantity</c><00:54:58.480><c> and</c><00:54:58.720><c> assume</c><00:54:59.119><c> that</c>

00:54:59.270 --> 00:54:59.280 align:start position:0%
variable called quantity and assume that
 

00:54:59.280 --> 00:55:02.710 align:start position:0%
variable called quantity and assume that
the<00:54:59.440><c> quantity</c><00:55:00.000><c> can</c><00:55:00.319><c> either</c><00:55:00.640><c> be</c><00:55:00.880><c> 50</c><00:55:01.359><c> or</c><00:55:01.920><c> 100</c><00:55:02.480><c> but</c>

00:55:02.710 --> 00:55:02.720 align:start position:0%
the quantity can either be 50 or 100 but
 

00:55:02.720 --> 00:55:05.109 align:start position:0%
the quantity can either be 50 or 100 but
nothing<00:55:03.040><c> else</c><00:55:03.760><c> now</c><00:55:03.920><c> here's</c><00:55:04.160><c> the</c><00:55:04.319><c> problem</c><00:55:04.960><c> if</c>

00:55:05.109 --> 00:55:05.119 align:start position:0%
nothing else now here's the problem if
 

00:55:05.119 --> 00:55:07.990 align:start position:0%
nothing else now here's the problem if
we<00:55:05.359><c> annotate</c><00:55:05.839><c> this</c><00:55:06.400><c> with</c><00:55:06.799><c> number</c>

00:55:07.990 --> 00:55:08.000 align:start position:0%
we annotate this with number
 

00:55:08.000 --> 00:55:10.069 align:start position:0%
we annotate this with number
this<00:55:08.160><c> can</c><00:55:08.400><c> take</c><00:55:08.720><c> any</c><00:55:08.880><c> numbers</c><00:55:09.440><c> any</c><00:55:09.760><c> valid</c>

00:55:10.069 --> 00:55:10.079 align:start position:0%
this can take any numbers any valid
 

00:55:10.079 --> 00:55:12.549 align:start position:0%
this can take any numbers any valid
numbers<00:55:10.400><c> in</c><00:55:10.480><c> javascript</c><00:55:11.200><c> right</c><00:55:11.839><c> so</c><00:55:12.079><c> to</c><00:55:12.240><c> limit</c>

00:55:12.549 --> 00:55:12.559 align:start position:0%
numbers in javascript right so to limit
 

00:55:12.559 --> 00:55:14.789 align:start position:0%
numbers in javascript right so to limit
the<00:55:12.720><c> values</c><00:55:13.040><c> we</c><00:55:13.200><c> can</c><00:55:13.359><c> use</c><00:55:13.599><c> here</c><00:55:14.079><c> we</c><00:55:14.240><c> use</c><00:55:14.559><c> a</c>

00:55:14.789 --> 00:55:14.799 align:start position:0%
the values we can use here we use a
 

00:55:14.799 --> 00:55:17.190 align:start position:0%
the values we can use here we use a
literal<00:55:15.200><c> type</c><00:55:15.839><c> so</c><00:55:16.079><c> instead</c><00:55:16.400><c> of</c><00:55:16.559><c> annotating</c>

00:55:17.190 --> 00:55:17.200 align:start position:0%
literal type so instead of annotating
 

00:55:17.200 --> 00:55:19.430 align:start position:0%
literal type so instead of annotating
this<00:55:17.599><c> with</c><00:55:17.760><c> the</c><00:55:17.920><c> type</c><00:55:18.240><c> like</c><00:55:18.480><c> number</c>

00:55:19.430 --> 00:55:19.440 align:start position:0%
this with the type like number
 

00:55:19.440 --> 00:55:22.390 align:start position:0%
this with the type like number
will<00:55:19.680><c> annotate</c><00:55:20.319><c> it</c><00:55:20.720><c> with</c><00:55:20.960><c> a</c><00:55:21.119><c> literal</c><00:55:21.680><c> meaning</c>

00:55:22.390 --> 00:55:22.400 align:start position:0%
will annotate it with a literal meaning
 

00:55:22.400 --> 00:55:25.430 align:start position:0%
will annotate it with a literal meaning
an<00:55:22.559><c> exact</c><00:55:23.119><c> or</c><00:55:23.680><c> specific</c><00:55:24.400><c> value</c>

00:55:25.430 --> 00:55:25.440 align:start position:0%
an exact or specific value
 

00:55:25.440 --> 00:55:26.390 align:start position:0%
an exact or specific value
so

00:55:26.390 --> 00:55:26.400 align:start position:0%
so
 

00:55:26.400 --> 00:55:29.109 align:start position:0%
so
i'm<00:55:26.640><c> going</c><00:55:26.720><c> to</c><00:55:26.799><c> replace</c><00:55:27.200><c> number</c><00:55:27.599><c> with</c><00:55:28.000><c> 50.</c>

00:55:29.109 --> 00:55:29.119 align:start position:0%
i'm going to replace number with 50.
 

00:55:29.119 --> 00:55:31.430 align:start position:0%
i'm going to replace number with 50.
now<00:55:29.440><c> quantity</c><00:55:29.920><c> can</c><00:55:30.160><c> only</c><00:55:30.400><c> be</c><00:55:30.559><c> set</c><00:55:30.799><c> to</c><00:55:30.960><c> 50</c>

00:55:31.430 --> 00:55:31.440 align:start position:0%
now quantity can only be set to 50
 

00:55:31.440 --> 00:55:33.829 align:start position:0%
now quantity can only be set to 50
nothing<00:55:31.839><c> else</c><00:55:32.160><c> so</c><00:55:32.319><c> if</c><00:55:32.480><c> you</c><00:55:32.559><c> set</c><00:55:32.720><c> it</c><00:55:32.799><c> to</c><00:55:32.960><c> 51</c><00:55:33.760><c> you</c>

00:55:33.829 --> 00:55:33.839 align:start position:0%
nothing else so if you set it to 51 you
 

00:55:33.839 --> 00:55:35.670 align:start position:0%
nothing else so if you set it to 51 you
get<00:55:34.000><c> a</c><00:55:34.079><c> compilation</c><00:55:34.640><c> error</c><00:55:35.200><c> now</c><00:55:35.359><c> you</c><00:55:35.520><c> might</c>

00:55:35.670 --> 00:55:35.680 align:start position:0%
get a compilation error now you might
 

00:55:35.680 --> 00:55:37.349 align:start position:0%
get a compilation error now you might
think<00:55:35.839><c> this</c><00:55:36.000><c> is</c><00:55:36.160><c> not</c><00:55:36.319><c> useful</c><00:55:36.799><c> well</c><00:55:37.119><c> that's</c>

00:55:37.349 --> 00:55:37.359 align:start position:0%
think this is not useful well that's
 

00:55:37.359 --> 00:55:39.510 align:start position:0%
think this is not useful well that's
true<00:55:37.839><c> but</c><00:55:38.079><c> what</c><00:55:38.240><c> if</c><00:55:38.400><c> we</c><00:55:38.559><c> apply</c><00:55:38.880><c> the</c><00:55:39.040><c> union</c>

00:55:39.510 --> 00:55:39.520 align:start position:0%
true but what if we apply the union
 

00:55:39.520 --> 00:55:42.390 align:start position:0%
true but what if we apply the union
operator<00:55:40.000><c> here</c><00:55:40.480><c> so</c><00:55:40.720><c> we</c><00:55:40.799><c> can</c><00:55:41.040><c> say</c><00:55:41.520><c> the</c><00:55:41.760><c> quantity</c>

00:55:42.390 --> 00:55:42.400 align:start position:0%
operator here so we can say the quantity
 

00:55:42.400 --> 00:55:45.990 align:start position:0%
operator here so we can say the quantity
can<00:55:42.640><c> be</c><00:55:42.880><c> 50</c><00:55:43.440><c> or</c><00:55:44.079><c> 100.</c><00:55:45.119><c> now</c><00:55:45.359><c> we</c><00:55:45.440><c> can</c><00:55:45.599><c> set</c><00:55:45.760><c> it</c><00:55:45.839><c> to</c>

00:55:45.990 --> 00:55:46.000 align:start position:0%
can be 50 or 100. now we can set it to
 

00:55:46.000 --> 00:55:50.069 align:start position:0%
can be 50 or 100. now we can set it to
50<00:55:46.960><c> or</c><00:55:47.680><c> 100</c><00:55:48.319><c> right</c><00:55:48.880><c> but</c><00:55:49.119><c> we're</c><00:55:49.359><c> not</c><00:55:49.520><c> done</c><00:55:49.680><c> yet</c>

00:55:50.069 --> 00:55:50.079 align:start position:0%
50 or 100 right but we're not done yet
 

00:55:50.079 --> 00:55:52.309 align:start position:0%
50 or 100 right but we're not done yet
we<00:55:50.160><c> can</c><00:55:50.319><c> make</c><00:55:50.559><c> this</c><00:55:50.720><c> code</c><00:55:50.960><c> even</c><00:55:51.200><c> better</c><00:55:52.000><c> so</c>

00:55:52.309 --> 00:55:52.319 align:start position:0%
we can make this code even better so
 

00:55:52.319 --> 00:55:54.630 align:start position:0%
we can make this code even better so
instead<00:55:52.640><c> of</c><00:55:52.880><c> hard</c><00:55:53.200><c> coding</c><00:55:53.920><c> these</c><00:55:54.240><c> literal</c>

00:55:54.630 --> 00:55:54.640 align:start position:0%
instead of hard coding these literal
 

00:55:54.640 --> 00:55:57.109 align:start position:0%
instead of hard coding these literal
values<00:55:55.040><c> here</c><00:55:55.520><c> we</c><00:55:55.680><c> can</c><00:55:55.839><c> create</c><00:55:56.160><c> a</c><00:55:56.240><c> custom</c><00:55:56.720><c> type</c>

00:55:57.109 --> 00:55:57.119 align:start position:0%
values here we can create a custom type
 

00:55:57.119 --> 00:55:59.589 align:start position:0%
values here we can create a custom type
using<00:55:57.359><c> a</c><00:55:57.440><c> type</c><00:55:57.680><c> alias</c><00:55:58.559><c> so</c><00:55:58.799><c> we</c><00:55:58.960><c> define</c><00:55:59.359><c> a</c><00:55:59.440><c> new</c>

00:55:59.589 --> 00:55:59.599 align:start position:0%
using a type alias so we define a new
 

00:55:59.599 --> 00:56:01.430 align:start position:0%
using a type alias so we define a new
type<00:55:59.920><c> called</c><00:56:00.319><c> quantity</c>

00:56:01.430 --> 00:56:01.440 align:start position:0%
type called quantity
 

00:56:01.440 --> 00:56:05.670 align:start position:0%
type called quantity
which<00:56:01.680><c> can</c><00:56:02.000><c> be</c><00:56:02.480><c> 50</c><00:56:03.200><c> or</c><00:56:03.839><c> 100</c><00:56:04.799><c> and</c><00:56:04.960><c> then</c><00:56:05.359><c> we</c>

00:56:05.670 --> 00:56:05.680 align:start position:0%
which can be 50 or 100 and then we
 

00:56:05.680 --> 00:56:08.789 align:start position:0%
which can be 50 or 100 and then we
annotate<00:56:06.559><c> our</c><00:56:06.720><c> variable</c><00:56:07.200><c> with</c><00:56:07.520><c> our</c><00:56:07.680><c> new</c><00:56:07.920><c> type</c>

00:56:08.789 --> 00:56:08.799 align:start position:0%
annotate our variable with our new type
 

00:56:08.799 --> 00:56:10.870 align:start position:0%
annotate our variable with our new type
so<00:56:09.040><c> what</c><00:56:09.200><c> we</c><00:56:09.280><c> have</c><00:56:09.440><c> over</c><00:56:09.680><c> here</c><00:56:09.920><c> is</c><00:56:10.160><c> called</c><00:56:10.720><c> a</c>

00:56:10.870 --> 00:56:10.880 align:start position:0%
so what we have over here is called a
 

00:56:10.880 --> 00:56:12.150 align:start position:0%
so what we have over here is called a
literal<00:56:11.359><c> type</c>

00:56:12.150 --> 00:56:12.160 align:start position:0%
literal type
 

00:56:12.160 --> 00:56:13.910 align:start position:0%
literal type
now<00:56:12.400><c> literals</c><00:56:12.880><c> don't</c><00:56:13.040><c> have</c><00:56:13.200><c> to</c><00:56:13.280><c> be</c><00:56:13.440><c> numbers</c>

00:56:13.910 --> 00:56:13.920 align:start position:0%
now literals don't have to be numbers
 

00:56:13.920 --> 00:56:16.069 align:start position:0%
now literals don't have to be numbers
they<00:56:14.000><c> can</c><00:56:14.240><c> also</c><00:56:14.480><c> be</c><00:56:14.720><c> strings</c><00:56:15.440><c> for</c><00:56:15.599><c> example</c><00:56:16.000><c> we</c>

00:56:16.069 --> 00:56:16.079 align:start position:0%
they can also be strings for example we
 

00:56:16.079 --> 00:56:18.630 align:start position:0%
they can also be strings for example we
can<00:56:16.240><c> define</c><00:56:16.720><c> a</c><00:56:16.799><c> new</c><00:56:17.040><c> type</c><00:56:17.359><c> called</c><00:56:17.680><c> metric</c>

00:56:18.630 --> 00:56:18.640 align:start position:0%
can define a new type called metric
 

00:56:18.640 --> 00:56:21.270 align:start position:0%
can define a new type called metric
which<00:56:18.799><c> can</c><00:56:19.040><c> be</c><00:56:19.440><c> centimeter</c><00:56:20.480><c> or</c>

00:56:21.270 --> 00:56:21.280 align:start position:0%
which can be centimeter or
 

00:56:21.280 --> 00:56:22.710 align:start position:0%
which can be centimeter or
inch

00:56:22.710 --> 00:56:22.720 align:start position:0%
inch
 

00:56:22.720 --> 00:56:23.670 align:start position:0%
inch
okay

00:56:23.670 --> 00:56:23.680 align:start position:0%
okay
 

00:56:23.680 --> 00:56:25.910 align:start position:0%
okay
so<00:56:23.839><c> that's</c><00:56:24.160><c> all</c><00:56:24.319><c> about</c><00:56:24.559><c> literal</c><00:56:24.960><c> types</c><00:56:25.680><c> next</c>

00:56:25.910 --> 00:56:25.920 align:start position:0%
so that's all about literal types next
 

00:56:25.920 --> 00:56:30.490 align:start position:0%
so that's all about literal types next
we're<00:56:26.079><c> going</c><00:56:26.160><c> to</c><00:56:26.240><c> talk</c><00:56:26.480><c> about</c><00:56:26.960><c> nullable</c><00:56:27.359><c> types</c>

00:56:30.490 --> 00:56:30.500 align:start position:0%
 
 

00:56:30.500 --> 00:56:35.750 align:start position:0%
 
[Music]

00:56:35.750 --> 00:56:35.760 align:start position:0%
 
 

00:56:35.760 --> 00:56:37.270 align:start position:0%
 
all<00:56:35.920><c> right</c><00:56:36.079><c> let's</c><00:56:36.240><c> talk</c><00:56:36.480><c> about</c><00:56:36.720><c> working</c><00:56:37.040><c> with</c>

00:56:37.270 --> 00:56:37.280 align:start position:0%
all right let's talk about working with
 

00:56:37.280 --> 00:56:40.230 align:start position:0%
all right let's talk about working with
null<00:56:37.599><c> values</c><00:56:38.400><c> so</c><00:56:38.720><c> by</c><00:56:38.880><c> default</c><00:56:39.520><c> typescript</c><00:56:40.079><c> is</c>

00:56:40.230 --> 00:56:40.240 align:start position:0%
null values so by default typescript is
 

00:56:40.240 --> 00:56:42.150 align:start position:0%
null values so by default typescript is
very<00:56:40.480><c> strict</c><00:56:40.799><c> about</c><00:56:41.040><c> using</c><00:56:41.440><c> null</c><00:56:41.839><c> and</c>

00:56:42.150 --> 00:56:42.160 align:start position:0%
very strict about using null and
 

00:56:42.160 --> 00:56:44.390 align:start position:0%
very strict about using null and
undefined<00:56:42.720><c> values</c><00:56:43.359><c> because</c><00:56:43.680><c> as</c><00:56:43.839><c> you</c><00:56:44.079><c> probably</c>

00:56:44.390 --> 00:56:44.400 align:start position:0%
undefined values because as you probably
 

00:56:44.400 --> 00:56:46.789 align:start position:0%
undefined values because as you probably
know<00:56:44.799><c> these</c><00:56:45.200><c> values</c><00:56:45.760><c> are</c><00:56:46.000><c> common</c><00:56:46.319><c> source</c><00:56:46.640><c> of</c>

00:56:46.789 --> 00:56:46.799 align:start position:0%
know these values are common source of
 

00:56:46.799 --> 00:56:48.549 align:start position:0%
know these values are common source of
bugs<00:56:47.119><c> in</c><00:56:47.200><c> their</c><00:56:47.359><c> applications</c>

00:56:48.549 --> 00:56:48.559 align:start position:0%
bugs in their applications
 

00:56:48.559 --> 00:56:50.309 align:start position:0%
bugs in their applications
so<00:56:48.720><c> let's</c><00:56:48.960><c> look</c><00:56:49.119><c> at</c><00:56:49.200><c> a</c><00:56:49.280><c> real</c><00:56:49.520><c> example</c><00:56:50.160><c> let's</c>

00:56:50.309 --> 00:56:50.319 align:start position:0%
so let's look at a real example let's
 

00:56:50.319 --> 00:56:51.750 align:start position:0%
so let's look at a real example let's
define<00:56:50.720><c> a</c><00:56:50.799><c> function</c>

00:56:51.750 --> 00:56:51.760 align:start position:0%
define a function
 

00:56:51.760 --> 00:56:54.069 align:start position:0%
define a function
called<00:56:52.000><c> greet</c><00:56:52.720><c> that</c><00:56:52.880><c> takes</c><00:56:53.119><c> a</c><00:56:53.280><c> name</c><00:56:53.760><c> which</c><00:56:54.000><c> is</c>

00:56:54.069 --> 00:56:54.079 align:start position:0%
called greet that takes a name which is
 

00:56:54.079 --> 00:56:55.349 align:start position:0%
called greet that takes a name which is
a<00:56:54.319><c> string</c>

00:56:55.349 --> 00:56:55.359 align:start position:0%
a string
 

00:56:55.359 --> 00:56:56.789 align:start position:0%
a string
now<00:56:55.520><c> in</c><00:56:55.599><c> this</c><00:56:55.839><c> function</c><00:56:56.160><c> we</c><00:56:56.319><c> just</c><00:56:56.480><c> want</c><00:56:56.640><c> to</c><00:56:56.720><c> do</c>

00:56:56.789 --> 00:56:56.799 align:start position:0%
now in this function we just want to do
 

00:56:56.799 --> 00:57:00.309 align:start position:0%
now in this function we just want to do
a<00:56:56.960><c> console.log</c><00:56:57.760><c> and</c><00:56:57.920><c> print</c><00:56:58.720><c> name</c><00:56:59.280><c> the</c><00:56:59.599><c> to</c>

00:57:00.309 --> 00:57:00.319 align:start position:0%
a console.log and print name the to
 

00:57:00.319 --> 00:57:01.829 align:start position:0%
a console.log and print name the to
uppercase

00:57:01.829 --> 00:57:01.839 align:start position:0%
uppercase
 

00:57:01.839 --> 00:57:04.390 align:start position:0%
uppercase
now<00:57:02.240><c> in</c><00:57:02.480><c> vanilla</c><00:57:02.880><c> javascript</c><00:57:03.839><c> we</c><00:57:04.000><c> can</c><00:57:04.240><c> call</c>

00:57:04.390 --> 00:57:04.400 align:start position:0%
now in vanilla javascript we can call
 

00:57:04.400 --> 00:57:06.789 align:start position:0%
now in vanilla javascript we can call
this<00:57:04.640><c> function</c><00:57:05.520><c> and</c><00:57:05.839><c> accidentally</c><00:57:06.400><c> give</c><00:57:06.559><c> it</c>

00:57:06.789 --> 00:57:06.799 align:start position:0%
this function and accidentally give it
 

00:57:06.799 --> 00:57:09.349 align:start position:0%
this function and accidentally give it
null<00:57:07.280><c> or</c><00:57:07.599><c> undefined</c><00:57:08.240><c> that</c><00:57:08.400><c> is</c><00:57:08.559><c> totally</c><00:57:09.040><c> valid</c>

00:57:09.349 --> 00:57:09.359 align:start position:0%
null or undefined that is totally valid
 

00:57:09.359 --> 00:57:11.589 align:start position:0%
null or undefined that is totally valid
javascript<00:57:09.920><c> code</c><00:57:10.720><c> but</c><00:57:10.880><c> when</c><00:57:11.040><c> we</c><00:57:11.200><c> run</c><00:57:11.440><c> our</c>

00:57:11.589 --> 00:57:11.599 align:start position:0%
javascript code but when we run our
 

00:57:11.599 --> 00:57:13.750 align:start position:0%
javascript code but when we run our
program<00:57:12.079><c> our</c><00:57:12.240><c> program</c><00:57:12.640><c> is</c><00:57:12.720><c> going</c><00:57:12.880><c> to</c><00:57:12.960><c> crash</c>

00:57:13.750 --> 00:57:13.760 align:start position:0%
program our program is going to crash
 

00:57:13.760 --> 00:57:16.549 align:start position:0%
program our program is going to crash
because<00:57:14.079><c> we</c><00:57:14.160><c> cannot</c><00:57:14.480><c> call</c><00:57:15.119><c> this</c><00:57:15.359><c> method</c><00:57:16.160><c> on</c><00:57:16.400><c> a</c>

00:57:16.549 --> 00:57:16.559 align:start position:0%
because we cannot call this method on a
 

00:57:16.559 --> 00:57:19.270 align:start position:0%
because we cannot call this method on a
null<00:57:17.119><c> or</c><00:57:17.280><c> an</c><00:57:17.520><c> undefined</c><00:57:18.160><c> object</c><00:57:18.799><c> so</c><00:57:18.960><c> this</c><00:57:19.200><c> is</c>

00:57:19.270 --> 00:57:19.280 align:start position:0%
null or an undefined object so this is
 

00:57:19.280 --> 00:57:21.750 align:start position:0%
null or an undefined object so this is
why<00:57:19.920><c> null</c><00:57:20.319><c> and</c><00:57:20.480><c> undefined</c><00:57:21.040><c> values</c><00:57:21.440><c> are</c><00:57:21.599><c> a</c>

00:57:21.750 --> 00:57:21.760 align:start position:0%
why null and undefined values are a
 

00:57:21.760 --> 00:57:24.309 align:start position:0%
why null and undefined values are a
common<00:57:22.079><c> source</c><00:57:22.319><c> of</c><00:57:22.480><c> problems</c><00:57:23.359><c> and</c><00:57:23.520><c> that's</c><00:57:23.760><c> why</c>

00:57:24.309 --> 00:57:24.319 align:start position:0%
common source of problems and that's why
 

00:57:24.319 --> 00:57:26.789 align:start position:0%
common source of problems and that's why
by<00:57:24.480><c> default</c><00:57:25.119><c> the</c><00:57:25.359><c> typescript</c><00:57:25.839><c> compiler</c><00:57:26.319><c> stops</c>

00:57:26.789 --> 00:57:26.799 align:start position:0%
by default the typescript compiler stops
 

00:57:26.799 --> 00:57:29.750 align:start position:0%
by default the typescript compiler stops
us<00:57:27.119><c> from</c><00:57:27.280><c> using</c><00:57:27.680><c> null</c><00:57:28.079><c> or</c><00:57:28.400><c> undefined</c><00:57:28.960><c> values</c>

00:57:29.750 --> 00:57:29.760 align:start position:0%
us from using null or undefined values
 

00:57:29.760 --> 00:57:31.829 align:start position:0%
us from using null or undefined values
so<00:57:29.920><c> here</c><00:57:30.079><c> we</c><00:57:30.240><c> have</c><00:57:30.400><c> an</c><00:57:30.559><c> error</c><00:57:30.720><c> saying</c><00:57:31.359><c> argument</c>

00:57:31.829 --> 00:57:31.839 align:start position:0%
so here we have an error saying argument
 

00:57:31.839 --> 00:57:34.150 align:start position:0%
so here we have an error saying argument
of<00:57:32.000><c> type</c><00:57:32.319><c> null</c><00:57:32.880><c> is</c><00:57:33.040><c> not</c><00:57:33.280><c> assignable</c><00:57:33.920><c> to</c>

00:57:34.150 --> 00:57:34.160 align:start position:0%
of type null is not assignable to
 

00:57:34.160 --> 00:57:36.150 align:start position:0%
of type null is not assignable to
parameter<00:57:34.799><c> of</c><00:57:34.960><c> type</c><00:57:35.280><c> string</c>

00:57:36.150 --> 00:57:36.160 align:start position:0%
parameter of type string
 

00:57:36.160 --> 00:57:38.309 align:start position:0%
parameter of type string
let<00:57:36.319><c> me</c><00:57:36.480><c> show</c><00:57:36.640><c> you</c><00:57:36.799><c> where</c><00:57:37.040><c> this</c><00:57:37.200><c> comes</c><00:57:37.440><c> from</c>

00:57:38.309 --> 00:57:38.319 align:start position:0%
let me show you where this comes from
 

00:57:38.319 --> 00:57:41.670 align:start position:0%
let me show you where this comes from
so<00:57:38.640><c> let's</c><00:57:38.799><c> go</c><00:57:38.960><c> to</c><00:57:39.119><c> our</c><00:57:39.520><c> ts</c><00:57:39.920><c> config</c><00:57:40.319><c> file</c>

00:57:41.670 --> 00:57:41.680 align:start position:0%
so let's go to our ts config file
 

00:57:41.680 --> 00:57:43.510 align:start position:0%
so let's go to our ts config file
in<00:57:41.760><c> the</c><00:57:41.920><c> type</c><00:57:42.160><c> checking</c><00:57:42.480><c> section</c>

00:57:43.510 --> 00:57:43.520 align:start position:0%
in the type checking section
 

00:57:43.520 --> 00:57:46.309 align:start position:0%
in the type checking section
we<00:57:43.680><c> have</c><00:57:43.839><c> a</c><00:57:43.920><c> compiler</c><00:57:44.400><c> option</c><00:57:44.799><c> called</c><00:57:45.440><c> strict</c>

00:57:46.309 --> 00:57:46.319 align:start position:0%
we have a compiler option called strict
 

00:57:46.319 --> 00:57:48.630 align:start position:0%
we have a compiler option called strict
null<00:57:46.640><c> checks</c><00:57:47.359><c> that</c><00:57:47.599><c> this</c><00:57:47.760><c> is</c><00:57:47.920><c> enabled</c><00:57:48.480><c> by</c>

00:57:48.630 --> 00:57:48.640 align:start position:0%
null checks that this is enabled by
 

00:57:48.640 --> 00:57:51.910 align:start position:0%
null checks that this is enabled by
default<00:57:49.359><c> as</c><00:57:49.680><c> part</c><00:57:49.920><c> of</c><00:57:50.400><c> the</c><00:57:50.640><c> strict</c><00:57:51.040><c> option</c>

00:57:51.910 --> 00:57:51.920 align:start position:0%
default as part of the strict option
 

00:57:51.920 --> 00:57:54.390 align:start position:0%
default as part of the strict option
so<00:57:52.079><c> if</c><00:57:52.319><c> strict</c><00:57:52.640><c> is</c><00:57:52.720><c> set</c><00:57:52.960><c> to</c><00:57:53.119><c> true</c><00:57:53.839><c> strict</c><00:57:54.160><c> null</c>

00:57:54.390 --> 00:57:54.400 align:start position:0%
so if strict is set to true strict null
 

00:57:54.400 --> 00:57:56.950 align:start position:0%
so if strict is set to true strict null
checks<00:57:54.720><c> is</c><00:57:54.880><c> also</c><00:57:55.280><c> true</c><00:57:55.760><c> but</c><00:57:55.920><c> we</c><00:57:56.079><c> can</c><00:57:56.400><c> overwrite</c>

00:57:56.950 --> 00:57:56.960 align:start position:0%
checks is also true but we can overwrite
 

00:57:56.960 --> 00:58:00.069 align:start position:0%
checks is also true but we can overwrite
it<00:57:57.119><c> and</c><00:57:57.599><c> turn</c><00:57:57.920><c> off</c><00:57:58.079><c> this</c><00:57:58.240><c> feature</c>

00:58:00.069 --> 00:58:00.079 align:start position:0%
it and turn off this feature
 

00:58:00.079 --> 00:58:00.870 align:start position:0%
it and turn off this feature
now

00:58:00.870 --> 00:58:00.880 align:start position:0%
now
 

00:58:00.880 --> 00:58:03.829 align:start position:0%
now
back<00:58:01.040><c> to</c><00:58:01.200><c> index.ts</c><00:58:02.480><c> the</c><00:58:02.640><c> error</c><00:58:02.960><c> is</c><00:58:03.040><c> gone</c><00:58:03.680><c> so</c>

00:58:03.829 --> 00:58:03.839 align:start position:0%
back to index.ts the error is gone so
 

00:58:03.839 --> 00:58:06.150 align:start position:0%
back to index.ts the error is gone so
this<00:58:04.079><c> is</c><00:58:04.160><c> why</c><00:58:04.640><c> by</c><00:58:04.799><c> default</c><00:58:05.520><c> typescript</c><00:58:06.079><c> is</c>

00:58:06.150 --> 00:58:06.160 align:start position:0%
this is why by default typescript is
 

00:58:06.160 --> 00:58:08.549 align:start position:0%
this is why by default typescript is
very<00:58:06.400><c> strict</c><00:58:06.720><c> about</c><00:58:06.960><c> using</c><00:58:07.200><c> null</c><00:58:07.440><c> values</c>

00:58:08.549 --> 00:58:08.559 align:start position:0%
very strict about using null values
 

00:58:08.559 --> 00:58:10.230 align:start position:0%
very strict about using null values
so<00:58:08.720><c> technically</c><00:58:09.200><c> we</c><00:58:09.280><c> should</c><00:58:09.520><c> never</c><00:58:09.839><c> use</c><00:58:10.000><c> this</c>

00:58:10.230 --> 00:58:10.240 align:start position:0%
so technically we should never use this
 

00:58:10.240 --> 00:58:12.309 align:start position:0%
so technically we should never use this
option<00:58:10.559><c> we</c><00:58:10.720><c> should</c><00:58:10.880><c> never</c><00:58:11.280><c> turn</c><00:58:11.599><c> it</c><00:58:11.760><c> off</c><00:58:12.160><c> so</c>

00:58:12.309 --> 00:58:12.319 align:start position:0%
option we should never turn it off so
 

00:58:12.319 --> 00:58:14.069 align:start position:0%
option we should never turn it off so
i'm<00:58:12.480><c> going</c><00:58:12.559><c> to</c><00:58:12.640><c> rewrite</c><00:58:12.960><c> this</c><00:58:13.119><c> back</c>

00:58:14.069 --> 00:58:14.079 align:start position:0%
i'm going to rewrite this back
 

00:58:14.079 --> 00:58:16.870 align:start position:0%
i'm going to rewrite this back
but<00:58:14.480><c> what</c><00:58:14.720><c> can</c><00:58:14.880><c> we</c><00:58:15.119><c> do</c><00:58:15.599><c> in</c><00:58:15.760><c> this</c><00:58:15.920><c> function</c><00:58:16.640><c> what</c>

00:58:16.870 --> 00:58:16.880 align:start position:0%
but what can we do in this function what
 

00:58:16.880 --> 00:58:18.870 align:start position:0%
but what can we do in this function what
if<00:58:17.040><c> we</c><00:58:17.200><c> want</c><00:58:17.280><c> to</c><00:58:17.359><c> have</c><00:58:17.599><c> the</c><00:58:17.760><c> ability</c><00:58:18.400><c> to</c><00:58:18.559><c> use</c><00:58:18.799><c> a</c>

00:58:18.870 --> 00:58:18.880 align:start position:0%
if we want to have the ability to use a
 

00:58:18.880 --> 00:58:21.109 align:start position:0%
if we want to have the ability to use a
null<00:58:19.200><c> value</c><00:58:19.839><c> perhaps</c><00:58:20.319><c> if</c><00:58:20.400><c> we</c><00:58:20.640><c> don't</c><00:58:20.799><c> have</c><00:58:21.040><c> a</c>

00:58:21.109 --> 00:58:21.119 align:start position:0%
null value perhaps if we don't have a
 

00:58:21.119 --> 00:58:23.190 align:start position:0%
null value perhaps if we don't have a
name<00:58:21.599><c> you</c><00:58:21.760><c> want</c><00:58:21.920><c> to</c><00:58:22.000><c> print</c><00:58:22.480><c> just</c><00:58:22.720><c> a</c><00:58:22.799><c> generic</c>

00:58:23.190 --> 00:58:23.200 align:start position:0%
name you want to print just a generic
 

00:58:23.200 --> 00:58:25.430 align:start position:0%
name you want to print just a generic
message<00:58:23.599><c> like</c><00:58:24.079><c> hola</c><00:58:24.720><c> meaning</c><00:58:25.119><c> high</c><00:58:25.359><c> in</c>

00:58:25.430 --> 00:58:25.440 align:start position:0%
message like hola meaning high in
 

00:58:25.440 --> 00:58:26.470 align:start position:0%
message like hola meaning high in
spanish

00:58:26.470 --> 00:58:26.480 align:start position:0%
spanish
 

00:58:26.480 --> 00:58:29.589 align:start position:0%
spanish
so<00:58:26.799><c> here</c><00:58:27.040><c> we</c><00:58:27.119><c> can</c><00:58:27.359><c> say</c><00:58:28.000><c> if</c><00:58:28.240><c> name</c><00:58:28.720><c> is</c><00:58:28.960><c> truthy</c>

00:58:29.589 --> 00:58:29.599 align:start position:0%
so here we can say if name is truthy
 

00:58:29.599 --> 00:58:31.670 align:start position:0%
so here we can say if name is truthy
meaning<00:58:29.920><c> it</c><00:58:30.000><c> has</c><00:58:30.240><c> a</c><00:58:30.319><c> value</c><00:58:31.119><c> then</c><00:58:31.359><c> we're</c><00:58:31.520><c> going</c>

00:58:31.670 --> 00:58:31.680 align:start position:0%
meaning it has a value then we're going
 

00:58:31.680 --> 00:58:35.670 align:start position:0%
meaning it has a value then we're going
to<00:58:31.760><c> print</c><00:58:32.400><c> name.to</c><00:58:33.040><c> uppercase</c><00:58:34.079><c> otherwise</c>

00:58:35.670 --> 00:58:35.680 align:start position:0%
to print name.to uppercase otherwise
 

00:58:35.680 --> 00:58:37.910 align:start position:0%
to print name.to uppercase otherwise
if<00:58:35.839><c> it's</c><00:58:36.079><c> null</c><00:58:36.319><c> or</c><00:58:36.559><c> undefined</c><00:58:37.520><c> we're</c><00:58:37.680><c> gonna</c>

00:58:37.910 --> 00:58:37.920 align:start position:0%
if it's null or undefined we're gonna
 

00:58:37.920 --> 00:58:40.309 align:start position:0%
if it's null or undefined we're gonna
print<00:58:38.640><c> hola</c><00:58:39.520><c> okay</c>

00:58:40.309 --> 00:58:40.319 align:start position:0%
print hola okay
 

00:58:40.319 --> 00:58:42.549 align:start position:0%
print hola okay
but<00:58:40.559><c> we</c><00:58:40.640><c> cannot</c><00:58:40.960><c> pass</c><00:58:41.200><c> a</c><00:58:41.280><c> null</c><00:58:41.520><c> value</c><00:58:41.839><c> here</c>

00:58:42.549 --> 00:58:42.559 align:start position:0%
but we cannot pass a null value here
 

00:58:42.559 --> 00:58:44.950 align:start position:0%
but we cannot pass a null value here
this<00:58:42.720><c> is</c><00:58:42.880><c> where</c><00:58:43.440><c> we</c><00:58:43.680><c> use</c><00:58:44.000><c> a</c><00:58:44.160><c> union</c><00:58:44.480><c> type</c><00:58:44.720><c> once</c>

00:58:44.950 --> 00:58:44.960 align:start position:0%
this is where we use a union type once
 

00:58:44.960 --> 00:58:45.829 align:start position:0%
this is where we use a union type once
again

00:58:45.829 --> 00:58:45.839 align:start position:0%
again
 

00:58:45.839 --> 00:58:48.069 align:start position:0%
again
so<00:58:46.160><c> we</c><00:58:46.400><c> annotate</c><00:58:46.880><c> this</c><00:58:47.119><c> parameter</c><00:58:47.680><c> with</c>

00:58:48.069 --> 00:58:48.079 align:start position:0%
so we annotate this parameter with
 

00:58:48.079 --> 00:58:49.510 align:start position:0%
so we annotate this parameter with
string<00:58:48.720><c> or</c>

00:58:49.510 --> 00:58:49.520 align:start position:0%
string or
 

00:58:49.520 --> 00:58:50.390 align:start position:0%
string or
no

00:58:50.390 --> 00:58:50.400 align:start position:0%
no
 

00:58:50.400 --> 00:58:52.390 align:start position:0%
no
now<00:58:50.640><c> we</c><00:58:50.720><c> can</c><00:58:50.880><c> pass</c><00:58:51.119><c> a</c><00:58:51.280><c> null</c><00:58:51.520><c> value</c><00:58:52.160><c> but</c><00:58:52.319><c> we</c>

00:58:52.390 --> 00:58:52.400 align:start position:0%
now we can pass a null value but we
 

00:58:52.400 --> 00:58:54.309 align:start position:0%
now we can pass a null value but we
cannot<00:58:52.720><c> pass</c><00:58:53.040><c> undefined</c>

00:58:54.309 --> 00:58:54.319 align:start position:0%
cannot pass undefined
 

00:58:54.319 --> 00:58:56.549 align:start position:0%
cannot pass undefined
because<00:58:54.640><c> this</c><00:58:54.799><c> is</c><00:58:54.880><c> not</c><00:58:55.040><c> a</c><00:58:55.200><c> valid</c><00:58:55.599><c> value</c><00:58:56.400><c> for</c>

00:58:56.549 --> 00:58:56.559 align:start position:0%
because this is not a valid value for
 

00:58:56.559 --> 00:58:58.390 align:start position:0%
because this is not a valid value for
this<00:58:56.720><c> parameter</c><00:58:57.599><c> so</c><00:58:57.839><c> if</c><00:58:57.920><c> you</c><00:58:58.000><c> want</c><00:58:58.160><c> to</c><00:58:58.240><c> have</c>

00:58:58.390 --> 00:58:58.400 align:start position:0%
this parameter so if you want to have
 

00:58:58.400 --> 00:59:01.510 align:start position:0%
this parameter so if you want to have
the<00:58:58.559><c> ability</c><00:58:58.960><c> to</c><00:58:59.119><c> pass</c><00:58:59.520><c> undefined</c><00:59:00.079><c> as</c><00:59:00.240><c> well</c>

00:59:01.510 --> 00:59:01.520 align:start position:0%
the ability to pass undefined as well
 

00:59:01.520 --> 00:59:03.190 align:start position:0%
the ability to pass undefined as well
again<00:59:02.079><c> we're</c><00:59:02.240><c> going</c><00:59:02.319><c> to</c><00:59:02.400><c> use</c><00:59:02.640><c> the</c><00:59:02.720><c> union</c>

00:59:03.190 --> 00:59:03.200 align:start position:0%
again we're going to use the union
 

00:59:03.200 --> 00:59:07.230 align:start position:0%
again we're going to use the union
operator

00:59:07.230 --> 00:59:07.240 align:start position:0%
 
 

00:59:07.240 --> 00:59:12.390 align:start position:0%
 
[Music]

00:59:12.390 --> 00:59:12.400 align:start position:0%
 
 

00:59:12.400 --> 00:59:14.630 align:start position:0%
 
now<00:59:12.640><c> when</c><00:59:12.799><c> working</c><00:59:13.119><c> with</c><00:59:13.359><c> nullable</c><00:59:13.839><c> objects</c>

00:59:14.630 --> 00:59:14.640 align:start position:0%
now when working with nullable objects
 

00:59:14.640 --> 00:59:16.789 align:start position:0%
now when working with nullable objects
we<00:59:14.880><c> often</c><00:59:15.119><c> have</c><00:59:15.280><c> to</c><00:59:15.440><c> do</c><00:59:15.599><c> null</c><00:59:15.839><c> checks</c><00:59:16.640><c> for</c>

00:59:16.789 --> 00:59:16.799 align:start position:0%
we often have to do null checks for
 

00:59:16.799 --> 00:59:18.950 align:start position:0%
we often have to do null checks for
example<00:59:17.200><c> let's</c><00:59:17.359><c> define</c><00:59:17.760><c> a</c><00:59:17.920><c> type</c><00:59:18.240><c> alias</c><00:59:18.640><c> called</c>

00:59:18.950 --> 00:59:18.960 align:start position:0%
example let's define a type alias called
 

00:59:18.960 --> 00:59:20.470 align:start position:0%
example let's define a type alias called
customer

00:59:20.470 --> 00:59:20.480 align:start position:0%
customer
 

00:59:20.480 --> 00:59:22.870 align:start position:0%
customer
and<00:59:20.640><c> give</c><00:59:20.799><c> it</c><00:59:20.960><c> a</c><00:59:21.119><c> birthday</c><00:59:21.599><c> property</c><00:59:22.160><c> of</c><00:59:22.319><c> type</c>

00:59:22.870 --> 00:59:22.880 align:start position:0%
and give it a birthday property of type
 

00:59:22.880 --> 00:59:24.150 align:start position:0%
and give it a birthday property of type
date

00:59:24.150 --> 00:59:24.160 align:start position:0%
date
 

00:59:24.160 --> 00:59:26.309 align:start position:0%
date
now<00:59:24.319><c> let's</c><00:59:24.559><c> define</c><00:59:24.880><c> a</c><00:59:24.960><c> function</c><00:59:25.839><c> for</c><00:59:26.000><c> getting</c>

00:59:26.309 --> 00:59:26.319 align:start position:0%
now let's define a function for getting
 

00:59:26.319 --> 00:59:28.870 align:start position:0%
now let's define a function for getting
a<00:59:26.400><c> customer</c><00:59:26.880><c> from</c><00:59:27.040><c> a</c><00:59:27.119><c> database</c><00:59:28.079><c> so</c>

00:59:28.870 --> 00:59:28.880 align:start position:0%
a customer from a database so
 

00:59:28.880 --> 00:59:31.270 align:start position:0%
a customer from a database so
we<00:59:29.040><c> give</c><00:59:29.200><c> it</c><00:59:29.359><c> an</c><00:59:29.520><c> id</c><00:59:29.839><c> which</c><00:59:30.000><c> is</c><00:59:30.079><c> a</c><00:59:30.160><c> number</c><00:59:31.040><c> and</c>

00:59:31.270 --> 00:59:31.280 align:start position:0%
we give it an id which is a number and
 

00:59:31.280 --> 00:59:34.150 align:start position:0%
we give it an id which is a number and
we<00:59:31.440><c> get</c><00:59:31.680><c> either</c><00:59:32.240><c> a</c><00:59:32.400><c> customer</c><00:59:33.280><c> or</c>

00:59:34.150 --> 00:59:34.160 align:start position:0%
we get either a customer or
 

00:59:34.160 --> 00:59:36.470 align:start position:0%
we get either a customer or
null<00:59:34.799><c> in</c><00:59:34.960><c> case</c><00:59:35.280><c> there</c><00:59:35.440><c> is</c><00:59:35.599><c> no</c><00:59:35.839><c> customer</c><00:59:36.240><c> with</c>

00:59:36.470 --> 00:59:36.480 align:start position:0%
null in case there is no customer with
 

00:59:36.480 --> 00:59:37.910 align:start position:0%
null in case there is no customer with
the<00:59:36.559><c> given</c><00:59:36.880><c> id</c>

00:59:37.910 --> 00:59:37.920 align:start position:0%
the given id
 

00:59:37.920 --> 00:59:39.430 align:start position:0%
the given id
now<00:59:38.079><c> in</c><00:59:38.160><c> this</c><00:59:38.319><c> function</c><00:59:38.720><c> let's</c><00:59:38.880><c> write</c><00:59:39.200><c> some</c>

00:59:39.430 --> 00:59:39.440 align:start position:0%
now in this function let's write some
 

00:59:39.440 --> 00:59:42.789 align:start position:0%
now in this function let's write some
basic<00:59:39.839><c> logic</c><00:59:40.240><c> like</c><00:59:40.960><c> return</c><00:59:41.839><c> if</c><00:59:42.079><c> id</c><00:59:42.400><c> equals</c>

00:59:42.789 --> 00:59:42.799 align:start position:0%
basic logic like return if id equals
 

00:59:42.799 --> 00:59:43.750 align:start position:0%
basic logic like return if id equals
zero

00:59:43.750 --> 00:59:43.760 align:start position:0%
zero
 

00:59:43.760 --> 00:59:46.230 align:start position:0%
zero
then<00:59:44.000><c> we</c><00:59:44.160><c> return</c><00:59:44.559><c> null</c><00:59:44.960><c> otherwise</c><00:59:45.440><c> we</c><00:59:45.599><c> return</c>

00:59:46.230 --> 00:59:46.240 align:start position:0%
then we return null otherwise we return
 

00:59:46.240 --> 00:59:48.230 align:start position:0%
then we return null otherwise we return
a<00:59:46.400><c> customer</c><00:59:46.960><c> object</c>

00:59:48.230 --> 00:59:48.240 align:start position:0%
a customer object
 

00:59:48.240 --> 00:59:49.910 align:start position:0%
a customer object
with<00:59:48.480><c> this</c><00:59:48.640><c> birthday</c>

00:59:49.910 --> 00:59:49.920 align:start position:0%
with this birthday
 

00:59:49.920 --> 00:59:51.109 align:start position:0%
with this birthday
pretty<00:59:50.160><c> simple</c>

00:59:51.109 --> 00:59:51.119 align:start position:0%
pretty simple
 

00:59:51.119 --> 00:59:53.430 align:start position:0%
pretty simple
now<00:59:51.280><c> let's</c><00:59:51.440><c> declare</c><00:59:51.839><c> a</c><00:59:51.920><c> variable</c>

00:59:53.430 --> 00:59:53.440 align:start position:0%
now let's declare a variable
 

00:59:53.440 --> 00:59:56.069 align:start position:0%
now let's declare a variable
and<00:59:53.599><c> here</c><00:59:53.760><c> we</c><00:59:53.920><c> call</c><00:59:54.400><c> getcustomer</c><00:59:55.200><c> and</c><00:59:55.359><c> pass</c>

00:59:56.069 --> 00:59:56.079 align:start position:0%
and here we call getcustomer and pass
 

00:59:56.079 --> 00:59:57.030 align:start position:0%
and here we call getcustomer and pass
zero

00:59:57.030 --> 00:59:57.040 align:start position:0%
zero
 

00:59:57.040 --> 00:59:59.030 align:start position:0%
zero
now<00:59:57.200><c> let's</c><00:59:57.440><c> imagine</c><00:59:57.839><c> we</c><00:59:58.000><c> want</c><00:59:58.160><c> to</c><00:59:58.240><c> print</c><00:59:58.880><c> the</c>

00:59:59.030 --> 00:59:59.040 align:start position:0%
now let's imagine we want to print the
 

00:59:59.040 --> 01:00:02.309 align:start position:0%
now let's imagine we want to print the
customer's<00:59:59.680><c> birthday</c><01:00:00.559><c> so</c><01:00:00.880><c> console.log</c><01:00:02.160><c> and</c>

01:00:02.309 --> 01:00:02.319 align:start position:0%
customer's birthday so console.log and
 

01:00:02.319 --> 01:00:05.349 align:start position:0%
customer's birthday so console.log and
here<01:00:02.559><c> we</c><01:00:02.720><c> pass</c><01:00:03.119><c> customer</c><01:00:03.680><c> dot</c><01:00:04.319><c> birthday</c>

01:00:05.349 --> 01:00:05.359 align:start position:0%
here we pass customer dot birthday
 

01:00:05.359 --> 01:00:07.510 align:start position:0%
here we pass customer dot birthday
now<01:00:05.520><c> here</c><01:00:05.680><c> we</c><01:00:05.839><c> have</c><01:00:05.920><c> a</c><01:00:06.079><c> compilation</c><01:00:06.640><c> error</c>

01:00:07.510 --> 01:00:07.520 align:start position:0%
now here we have a compilation error
 

01:00:07.520 --> 01:00:10.390 align:start position:0%
now here we have a compilation error
because<01:00:07.839><c> customer</c><01:00:08.559><c> might</c><01:00:08.880><c> possibly</c><01:00:09.359><c> be</c><01:00:09.520><c> no</c>

01:00:10.390 --> 01:00:10.400 align:start position:0%
because customer might possibly be no
 

01:00:10.400 --> 01:00:12.069 align:start position:0%
because customer might possibly be no
so<01:00:10.720><c> as</c><01:00:10.880><c> you</c><01:00:10.960><c> know</c><01:00:11.119><c> one</c><01:00:11.359><c> way</c><01:00:11.520><c> to</c><01:00:11.680><c> solve</c><01:00:11.920><c> this</c>

01:00:12.069 --> 01:00:12.079 align:start position:0%
so as you know one way to solve this
 

01:00:12.079 --> 01:00:13.670 align:start position:0%
so as you know one way to solve this
problem<01:00:12.480><c> is</c><01:00:12.559><c> like</c><01:00:12.720><c> this</c>

01:00:13.670 --> 01:00:13.680 align:start position:0%
problem is like this
 

01:00:13.680 --> 01:00:17.510 align:start position:0%
problem is like this
we<01:00:13.920><c> check</c><01:00:14.319><c> if</c><01:00:14.559><c> customer</c><01:00:15.440><c> is</c><01:00:15.599><c> not</c><01:00:15.920><c> known</c><01:00:16.480><c> then</c>

01:00:17.510 --> 01:00:17.520 align:start position:0%
we check if customer is not known then
 

01:00:17.520 --> 01:00:20.230 align:start position:0%
we check if customer is not known then
we<01:00:17.760><c> execute</c><01:00:18.720><c> this</c><01:00:18.960><c> piece</c><01:00:19.200><c> of</c><01:00:19.280><c> code</c>

01:00:20.230 --> 01:00:20.240 align:start position:0%
we execute this piece of code
 

01:00:20.240 --> 01:00:21.829 align:start position:0%
we execute this piece of code
now<01:00:20.400><c> let's</c><01:00:20.559><c> take</c><01:00:20.799><c> this</c><01:00:20.960><c> to</c><01:00:21.119><c> the</c><01:00:21.200><c> next</c><01:00:21.440><c> level</c>

01:00:21.829 --> 01:00:21.839 align:start position:0%
now let's take this to the next level
 

01:00:21.839 --> 01:00:23.510 align:start position:0%
now let's take this to the next level
and<01:00:22.079><c> assume</c><01:00:22.480><c> that</c><01:00:22.880><c> under</c><01:00:23.200><c> certain</c>

01:00:23.510 --> 01:00:23.520 align:start position:0%
and assume that under certain
 

01:00:23.520 --> 01:00:26.789 align:start position:0%
and assume that under certain
circumstances<01:00:24.799><c> this</c><01:00:25.040><c> function</c><01:00:25.839><c> might</c><01:00:26.079><c> return</c>

01:00:26.789 --> 01:00:26.799 align:start position:0%
circumstances this function might return
 

01:00:26.799 --> 01:00:30.549 align:start position:0%
circumstances this function might return
undefined<01:00:27.599><c> so</c><01:00:27.760><c> we</c><01:00:27.920><c> add</c><01:00:28.640><c> undefined</c><01:00:29.200><c> here</c>

01:00:30.549 --> 01:00:30.559 align:start position:0%
undefined so we add undefined here
 

01:00:30.559 --> 01:00:32.630 align:start position:0%
undefined so we add undefined here
and<01:00:30.720><c> now</c><01:00:30.960><c> we</c><01:00:31.040><c> have</c><01:00:31.200><c> to</c><01:00:31.359><c> expand</c><01:00:32.160><c> this</c><01:00:32.480><c> if</c>

01:00:32.630 --> 01:00:32.640 align:start position:0%
and now we have to expand this if
 

01:00:32.640 --> 01:00:36.309 align:start position:0%
and now we have to expand this if
statement<01:00:33.359><c> and</c><01:00:33.520><c> check</c><01:00:33.760><c> for</c><01:00:33.920><c> undefined</c>

01:00:36.309 --> 01:00:36.319 align:start position:0%
statement and check for undefined
 

01:00:36.319 --> 01:00:39.430 align:start position:0%
statement and check for undefined
so<01:00:36.799><c> if</c><01:00:37.040><c> customer</c><01:00:37.520><c> is</c><01:00:37.680><c> not</c><01:00:37.920><c> null</c><01:00:38.559><c> and</c><01:00:38.880><c> it's</c><01:00:39.119><c> not</c>

01:00:39.430 --> 01:00:39.440 align:start position:0%
so if customer is not null and it's not
 

01:00:39.440 --> 01:00:41.349 align:start position:0%
so if customer is not null and it's not
undefined<01:00:40.240><c> either</c>

01:00:41.349 --> 01:00:41.359 align:start position:0%
undefined either
 

01:00:41.359 --> 01:00:44.069 align:start position:0%
undefined either
then<01:00:41.599><c> we</c><01:00:41.760><c> print</c><01:00:42.559><c> the</c><01:00:42.720><c> customer's</c><01:00:43.280><c> birthday</c>

01:00:44.069 --> 01:00:44.079 align:start position:0%
then we print the customer's birthday
 

01:00:44.079 --> 01:00:46.150 align:start position:0%
then we print the customer's birthday
that<01:00:44.400><c> works</c><01:00:44.880><c> but</c><01:00:45.040><c> there</c><01:00:45.200><c> is</c><01:00:45.359><c> a</c><01:00:45.440><c> simpler</c><01:00:45.839><c> way</c><01:00:46.079><c> to</c>

01:00:46.150 --> 01:00:46.160 align:start position:0%
that works but there is a simpler way to
 

01:00:46.160 --> 01:00:48.390 align:start position:0%
that works but there is a simpler way to
write<01:00:46.400><c> this</c><01:00:46.559><c> code</c><01:00:46.880><c> in</c><01:00:46.960><c> typescript</c><01:00:48.000><c> we</c><01:00:48.160><c> can</c>

01:00:48.390 --> 01:00:48.400 align:start position:0%
write this code in typescript we can
 

01:00:48.400 --> 01:00:49.510 align:start position:0%
write this code in typescript we can
remove

01:00:49.510 --> 01:00:49.520 align:start position:0%
remove
 

01:00:49.520 --> 01:00:51.030 align:start position:0%
remove
this<01:00:49.839><c> if</c><01:00:50.000><c> statement</c>

01:00:51.030 --> 01:00:51.040 align:start position:0%
this if statement
 

01:00:51.040 --> 01:00:53.510 align:start position:0%
this if statement
and<01:00:51.200><c> use</c><01:00:51.440><c> what</c><01:00:51.680><c> we</c><01:00:51.839><c> call</c><01:00:52.400><c> the</c><01:00:52.640><c> optional</c>

01:00:53.510 --> 01:00:53.520 align:start position:0%
and use what we call the optional
 

01:00:53.520 --> 01:00:55.190 align:start position:0%
and use what we call the optional
property<01:00:54.160><c> access</c>

01:00:55.190 --> 01:00:55.200 align:start position:0%
property access
 

01:00:55.200 --> 01:00:56.549 align:start position:0%
property access
operator

01:00:56.549 --> 01:00:56.559 align:start position:0%
operator
 

01:00:56.559 --> 01:00:58.470 align:start position:0%
operator
so<01:00:56.799><c> because</c><01:00:57.119><c> customer</c><01:00:57.680><c> might</c><01:00:57.839><c> be</c><01:00:58.000><c> null</c><01:00:58.319><c> or</c>

01:00:58.470 --> 01:00:58.480 align:start position:0%
so because customer might be null or
 

01:00:58.480 --> 01:01:00.789 align:start position:0%
so because customer might be null or
undefined<01:00:59.520><c> right</c><01:00:59.839><c> after</c><01:01:00.160><c> it</c><01:01:00.240><c> we</c><01:01:00.400><c> add</c><01:01:00.640><c> a</c>

01:01:00.789 --> 01:01:00.799 align:start position:0%
undefined right after it we add a
 

01:01:00.799 --> 01:01:03.510 align:start position:0%
undefined right after it we add a
question<01:01:01.200><c> mark</c><01:01:01.920><c> and</c><01:01:02.079><c> then</c><01:01:02.559><c> we</c><01:01:02.720><c> add</c><01:01:03.280><c> the</c>

01:01:03.510 --> 01:01:03.520 align:start position:0%
question mark and then we add the
 

01:01:03.520 --> 01:01:06.230 align:start position:0%
question mark and then we add the
chaining<01:01:04.079><c> or</c><01:01:04.319><c> the</c><01:01:04.559><c> dot</c><01:01:04.960><c> operator</c><01:01:05.839><c> so</c><01:01:06.000><c> this</c>

01:01:06.230 --> 01:01:06.240 align:start position:0%
chaining or the dot operator so this
 

01:01:06.240 --> 01:01:07.910 align:start position:0%
chaining or the dot operator so this
question<01:01:06.640><c> mark</c><01:01:06.880><c> followed</c><01:01:07.200><c> by</c><01:01:07.359><c> the</c><01:01:07.520><c> chaining</c>

01:01:07.910 --> 01:01:07.920 align:start position:0%
question mark followed by the chaining
 

01:01:07.920 --> 01:01:10.470 align:start position:0%
question mark followed by the chaining
operator<01:01:08.400><c> is</c><01:01:08.559><c> called</c><01:01:09.040><c> the</c><01:01:09.200><c> optional</c><01:01:10.000><c> property</c>

01:01:10.470 --> 01:01:10.480 align:start position:0%
operator is called the optional property
 

01:01:10.480 --> 01:01:12.950 align:start position:0%
operator is called the optional property
access<01:01:10.799><c> operator</c><01:01:11.760><c> so</c><01:01:11.920><c> now</c><01:01:12.319><c> this</c><01:01:12.559><c> piece</c><01:01:12.799><c> of</c>

01:01:12.950 --> 01:01:12.960 align:start position:0%
access operator so now this piece of
 

01:01:12.960 --> 01:01:15.270 align:start position:0%
access operator so now this piece of
code<01:01:13.280><c> gets</c><01:01:13.599><c> executed</c><01:01:14.559><c> only</c><01:01:14.799><c> if</c><01:01:14.960><c> we</c><01:01:15.040><c> have</c><01:01:15.200><c> a</c>

01:01:15.270 --> 01:01:15.280 align:start position:0%
code gets executed only if we have a
 

01:01:15.280 --> 01:01:17.829 align:start position:0%
code gets executed only if we have a
customer<01:01:15.760><c> that</c><01:01:16.000><c> is</c><01:01:16.160><c> not</c><01:01:16.400><c> null</c><01:01:16.960><c> or</c><01:01:17.200><c> undefined</c>

01:01:17.829 --> 01:01:17.839 align:start position:0%
customer that is not null or undefined
 

01:01:17.839 --> 01:01:19.589 align:start position:0%
customer that is not null or undefined
let's<01:01:18.000><c> see</c><01:01:18.160><c> this</c><01:01:18.400><c> in</c><01:01:18.559><c> action</c><01:01:19.280><c> so</c><01:01:19.440><c> we're</c>

01:01:19.589 --> 01:01:19.599 align:start position:0%
let's see this in action so we're
 

01:01:19.599 --> 01:01:22.950 align:start position:0%
let's see this in action so we're
passing<01:01:19.920><c> 0</c><01:01:20.720><c> and</c><01:01:20.880><c> we</c><01:01:21.040><c> get</c><01:01:21.280><c> a</c><01:01:21.440><c> null</c><01:01:21.760><c> object</c><01:01:22.160><c> so</c>

01:01:22.950 --> 01:01:22.960 align:start position:0%
passing 0 and we get a null object so
 

01:01:22.960 --> 01:01:24.710 align:start position:0%
passing 0 and we get a null object so
if<01:01:23.119><c> we</c><01:01:23.280><c> execute</c><01:01:23.599><c> this</c><01:01:23.839><c> code</c>

01:01:24.710 --> 01:01:24.720 align:start position:0%
if we execute this code
 

01:01:24.720 --> 01:01:27.030 align:start position:0%
if we execute this code
we<01:01:24.880><c> get</c><01:01:25.040><c> undefined</c><01:01:25.920><c> so</c><01:01:26.160><c> the</c><01:01:26.319><c> result</c><01:01:26.720><c> of</c><01:01:26.799><c> this</c>

01:01:27.030 --> 01:01:27.040 align:start position:0%
we get undefined so the result of this
 

01:01:27.040 --> 01:01:30.309 align:start position:0%
we get undefined so the result of this
expression<01:01:27.920><c> is</c><01:01:28.079><c> undefined</c><01:01:29.119><c> but</c><01:01:29.359><c> if</c><01:01:29.440><c> we</c><01:01:29.599><c> pass</c>

01:01:30.309 --> 01:01:30.319 align:start position:0%
expression is undefined but if we pass
 

01:01:30.319 --> 01:01:33.430 align:start position:0%
expression is undefined but if we pass
one<01:01:30.799><c> we</c><01:01:30.960><c> get</c><01:01:31.440><c> an</c><01:01:31.680><c> actual</c><01:01:32.000><c> customer</c><01:01:32.559><c> object</c><01:01:33.200><c> so</c>

01:01:33.430 --> 01:01:33.440 align:start position:0%
one we get an actual customer object so
 

01:01:33.440 --> 01:01:36.069 align:start position:0%
one we get an actual customer object so
we'll<01:01:33.680><c> see</c><01:01:34.160><c> the</c><01:01:34.319><c> customer's</c><01:01:34.880><c> birthday</c>

01:01:36.069 --> 01:01:36.079 align:start position:0%
we'll see the customer's birthday
 

01:01:36.079 --> 01:01:37.430 align:start position:0%
we'll see the customer's birthday
on<01:01:36.240><c> the</c><01:01:36.319><c> console</c>

01:01:37.430 --> 01:01:37.440 align:start position:0%
on the console
 

01:01:37.440 --> 01:01:40.150 align:start position:0%
on the console
there<01:01:37.680><c> you</c><01:01:37.760><c> go</c><01:01:38.160><c> okay</c><01:01:38.799><c> so</c><01:01:38.960><c> this</c><01:01:39.119><c> is</c><01:01:39.359><c> optional</c>

01:01:40.150 --> 01:01:40.160 align:start position:0%
there you go okay so this is optional
 

01:01:40.160 --> 01:01:42.549 align:start position:0%
there you go okay so this is optional
property<01:01:40.640><c> access</c><01:01:40.960><c> operator</c><01:01:41.920><c> now</c><01:01:42.079><c> we</c><01:01:42.240><c> can</c><01:01:42.400><c> take</c>

01:01:42.549 --> 01:01:42.559 align:start position:0%
property access operator now we can take
 

01:01:42.559 --> 01:01:44.549 align:start position:0%
property access operator now we can take
this<01:01:42.720><c> to</c><01:01:42.880><c> the</c><01:01:43.040><c> next</c><01:01:43.280><c> level</c><01:01:44.000><c> let's</c><01:01:44.240><c> make</c><01:01:44.400><c> the</c>

01:01:44.549 --> 01:01:44.559 align:start position:0%
this to the next level let's make the
 

01:01:44.559 --> 01:01:47.349 align:start position:0%
this to the next level let's make the
birthday<01:01:44.960><c> property</c><01:01:45.520><c> optional</c>

01:01:47.349 --> 01:01:47.359 align:start position:0%
birthday property optional
 

01:01:47.359 --> 01:01:49.670 align:start position:0%
birthday property optional
now<01:01:47.520><c> let's</c><01:01:47.760><c> say</c><01:01:48.000><c> we</c><01:01:48.160><c> want</c><01:01:48.319><c> to</c><01:01:48.400><c> print</c><01:01:49.200><c> the</c><01:01:49.440><c> full</c>

01:01:49.670 --> 01:01:49.680 align:start position:0%
now let's say we want to print the full
 

01:01:49.680 --> 01:01:50.630 align:start position:0%
now let's say we want to print the full
year

01:01:50.630 --> 01:01:50.640 align:start position:0%
year
 

01:01:50.640 --> 01:01:53.510 align:start position:0%
year
of<01:01:50.799><c> the</c><01:01:50.960><c> birth</c><01:01:51.200><c> year</c><01:01:51.920><c> so</c><01:01:52.079><c> over</c><01:01:52.319><c> here</c>

01:01:53.510 --> 01:01:53.520 align:start position:0%
of the birth year so over here
 

01:01:53.520 --> 01:01:55.589 align:start position:0%
of the birth year so over here
we<01:01:53.680><c> have</c><01:01:53.839><c> to</c><01:01:54.000><c> call</c><01:01:54.559><c> dot</c>

01:01:55.589 --> 01:01:55.599 align:start position:0%
we have to call dot
 

01:01:55.599 --> 01:01:56.470 align:start position:0%
we have to call dot
get

01:01:56.470 --> 01:01:56.480 align:start position:0%
get
 

01:01:56.480 --> 01:01:58.549 align:start position:0%
get
full<01:01:57.200><c> year</c>

01:01:58.549 --> 01:01:58.559 align:start position:0%
full year
 

01:01:58.559 --> 01:02:00.150 align:start position:0%
full year
now<01:01:58.960><c> once</c><01:01:59.200><c> again</c><01:01:59.440><c> we</c><01:01:59.599><c> have</c><01:01:59.760><c> the</c><01:01:59.920><c> same</c>

01:02:00.150 --> 01:02:00.160 align:start position:0%
now once again we have the same
 

01:02:00.160 --> 01:02:02.789 align:start position:0%
now once again we have the same
compilation<01:02:00.720><c> error</c><01:02:01.520><c> because</c><01:02:02.079><c> the</c><01:02:02.240><c> birthday</c>

01:02:02.789 --> 01:02:02.799 align:start position:0%
compilation error because the birthday
 

01:02:02.799 --> 01:02:05.109 align:start position:0%
compilation error because the birthday
property<01:02:03.280><c> might</c><01:02:03.520><c> possibly</c><01:02:04.000><c> be</c><01:02:04.160><c> undefined</c>

01:02:05.109 --> 01:02:05.119 align:start position:0%
property might possibly be undefined
 

01:02:05.119 --> 01:02:07.270 align:start position:0%
property might possibly be undefined
once<01:02:05.359><c> again</c><01:02:05.599><c> to</c><01:02:05.760><c> solve</c><01:02:06.000><c> this</c><01:02:06.240><c> problem</c><01:02:06.960><c> we</c><01:02:07.119><c> can</c>

01:02:07.270 --> 01:02:07.280 align:start position:0%
once again to solve this problem we can
 

01:02:07.280 --> 01:02:09.430 align:start position:0%
once again to solve this problem we can
use<01:02:07.440><c> the</c><01:02:07.680><c> optional</c><01:02:08.640><c> property</c><01:02:09.119><c> access</c>

01:02:09.430 --> 01:02:09.440 align:start position:0%
use the optional property access
 

01:02:09.440 --> 01:02:12.309 align:start position:0%
use the optional property access
operator<01:02:10.319><c> so</c><01:02:10.480><c> now</c><01:02:10.720><c> this</c><01:02:10.960><c> piece</c><01:02:11.200><c> of</c><01:02:11.359><c> code</c><01:02:12.000><c> gets</c>

01:02:12.309 --> 01:02:12.319 align:start position:0%
operator so now this piece of code gets
 

01:02:12.319 --> 01:02:14.710 align:start position:0%
operator so now this piece of code gets
executed<01:02:13.280><c> only</c><01:02:13.520><c> if</c><01:02:13.680><c> you</c><01:02:13.760><c> have</c><01:02:13.920><c> a</c><01:02:14.000><c> customer</c><01:02:14.559><c> and</c>

01:02:14.710 --> 01:02:14.720 align:start position:0%
executed only if you have a customer and
 

01:02:14.720 --> 01:02:17.270 align:start position:0%
executed only if you have a customer and
that<01:02:14.880><c> customer</c><01:02:15.280><c> has</c><01:02:15.520><c> a</c><01:02:15.599><c> birthday</c><01:02:16.480><c> otherwise</c>

01:02:17.270 --> 01:02:17.280 align:start position:0%
that customer has a birthday otherwise
 

01:02:17.280 --> 01:02:18.950 align:start position:0%
that customer has a birthday otherwise
the<01:02:17.520><c> result</c><01:02:17.920><c> of</c><01:02:18.000><c> this</c><01:02:18.240><c> expression</c><01:02:18.799><c> is</c>

01:02:18.950 --> 01:02:18.960 align:start position:0%
the result of this expression is
 

01:02:18.960 --> 01:02:20.789 align:start position:0%
the result of this expression is
undefined<01:02:19.599><c> okay</c>

01:02:20.789 --> 01:02:20.799 align:start position:0%
undefined okay
 

01:02:20.799 --> 01:02:22.390 align:start position:0%
undefined okay
now<01:02:20.960><c> we</c><01:02:21.200><c> also</c><01:02:21.440><c> have</c>

01:02:22.390 --> 01:02:22.400 align:start position:0%
now we also have
 

01:02:22.400 --> 01:02:24.069 align:start position:0%
now we also have
what<01:02:22.559><c> we</c><01:02:22.720><c> call</c>

01:02:24.069 --> 01:02:24.079 align:start position:0%
what we call
 

01:02:24.079 --> 01:02:25.270 align:start position:0%
what we call
optional

01:02:25.270 --> 01:02:25.280 align:start position:0%
optional
 

01:02:25.280 --> 01:02:27.990 align:start position:0%
optional
element<01:02:26.160><c> access</c><01:02:27.119><c> operator</c><01:02:27.599><c> and</c><01:02:27.760><c> this</c><01:02:27.920><c> is</c>

01:02:27.990 --> 01:02:28.000 align:start position:0%
element access operator and this is
 

01:02:28.000 --> 01:02:30.549 align:start position:0%
element access operator and this is
useful<01:02:28.400><c> when</c><01:02:28.559><c> we</c><01:02:28.720><c> are</c><01:02:28.799><c> dealing</c><01:02:29.200><c> with</c><01:02:29.599><c> arrays</c>

01:02:30.549 --> 01:02:30.559 align:start position:0%
useful when we are dealing with arrays
 

01:02:30.559 --> 01:02:32.950 align:start position:0%
useful when we are dealing with arrays
so<01:02:30.880><c> we</c><01:02:31.039><c> might</c><01:02:31.280><c> have</c><01:02:31.599><c> an</c><01:02:31.760><c> area</c><01:02:32.000><c> of</c><01:02:32.160><c> customers</c>

01:02:32.950 --> 01:02:32.960 align:start position:0%
so we might have an area of customers
 

01:02:32.960 --> 01:02:35.190 align:start position:0%
so we might have an area of customers
and<01:02:33.200><c> we</c><01:02:33.359><c> want</c><01:02:33.440><c> to</c><01:02:33.599><c> print</c><01:02:34.240><c> the</c><01:02:34.400><c> first</c><01:02:34.640><c> customer</c>

01:02:35.190 --> 01:02:35.200 align:start position:0%
and we want to print the first customer
 

01:02:35.200 --> 01:02:37.349 align:start position:0%
and we want to print the first customer
on<01:02:35.280><c> the</c><01:02:35.440><c> console</c><01:02:36.400><c> now</c><01:02:36.559><c> if</c><01:02:36.720><c> this</c><01:02:36.960><c> array</c><01:02:37.280><c> is</c>

01:02:37.349 --> 01:02:37.359 align:start position:0%
on the console now if this array is
 

01:02:37.359 --> 01:02:39.510 align:start position:0%
on the console now if this array is
going<01:02:37.440><c> to</c><01:02:37.520><c> be</c><01:02:37.760><c> non</c><01:02:38.079><c> or</c><01:02:38.240><c> undefined</c><01:02:39.119><c> of</c><01:02:39.280><c> course</c>

01:02:39.510 --> 01:02:39.520 align:start position:0%
going to be non or undefined of course
 

01:02:39.520 --> 01:02:40.789 align:start position:0%
going to be non or undefined of course
we<01:02:39.680><c> have</c><01:02:39.760><c> to</c><01:02:40.000><c> check</c>

01:02:40.789 --> 01:02:40.799 align:start position:0%
we have to check
 

01:02:40.799 --> 01:02:43.670 align:start position:0%
we have to check
if<01:02:41.039><c> customers</c><01:02:42.000><c> is</c><01:02:42.160><c> not</c><01:02:42.400><c> null</c><01:02:42.799><c> and</c><01:02:43.119><c> it's</c><01:02:43.359><c> not</c>

01:02:43.670 --> 01:02:43.680 align:start position:0%
if customers is not null and it's not
 

01:02:43.680 --> 01:02:45.109 align:start position:0%
if customers is not null and it's not
undefined

01:02:45.109 --> 01:02:45.119 align:start position:0%
undefined
 

01:02:45.119 --> 01:02:47.430 align:start position:0%
undefined
then<01:02:45.839><c> we're</c><01:02:46.079><c> going</c><01:02:46.240><c> to</c><01:02:46.400><c> access</c><01:02:47.039><c> the</c><01:02:47.200><c> first</c>

01:02:47.430 --> 01:02:47.440 align:start position:0%
then we're going to access the first
 

01:02:47.440 --> 01:02:49.829 align:start position:0%
then we're going to access the first
element<01:02:48.240><c> now</c><01:02:48.400><c> this</c><01:02:48.559><c> is</c><01:02:48.720><c> where</c><01:02:49.039><c> we</c><01:02:49.200><c> can</c><01:02:49.359><c> use</c><01:02:49.599><c> the</c>

01:02:49.829 --> 01:02:49.839 align:start position:0%
element now this is where we can use the
 

01:02:49.839 --> 01:02:53.510 align:start position:0%
element now this is where we can use the
optional<01:02:50.559><c> element</c><01:02:51.039><c> access</c><01:02:51.359><c> operator</c><01:02:51.920><c> so</c>

01:02:53.510 --> 01:02:53.520 align:start position:0%
optional element access operator so
 

01:02:53.520 --> 01:02:55.829 align:start position:0%
optional element access operator so
before<01:02:54.000><c> accessing</c><01:02:54.400><c> this</c><01:02:54.640><c> element</c>

01:02:55.829 --> 01:02:55.839 align:start position:0%
before accessing this element
 

01:02:55.839 --> 01:02:59.589 align:start position:0%
before accessing this element
we<01:02:56.000><c> use</c><01:02:56.720><c> a</c><01:02:56.880><c> question</c><01:02:57.200><c> mark</c><01:02:57.839><c> and</c><01:02:58.000><c> a</c><01:02:58.079><c> dot</c><01:02:58.799><c> okay</c>

01:02:59.589 --> 01:02:59.599 align:start position:0%
we use a question mark and a dot okay
 

01:02:59.599 --> 01:03:01.990 align:start position:0%
we use a question mark and a dot okay
now<01:02:59.760><c> we</c><01:03:00.000><c> also</c><01:03:00.240><c> have</c>

01:03:01.990 --> 01:03:02.000 align:start position:0%
now we also have
 

01:03:02.000 --> 01:03:03.990 align:start position:0%
now we also have
the<01:03:02.240><c> optional</c><01:03:02.720><c> call</c><01:03:03.039><c> operator</c><01:03:03.440><c> which</c><01:03:03.599><c> has</c><01:03:03.760><c> the</c>

01:03:03.990 --> 01:03:04.000 align:start position:0%
the optional call operator which has the
 

01:03:04.000 --> 01:03:07.349 align:start position:0%
the optional call operator which has the
exact<01:03:04.720><c> same</c><01:03:05.039><c> syntax</c><01:03:05.920><c> so</c><01:03:06.079><c> let's</c><01:03:06.319><c> imagine</c>

01:03:07.349 --> 01:03:07.359 align:start position:0%
exact same syntax so let's imagine
 

01:03:07.359 --> 01:03:09.270 align:start position:0%
exact same syntax so let's imagine
we<01:03:07.520><c> have</c><01:03:07.760><c> a</c><01:03:07.839><c> variable</c><01:03:08.319><c> called</c><01:03:08.559><c> log</c><01:03:08.960><c> which</c><01:03:09.200><c> is</c>

01:03:09.270 --> 01:03:09.280 align:start position:0%
we have a variable called log which is
 

01:03:09.280 --> 01:03:11.109 align:start position:0%
we have a variable called log which is
going<01:03:09.359><c> to</c><01:03:09.440><c> reference</c><01:03:10.000><c> a</c><01:03:10.160><c> function</c>

01:03:11.109 --> 01:03:11.119 align:start position:0%
going to reference a function
 

01:03:11.119 --> 01:03:13.029 align:start position:0%
going to reference a function
so<01:03:11.280><c> for</c><01:03:11.520><c> simplicity</c><01:03:12.240><c> i'm</c><01:03:12.400><c> going</c><01:03:12.480><c> to</c><01:03:12.640><c> annotate</c>

01:03:13.029 --> 01:03:13.039 align:start position:0%
so for simplicity i'm going to annotate
 

01:03:13.039 --> 01:03:14.470 align:start position:0%
so for simplicity i'm going to annotate
this<01:03:13.280><c> with</c><01:03:13.520><c> any</c>

01:03:14.470 --> 01:03:14.480 align:start position:0%
this with any
 

01:03:14.480 --> 01:03:16.390 align:start position:0%
this with any
and<01:03:14.640><c> this</c><01:03:14.880><c> might</c><01:03:15.039><c> be</c><01:03:15.200><c> set</c><01:03:15.359><c> to</c><01:03:15.520><c> a</c><01:03:15.680><c> function</c>

01:03:16.390 --> 01:03:16.400 align:start position:0%
and this might be set to a function
 

01:03:16.400 --> 01:03:18.950 align:start position:0%
and this might be set to a function
like<01:03:16.640><c> a</c><01:03:16.720><c> function</c><01:03:17.119><c> that</c><01:03:17.280><c> takes</c><01:03:17.520><c> a</c><01:03:17.599><c> message</c>

01:03:18.950 --> 01:03:18.960 align:start position:0%
like a function that takes a message
 

01:03:18.960 --> 01:03:19.829 align:start position:0%
like a function that takes a message
and

01:03:19.829 --> 01:03:19.839 align:start position:0%
and
 

01:03:19.839 --> 01:03:21.910 align:start position:0%
and
prints<01:03:20.160><c> that</c><01:03:20.319><c> message</c><01:03:20.720><c> on</c><01:03:20.799><c> the</c><01:03:20.960><c> console</c>

01:03:21.910 --> 01:03:21.920 align:start position:0%
prints that message on the console
 

01:03:21.920 --> 01:03:23.990 align:start position:0%
prints that message on the console
or<01:03:22.240><c> we</c><01:03:22.319><c> might</c><01:03:22.559><c> set</c><01:03:22.799><c> this</c><01:03:23.039><c> to</c>

01:03:23.990 --> 01:03:24.000 align:start position:0%
or we might set this to
 

01:03:24.000 --> 01:03:24.710 align:start position:0%
or we might set this to
no

01:03:24.710 --> 01:03:24.720 align:start position:0%
no
 

01:03:24.720 --> 01:03:25.589 align:start position:0%
no
right

01:03:25.589 --> 01:03:25.599 align:start position:0%
right
 

01:03:25.599 --> 01:03:27.829 align:start position:0%
right
now<01:03:26.000><c> let's</c><01:03:26.240><c> say</c><01:03:26.400><c> we</c><01:03:26.480><c> want</c><01:03:26.640><c> to</c><01:03:26.799><c> call</c><01:03:27.039><c> this</c>

01:03:27.829 --> 01:03:27.839 align:start position:0%
now let's say we want to call this
 

01:03:27.839 --> 01:03:30.150 align:start position:0%
now let's say we want to call this
and<01:03:28.160><c> pass</c><01:03:28.480><c> some</c><01:03:28.720><c> value</c><01:03:29.440><c> if</c><01:03:29.599><c> we</c><01:03:29.680><c> run</c><01:03:29.920><c> this</c>

01:03:30.150 --> 01:03:30.160 align:start position:0%
and pass some value if we run this
 

01:03:30.160 --> 01:03:32.069 align:start position:0%
and pass some value if we run this
program<01:03:30.799><c> our</c><01:03:31.039><c> program</c><01:03:31.359><c> is</c><01:03:31.440><c> going</c><01:03:31.599><c> to</c><01:03:31.680><c> crash</c>

01:03:32.069 --> 01:03:32.079 align:start position:0%
program our program is going to crash
 

01:03:32.079 --> 01:03:34.390 align:start position:0%
program our program is going to crash
because<01:03:32.480><c> log</c><01:03:32.799><c> is</c><01:03:32.880><c> not</c><01:03:33.599><c> so</c><01:03:33.760><c> this</c><01:03:33.920><c> is</c><01:03:34.000><c> where</c><01:03:34.240><c> we</c>

01:03:34.390 --> 01:03:34.400 align:start position:0%
because log is not so this is where we
 

01:03:34.400 --> 01:03:37.589 align:start position:0%
because log is not so this is where we
can<01:03:34.559><c> use</c><01:03:35.039><c> the</c><01:03:35.280><c> optional</c><01:03:36.160><c> call</c><01:03:36.480><c> operator</c><01:03:37.119><c> so</c>

01:03:37.589 --> 01:03:37.599 align:start position:0%
can use the optional call operator so
 

01:03:37.599 --> 01:03:40.150 align:start position:0%
can use the optional call operator so
this<01:03:37.839><c> piece</c><01:03:38.079><c> of</c><01:03:38.240><c> code</c><01:03:38.799><c> will</c><01:03:38.960><c> get</c><01:03:39.280><c> executed</c>

01:03:40.150 --> 01:03:40.160 align:start position:0%
this piece of code will get executed
 

01:03:40.160 --> 01:03:42.789 align:start position:0%
this piece of code will get executed
only<01:03:40.480><c> if</c><01:03:40.640><c> log</c><01:03:41.280><c> is</c><01:03:41.440><c> referencing</c><01:03:42.160><c> an</c><01:03:42.400><c> actual</c>

01:03:42.789 --> 01:03:42.799 align:start position:0%
only if log is referencing an actual
 

01:03:42.799 --> 01:03:47.910 align:start position:0%
only if log is referencing an actual
function<01:03:43.359><c> otherwise</c><01:03:44.240><c> we'll</c><01:03:44.400><c> get</c><01:03:44.559><c> undefined</c>

01:03:47.910 --> 01:03:47.920 align:start position:0%
 
 

01:03:47.920 --> 01:03:49.910 align:start position:0%
 
hey<01:03:48.160><c> guys</c><01:03:48.400><c> mosh</c><01:03:48.799><c> here</c><01:03:49.200><c> i</c><01:03:49.280><c> just</c><01:03:49.440><c> wanted</c><01:03:49.680><c> to</c><01:03:49.760><c> let</c>

01:03:49.910 --> 01:03:49.920 align:start position:0%
hey guys mosh here i just wanted to let
 

01:03:49.920 --> 01:03:51.430 align:start position:0%
hey guys mosh here i just wanted to let
you<01:03:50.079><c> know</c><01:03:50.240><c> that</c><01:03:50.480><c> this</c><01:03:50.720><c> tutorial</c><01:03:51.200><c> you</c><01:03:51.280><c> have</c>

01:03:51.430 --> 01:03:51.440 align:start position:0%
you know that this tutorial you have
 

01:03:51.440 --> 01:03:53.750 align:start position:0%
you know that this tutorial you have
been<01:03:51.599><c> watching</c><01:03:52.160><c> is</c><01:03:52.480><c> actually</c><01:03:52.799><c> the</c><01:03:52.960><c> first</c><01:03:53.359><c> hour</c>

01:03:53.750 --> 01:03:53.760 align:start position:0%
been watching is actually the first hour
 

01:03:53.760 --> 01:03:55.990 align:start position:0%
been watching is actually the first hour
of<01:03:53.920><c> my</c><01:03:54.240><c> complete</c><01:03:54.799><c> typescript</c><01:03:55.359><c> course</c><01:03:55.839><c> the</c>

01:03:55.990 --> 01:03:56.000 align:start position:0%
of my complete typescript course the
 

01:03:56.000 --> 01:03:58.230 align:start position:0%
of my complete typescript course the
complete<01:03:56.480><c> course</c><01:03:56.799><c> is</c><01:03:56.880><c> about</c><01:03:57.359><c> five</c><01:03:57.599><c> hours</c><01:03:57.920><c> long</c>

01:03:58.230 --> 01:03:58.240 align:start position:0%
complete course is about five hours long
 

01:03:58.240 --> 01:04:00.630 align:start position:0%
complete course is about five hours long
and<01:03:58.480><c> goes</c><01:03:58.880><c> way</c><01:03:59.119><c> beyond</c><01:03:59.440><c> this</c><01:03:59.599><c> tutorial</c><01:04:00.400><c> it</c>

01:04:00.630 --> 01:04:00.640 align:start position:0%
and goes way beyond this tutorial it
 

01:04:00.640 --> 01:04:03.190 align:start position:0%
and goes way beyond this tutorial it
also<01:04:00.880><c> comes</c><01:04:01.200><c> with</c><01:04:01.599><c> exercises</c><01:04:02.319><c> and</c><01:04:02.480><c> solutions</c>

01:04:03.190 --> 01:04:03.200 align:start position:0%
also comes with exercises and solutions
 

01:04:03.200 --> 01:04:05.510 align:start position:0%
also comes with exercises and solutions
summary<01:04:03.599><c> notes</c><01:04:04.000><c> and</c><01:04:04.160><c> cheat</c><01:04:04.400><c> sheets</c><01:04:04.960><c> a</c><01:04:05.119><c> 30-day</c>

01:04:05.510 --> 01:04:05.520 align:start position:0%
summary notes and cheat sheets a 30-day
 

01:04:05.520 --> 01:04:07.430 align:start position:0%
summary notes and cheat sheets a 30-day
money-back<01:04:06.000><c> guarantee</c><01:04:06.640><c> and</c><01:04:06.799><c> a</c><01:04:06.880><c> certificate</c>

01:04:07.430 --> 01:04:07.440 align:start position:0%
money-back guarantee and a certificate
 

01:04:07.440 --> 01:04:09.829 align:start position:0%
money-back guarantee and a certificate
of<01:04:07.599><c> completion</c><01:04:08.160><c> you</c><01:04:08.319><c> can</c><01:04:08.480><c> add</c><01:04:08.720><c> your</c><01:04:08.880><c> resume</c><01:04:09.520><c> so</c>

01:04:09.829 --> 01:04:09.839 align:start position:0%
of completion you can add your resume so
 

01:04:09.839 --> 01:04:11.109 align:start position:0%
of completion you can add your resume so
if<01:04:10.000><c> you're</c><01:04:10.160><c> serious</c><01:04:10.559><c> about</c><01:04:10.799><c> learning</c>

01:04:11.109 --> 01:04:11.119 align:start position:0%
if you're serious about learning
 

01:04:11.119 --> 01:04:13.349 align:start position:0%
if you're serious about learning
typescript<01:04:11.839><c> and</c><01:04:12.079><c> are</c><01:04:12.240><c> looking</c><01:04:12.480><c> for</c><01:04:12.640><c> a</c><01:04:12.799><c> job</c><01:04:13.200><c> as</c>

01:04:13.349 --> 01:04:13.359 align:start position:0%
typescript and are looking for a job as
 

01:04:13.359 --> 01:04:15.589 align:start position:0%
typescript and are looking for a job as
a<01:04:13.520><c> front-end</c><01:04:14.079><c> or</c><01:04:14.240><c> a</c><01:04:14.319><c> back-end</c><01:04:14.720><c> developer</c><01:04:15.359><c> i</c>

01:04:15.589 --> 01:04:15.599 align:start position:0%
a front-end or a back-end developer i
 

01:04:15.599 --> 01:04:16.950 align:start position:0%
a front-end or a back-end developer i
highly<01:04:15.920><c> encourage</c><01:04:16.240><c> you</c><01:04:16.319><c> to</c><01:04:16.480><c> enroll</c><01:04:16.720><c> in</c><01:04:16.880><c> the</c>

01:04:16.950 --> 01:04:16.960 align:start position:0%
highly encourage you to enroll in the
 

01:04:16.960 --> 01:04:18.789 align:start position:0%
highly encourage you to enroll in the
course<01:04:17.520><c> in</c><01:04:17.599><c> case</c><01:04:17.839><c> you're</c><01:04:18.000><c> interested</c><01:04:18.640><c> i'll</c>

01:04:18.789 --> 01:04:18.799 align:start position:0%
course in case you're interested i'll
 

01:04:18.799 --> 01:04:22.030 align:start position:0%
course in case you're interested i'll
put<01:04:18.960><c> the</c><01:04:19.119><c> link</c><01:04:19.359><c> in</c><01:04:19.440><c> the</c><01:04:19.520><c> description</c><01:04:20.160><c> box</c>

01:04:22.030 --> 01:04:22.040 align:start position:0%
put the link in the description box
 

01:04:22.040 --> 01:04:27.510 align:start position:0%
put the link in the description box
[Music]

01:04:27.510 --> 01:04:27.520 align:start position:0%
 
 

01:04:27.520 --> 01:04:29.599 align:start position:0%
 
you

